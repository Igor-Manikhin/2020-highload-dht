<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (18,333 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (17 samples, 0.09%)</title><rect x="10.0" y="483.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>Method::get_c2i_entry() (4 samples, 0.02%)</title><rect x="10.1" y="467.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.1" y="478.0"></text>
</g>
<g>
<title>nmethod::verified_entry_point() const (7 samples, 0.04%)</title><rect x="10.6" y="467.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.6" y="478.0"></text>
</g>
<g>
<title>[unknown_Java] (49 samples, 0.27%)</title><rect x="11.1" y="483.0" width="3.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="14.1" y="494.0"></text>
</g>
<g>
<title>I2C/C2I adapters (4 samples, 0.02%)</title><rect x="11.1" y="467.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.1" y="478.0"></text>
</g>
<g>
<title>Interpreter (14 samples, 0.08%)</title><rect x="11.4" y="467.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="14.4" y="478.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (28 samples, 0.15%)</title><rect x="12.4" y="467.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="15.4" y="478.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (17 samples, 0.09%)</title><rect x="12.4" y="451.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="15.4" y="462.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (8 samples, 0.04%)</title><rect x="12.4" y="435.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.4" y="446.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (7 samples, 0.04%)</title><rect x="12.9" y="435.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.9" y="446.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (6 samples, 0.03%)</title><rect x="13.0" y="419.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="16.0" y="430.0"></text>
</g>
<g>
<title>Method::get_c2i_entry() (6 samples, 0.03%)</title><rect x="13.7" y="451.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="16.7" y="462.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (18,184 samples, 99.19%)</title><rect x="14.3" y="483.0" width="1170.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="17.3" y="494.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>I2C/C2I adapters (6 samples, 0.03%)</title><rect x="15.5" y="467.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.5" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (8 samples, 0.04%)</title><rect x="15.9" y="467.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.9" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (7 samples, 0.04%)</title><rect x="16.4" y="467.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="19.4" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (7 samples, 0.04%)</title><rect x="16.4" y="451.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.4" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (8 samples, 0.04%)</title><rect x="16.9" y="467.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="19.9" y="478.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (8 samples, 0.04%)</title><rect x="16.9" y="451.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (8 samples, 0.04%)</title><rect x="16.9" y="435.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.9" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (2,869 samples, 15.65%)</title><rect x="17.4" y="467.0" width="184.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.4" y="478.0">one/nio/net/JavaSelector..</text>
</g>
<g>
<title>I2C/C2I adapters (18 samples, 0.10%)</title><rect x="23.6" y="451.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.6" y="462.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (8 samples, 0.04%)</title><rect x="24.8" y="451.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="27.8" y="462.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (8 samples, 0.04%)</title><rect x="24.8" y="435.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="27.8" y="446.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (5 samples, 0.03%)</title><rect x="24.9" y="419.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="27.9" y="430.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (5 samples, 0.03%)</title><rect x="24.9" y="403.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="27.9" y="414.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (23 samples, 0.13%)</title><rect x="25.3" y="451.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.3" y="462.0"></text>
</g>
<g>
<title>JVM_NanoTime (4 samples, 0.02%)</title><rect x="25.6" y="435.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="28.6" y="446.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (14 samples, 0.08%)</title><rect x="25.9" y="435.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="28.9" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (20 samples, 0.11%)</title><rect x="26.8" y="451.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.8" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (9 samples, 0.05%)</title><rect x="27.5" y="435.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.5" y="446.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (9 samples, 0.05%)</title><rect x="27.5" y="419.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="30.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (5 samples, 0.03%)</title><rect x="27.8" y="403.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.8" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (5 samples, 0.03%)</title><rect x="27.8" y="387.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.8" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (53 samples, 0.29%)</title><rect x="28.1" y="451.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (45 samples, 0.25%)</title><rect x="28.6" y="435.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (41 samples, 0.22%)</title><rect x="28.9" y="419.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.9" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (34 samples, 0.19%)</title><rect x="28.9" y="403.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.9" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (34 samples, 0.19%)</title><rect x="28.9" y="387.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.9" y="398.0"></text>
</g>
<g>
<title>__block_literal_global (5 samples, 0.03%)</title><rect x="29.4" y="371.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="32.4" y="382.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (19 samples, 0.10%)</title><rect x="29.8" y="371.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="32.8" y="382.0"></text>
</g>
<g>
<title>__block_literal_global (8 samples, 0.04%)</title><rect x="30.5" y="355.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="33.5" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (7 samples, 0.04%)</title><rect x="31.0" y="403.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (2,635 samples, 14.37%)</title><rect x="31.5" y="451.0" width="169.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.5" y="462.0">sun/nio/ch/SelectorImp..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2,634 samples, 14.37%)</title><rect x="31.6" y="435.0" width="169.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.6" y="446.0">sun/nio/ch/SelectorImp..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (2,605 samples, 14.21%)</title><rect x="33.4" y="419.0" width="167.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="36.4" y="430.0">sun/nio/ch/KQueueSele..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (2,425 samples, 13.23%)</title><rect x="33.7" y="403.0" width="156.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.7" y="414.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (25 samples, 0.14%)</title><rect x="40.4" y="387.0" width="1.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="43.4" y="398.0"></text>
</g>
<g>
<title>kevent (2,296 samples, 12.52%)</title><rect x="42.0" y="387.0" width="147.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="45.0" y="398.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (103 samples, 0.56%)</title><rect x="189.8" y="403.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="192.8" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.05%)</title><rect x="190.7" y="387.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="193.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.03%)</title><rect x="190.7" y="371.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="193.7" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.02%)</title><rect x="191.3" y="387.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="194.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.getFilter (4 samples, 0.02%)</title><rect x="191.7" y="387.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="194.7" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getShort (4 samples, 0.02%)</title><rect x="191.7" y="371.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="194.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (69 samples, 0.38%)</title><rect x="192.0" y="387.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="195.0" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.add (56 samples, 0.31%)</title><rect x="192.0" y="371.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.0" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.put (56 samples, 0.31%)</title><rect x="192.0" y="355.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.0" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (56 samples, 0.31%)</title><rect x="192.0" y="339.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.0" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (6 samples, 0.03%)</title><rect x="193.1" y="323.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.1" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (29 samples, 0.16%)</title><rect x="193.4" y="323.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.4" y="334.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.03%)</title><rect x="195.3" y="323.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="198.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (9 samples, 0.05%)</title><rect x="195.8" y="371.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (13 samples, 0.07%)</title><rect x="196.4" y="403.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.4" y="414.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (6 samples, 0.03%)</title><rect x="196.9" y="387.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (6 samples, 0.03%)</title><rect x="197.2" y="403.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="200.2" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (6 samples, 0.03%)</title><rect x="197.2" y="387.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="200.2" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (6 samples, 0.03%)</title><rect x="197.2" y="371.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="200.2" y="382.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (6 samples, 0.03%)</title><rect x="197.2" y="355.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.2" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (6 samples, 0.03%)</title><rect x="197.2" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="200.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (54 samples, 0.29%)</title><rect x="197.6" y="403.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.6" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (6 samples, 0.03%)</title><rect x="198.9" y="387.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="201.9" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (6 samples, 0.03%)</title><rect x="198.9" y="371.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.9" y="382.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (28 samples, 0.15%)</title><rect x="199.3" y="387.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.3" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (5 samples, 0.03%)</title><rect x="199.3" y="371.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="202.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (5 samples, 0.03%)</title><rect x="199.3" y="355.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (5 samples, 0.03%)</title><rect x="199.3" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="202.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (23 samples, 0.13%)</title><rect x="199.6" y="371.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectedKeys (5 samples, 0.03%)</title><rect x="201.1" y="451.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.1" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (10 samples, 0.05%)</title><rect x="201.4" y="451.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.4" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (5 samples, 0.03%)</title><rect x="201.7" y="435.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.7" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (4 samples, 0.02%)</title><rect x="201.8" y="419.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="204.8" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (15,267 samples, 83.28%)</title><rect x="202.1" y="467.0" width="982.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="205.1" y="478.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (15,258 samples, 83.23%)</title><rect x="202.3" y="451.0" width="982.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.3" y="462.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (14,474 samples, 78.95%)</title><rect x="203.4" y="435.0" width="931.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="206.4" y="446.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (14,317 samples, 78.09%)</title><rect x="204.3" y="419.0" width="921.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="207.3" y="430.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (14,314 samples, 78.08%)</title><rect x="204.5" y="403.0" width="921.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="207.5" y="414.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (14,273 samples, 77.85%)</title><rect x="204.5" y="387.0" width="918.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="207.5" y="398.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,909 samples, 10.41%)</title><rect x="204.6" y="371.0" width="122.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.6" y="382.0">one/nio/http/Ht..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.03%)</title><rect x="204.6" y="355.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.6" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.03%)</title><rect x="204.6" y="339.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="207.6" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.03%)</title><rect x="204.6" y="323.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.6" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,889 samples, 10.30%)</title><rect x="205.2" y="355.0" width="121.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="208.2" y="366.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (593 samples, 3.23%)</title><rect x="205.2" y="339.0" width="38.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.2" y="350.0">one..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (592 samples, 3.23%)</title><rect x="205.2" y="323.0" width="38.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="208.2" y="334.0">one..</text>
</g>
<g>
<title>one/nio/util/Utf8.write (592 samples, 3.23%)</title><rect x="205.2" y="307.0" width="38.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.2" y="318.0">one..</text>
</g>
<g>
<title>one/nio/util/Utf8.write (592 samples, 3.23%)</title><rect x="205.2" y="291.0" width="38.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="208.2" y="302.0">one..</text>
</g>
<g>
<title>one/nio/util/Utf8.write (591 samples, 3.22%)</title><rect x="205.3" y="275.0" width="38.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.3" y="286.0">one..</text>
</g>
<g>
<title>__cxx_global_var_init.4 (5 samples, 0.03%)</title><rect x="228.5" y="259.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="231.5" y="270.0"></text>
</g>
<g>
<title>gettimeofday (9 samples, 0.05%)</title><rect x="228.8" y="259.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="231.8" y="270.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (13 samples, 0.07%)</title><rect x="229.4" y="259.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="232.4" y="270.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (12 samples, 0.07%)</title><rect x="230.3" y="259.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="233.3" y="270.0"></text>
</g>
<g>
<title>java/lang/String.charAt (22 samples, 0.12%)</title><rect x="231.0" y="259.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String.coder (8 samples, 0.04%)</title><rect x="232.4" y="259.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.4" y="270.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.02%)</title><rect x="233.0" y="259.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.0" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="233.2" y="259.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.2" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.03%)</title><rect x="233.5" y="259.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.5" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (16 samples, 0.09%)</title><rect x="233.8" y="259.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (15 samples, 0.08%)</title><rect x="234.8" y="259.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (14 samples, 0.08%)</title><rect x="235.8" y="259.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="238.8" y="270.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (5 samples, 0.03%)</title><rect x="237.0" y="259.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.0" y="270.0"></text>
</g>
<g>
<title>jbyte_arraycopy (4 samples, 0.02%)</title><rect x="237.7" y="259.0" width="0.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="240.7" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (24 samples, 0.13%)</title><rect x="237.9" y="259.0" width="1.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="240.9" y="270.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (6 samples, 0.03%)</title><rect x="239.5" y="259.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="242.5" y="270.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.03%)</title><rect x="240.0" y="259.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.0" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (32 samples, 0.17%)</title><rect x="240.4" y="259.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="243.4" y="270.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (5 samples, 0.03%)</title><rect x="240.7" y="243.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="243.7" y="254.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (7 samples, 0.04%)</title><rect x="241.0" y="243.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="244.0" y="254.0"></text>
</g>
<g>
<title>gettimeofday (14 samples, 0.08%)</title><rect x="241.5" y="243.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="244.5" y="254.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (10 samples, 0.05%)</title><rect x="241.8" y="227.0" width="0.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="244.8" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOStatus.normalize (4 samples, 0.02%)</title><rect x="242.4" y="259.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.4" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (7 samples, 0.04%)</title><rect x="242.9" y="259.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="245.9" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,296 samples, 7.07%)</title><rect x="243.3" y="339.0" width="83.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.3" y="350.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (1,295 samples, 7.06%)</title><rect x="243.4" y="323.0" width="83.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.4" y="334.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,293 samples, 7.05%)</title><rect x="243.5" y="307.0" width="83.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.5" y="318.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (1,293 samples, 7.05%)</title><rect x="243.5" y="291.0" width="83.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.5" y="302.0">one/nio/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1,291 samples, 7.04%)</title><rect x="243.6" y="275.0" width="83.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.6" y="286.0">sun/nio/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (12 samples, 0.07%)</title><rect x="243.8" y="259.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="246.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (12 samples, 0.07%)</title><rect x="243.8" y="243.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="246.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (12 samples, 0.07%)</title><rect x="243.8" y="227.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (12 samples, 0.07%)</title><rect x="243.8" y="211.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (7 samples, 0.04%)</title><rect x="244.1" y="195.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="247.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1,269 samples, 6.92%)</title><rect x="244.7" y="259.0" width="81.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.7" y="270.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1,269 samples, 6.92%)</title><rect x="244.7" y="243.0" width="81.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.7" y="254.0">sun/nio/c..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (10 samples, 0.05%)</title><rect x="245.1" y="227.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.1" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (9 samples, 0.05%)</title><rect x="245.2" y="211.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.2" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (8 samples, 0.04%)</title><rect x="245.3" y="195.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.3" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (8 samples, 0.04%)</title><rect x="245.3" y="179.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="248.3" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (1,180 samples, 6.44%)</title><rect x="245.8" y="227.0" width="75.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="248.8" y="238.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (1,180 samples, 6.44%)</title><rect x="245.8" y="211.0" width="75.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.8" y="222.0">sun/nio/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1,179 samples, 6.43%)</title><rect x="245.8" y="195.0" width="75.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.8" y="206.0">sun/nio/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (11 samples, 0.06%)</title><rect x="248.7" y="179.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="251.7" y="190.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.02%)</title><rect x="249.1" y="163.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="252.1" y="174.0"></text>
</g>
<g>
<title>write (1,121 samples, 6.11%)</title><rect x="249.6" y="179.0" width="72.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="252.6" y="190.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (73 samples, 0.40%)</title><rect x="321.7" y="227.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="324.7" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (30 samples, 0.16%)</title><rect x="322.1" y="211.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.1" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (12 samples, 0.07%)</title><rect x="323.1" y="195.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="326.1" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.04%)</title><rect x="323.4" y="179.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="326.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (37 samples, 0.20%)</title><rect x="324.0" y="211.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="327.0" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.07%)</title><rect x="324.9" y="195.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="327.9" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (12 samples, 0.07%)</title><rect x="324.9" y="179.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="327.9" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (11 samples, 0.06%)</title><rect x="325.0" y="163.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (11 samples, 0.06%)</title><rect x="325.7" y="195.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="328.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (5 samples, 0.03%)</title><rect x="326.4" y="259.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="329.4" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (11 samples, 0.06%)</title><rect x="326.7" y="355.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="329.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.03%)</title><rect x="327.1" y="339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="330.1" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.03%)</title><rect x="327.1" y="323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="330.1" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (6 samples, 0.03%)</title><rect x="327.1" y="307.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.1" y="318.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.03%)</title><rect x="327.1" y="291.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="330.1" y="302.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (5 samples, 0.03%)</title><rect x="327.1" y="275.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.1" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (15 samples, 0.08%)</title><rect x="327.4" y="371.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.4" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (15 samples, 0.08%)</title><rect x="327.4" y="355.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="330.4" y="366.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (9 samples, 0.05%)</title><rect x="327.8" y="339.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="330.8" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.04%)</title><rect x="327.9" y="323.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="330.9" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.04%)</title><rect x="327.9" y="307.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="330.9" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.04%)</title><rect x="327.9" y="291.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="330.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igor_manikhin/ServiceImpl.entity (12,348 samples, 67.35%)</title><rect x="328.4" y="371.0" width="794.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="331.4" y="382.0">ru/mail/polis/service/igor_manikhin/ServiceImpl.entity</text>
</g>
<g>
<title>ru/mail/polis/service/igor_manikhin/ServiceImpl.put (12,346 samples, 67.34%)</title><rect x="328.5" y="355.0" width="794.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="331.5" y="366.0">ru/mail/polis/service/igor_manikhin/ServiceImpl.put</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (17 samples, 0.09%)</title><rect x="328.5" y="339.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.5" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (17 samples, 0.09%)</title><rect x="328.5" y="323.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="331.5" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (17 samples, 0.09%)</title><rect x="328.5" y="307.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="331.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (17 samples, 0.09%)</title><rect x="328.5" y="291.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="331.5" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (17 samples, 0.09%)</title><rect x="328.5" y="275.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="331.5" y="286.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (15 samples, 0.08%)</title><rect x="328.6" y="259.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.6" y="270.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (15 samples, 0.08%)</title><rect x="328.6" y="243.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="331.6" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (7 samples, 0.04%)</title><rect x="329.6" y="339.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="332.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igor_manikhin/DAOImpl.upsert (12,322 samples, 67.21%)</title><rect x="330.1" y="339.0" width="793.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="333.1" y="350.0">ru/mail/polis/dao/igor_manikhin/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (12,312 samples, 67.16%)</title><rect x="330.1" y="323.0" width="792.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.1" y="334.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (12,312 samples, 67.16%)</title><rect x="330.1" y="307.0" width="792.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="333.1" y="318.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (12,246 samples, 66.80%)</title><rect x="334.3" y="291.0" width="788.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="337.3" y="302.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (4 samples, 0.02%)</title><rect x="335.4" y="275.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="338.4" y="286.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (10 samples, 0.05%)</title><rect x="335.7" y="275.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="338.7" y="286.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (11 samples, 0.06%)</title><rect x="336.3" y="275.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="339.3" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (15 samples, 0.08%)</title><rect x="337.4" y="275.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="340.4" y="286.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (13 samples, 0.07%)</title><rect x="338.4" y="275.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="341.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (16 samples, 0.09%)</title><rect x="339.2" y="275.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="342.2" y="286.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (12,154 samples, 66.30%)</title><rect x="340.3" y="275.0" width="782.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="343.3" y="286.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyte..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (6 samples, 0.03%)</title><rect x="341.2" y="259.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="344.2" y="270.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (6 samples, 0.03%)</title><rect x="341.6" y="259.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="344.6" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (7 samples, 0.04%)</title><rect x="342.0" y="259.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="345.0" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (10 samples, 0.05%)</title><rect x="342.4" y="259.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="345.4" y="270.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.03%)</title><rect x="343.1" y="259.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="346.1" y="270.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (7 samples, 0.04%)</title><rect x="343.4" y="259.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="346.4" y="270.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (4 samples, 0.02%)</title><rect x="344.1" y="259.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="347.1" y="270.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (6 samples, 0.03%)</title><rect x="344.6" y="259.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="347.6" y="270.0"></text>
</g>
<g>
<title>free (19 samples, 0.10%)</title><rect x="345.3" y="259.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="348.3" y="270.0"></text>
</g>
<g>
<title>szone_size (16 samples, 0.09%)</title><rect x="345.5" y="243.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="348.5" y="254.0"></text>
</g>
<g>
<title>tiny_size (15 samples, 0.08%)</title><rect x="345.5" y="227.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="348.5" y="238.0"></text>
</g>
<g>
<title>free_tiny (57 samples, 0.31%)</title><rect x="346.6" y="259.0" width="3.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="349.6" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (5 samples, 0.03%)</title><rect x="347.5" y="243.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="350.5" y="254.0"></text>
</g>
<g>
<title>tiny_free_no_lock (37 samples, 0.20%)</title><rect x="347.9" y="243.0" width="2.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="350.9" y="254.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (18 samples, 0.10%)</title><rect x="348.8" y="227.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="351.8" y="238.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (4 samples, 0.02%)</title><rect x="350.0" y="227.0" width="0.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="353.0" y="238.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (53 samples, 0.29%)</title><rect x="350.2" y="259.0" width="3.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="353.2" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (10 samples, 0.05%)</title><rect x="351.3" y="243.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="354.3" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.02%)</title><rect x="351.9" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="354.9" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (23 samples, 0.13%)</title><rect x="352.2" y="243.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="355.2" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.03%)</title><rect x="352.4" y="227.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="355.4" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (14 samples, 0.08%)</title><rect x="352.7" y="227.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="355.7" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (13 samples, 0.07%)</title><rect x="352.7" y="211.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="355.7" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (10 samples, 0.05%)</title><rect x="352.9" y="195.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="355.9" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (10 samples, 0.05%)</title><rect x="352.9" y="179.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="355.9" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (4 samples, 0.02%)</title><rect x="353.3" y="163.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="356.3" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (152 samples, 0.83%)</title><rect x="353.6" y="259.0" width="9.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="356.6" y="270.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (6 samples, 0.03%)</title><rect x="355.5" y="243.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="358.5" y="254.0"></text>
</g>
<g>
<title>os::is_MP() (6 samples, 0.03%)</title><rect x="355.5" y="227.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="358.5" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (52 samples, 0.28%)</title><rect x="356.3" y="243.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="359.3" y="254.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (4 samples, 0.02%)</title><rect x="356.3" y="227.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="359.3" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (41 samples, 0.22%)</title><rect x="356.9" y="227.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="359.9" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (32 samples, 0.17%)</title><rect x="357.1" y="211.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="360.1" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (30 samples, 0.16%)</title><rect x="357.2" y="195.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="360.2" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (25 samples, 0.14%)</title><rect x="357.4" y="179.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="360.4" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (5 samples, 0.03%)</title><rect x="357.4" y="163.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="360.4" y="174.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (5 samples, 0.03%)</title><rect x="357.9" y="163.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="360.9" y="174.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (9 samples, 0.05%)</title><rect x="358.4" y="163.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="361.4" y="174.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="359.6" y="243.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="362.6" y="254.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (44 samples, 0.24%)</title><rect x="360.0" y="243.0" width="2.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="363.0" y="254.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (14 samples, 0.08%)</title><rect x="361.9" y="227.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="364.9" y="238.0"></text>
</g>
<g>
<title>Chunk::next() const (13 samples, 0.07%)</title><rect x="361.9" y="211.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="364.9" y="222.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (8 samples, 0.04%)</title><rect x="362.8" y="243.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="365.8" y="254.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.04%)</title><rect x="363.4" y="259.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="366.4" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (131 samples, 0.71%)</title><rect x="363.9" y="259.0" width="8.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="366.9" y="270.0"></text>
</g>
<g>
<title>malloc (129 samples, 0.70%)</title><rect x="364.0" y="243.0" width="8.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="367.0" y="254.0"></text>
</g>
<g>
<title>default_zone_malloc (5 samples, 0.03%)</title><rect x="364.1" y="227.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="367.1" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (119 samples, 0.65%)</title><rect x="364.5" y="227.0" width="7.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="367.5" y="238.0"></text>
</g>
<g>
<title>default_zone_malloc (17 samples, 0.09%)</title><rect x="364.9" y="211.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="367.9" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (91 samples, 0.50%)</title><rect x="366.0" y="211.0" width="5.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="369.0" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (88 samples, 0.48%)</title><rect x="366.2" y="195.0" width="5.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="369.2" y="206.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (9 samples, 0.05%)</title><rect x="368.8" y="179.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="371.8" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (39 samples, 0.21%)</title><rect x="369.3" y="179.0" width="2.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="372.3" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="371.9" y="211.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="374.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (11,631 samples, 63.44%)</title><rect x="372.4" y="259.0" width="748.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="375.4" y="270.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_trai..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (11,625 samples, 63.41%)</title><rect x="372.8" y="243.0" width="748.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="375.8" y="254.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, ..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (11,595 samples, 63.25%)</title><rect x="373.0" y="227.0" width="746.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="376.0" y="238.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rock..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (4 samples, 0.02%)</title><rect x="373.9" y="211.0" width="0.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="376.9" y="222.0"></text>
</g>
<g>
<title>operator delete(void*) (5 samples, 0.03%)</title><rect x="374.5" y="211.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="377.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (11,288 samples, 61.57%)</title><rect x="374.9" y="211.0" width="726.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="377.9" y="222.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*)</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (4 samples, 0.02%)</title><rect x="375.7" y="195.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="378.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (6 samples, 0.03%)</title><rect x="376.1" y="195.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="379.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (11,215 samples, 61.17%)</title><rect x="376.5" y="195.0" width="721.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="379.5" y="206.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (27 samples, 0.15%)</title><rect x="384.9" y="179.0" width="1.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="387.9" y="190.0"></text>
</g>
<g>
<title>pthread_cond_destroy (6 samples, 0.03%)</title><rect x="386.7" y="179.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="389.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (13 samples, 0.07%)</title><rect x="387.4" y="179.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="390.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (1,206 samples, 6.58%)</title><rect x="388.3" y="179.0" width="77.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="391.3" y="190.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (13 samples, 0.07%)</title><rect x="388.7" y="163.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="391.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Append(rocksdb::WriteBatch*, rocksdb::WriteBatch const*, bool) (6 samples, 0.03%)</title><rect x="389.1" y="147.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="392.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (1,157 samples, 6.31%)</title><rect x="389.6" y="163.0" width="74.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="392.6" y="174.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1,146 samples, 6.25%)</title><rect x="390.2" y="147.0" width="73.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="393.2" y="158.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Flush(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (9 samples, 0.05%)</title><rect x="390.9" y="131.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="393.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (1,062 samples, 5.79%)</title><rect x="391.5" y="131.0" width="68.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="394.5" y="142.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (4 samples, 0.02%)</title><rect x="392.3" y="115.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="395.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1,043 samples, 5.69%)</title><rect x="392.7" y="115.0" width="67.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="395.7" y="126.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (12 samples, 0.07%)</title><rect x="393.5" y="99.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="396.5" y="110.0"></text>
</g>
<g>
<title>write (1,019 samples, 5.56%)</title><rect x="394.3" y="99.0" width="65.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="397.3" y="110.0">write</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (20 samples, 0.11%)</title><rect x="460.0" y="131.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="463.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (42 samples, 0.23%)</title><rect x="461.3" y="131.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="464.3" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (6 samples, 0.03%)</title><rect x="461.8" y="115.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="464.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (7 samples, 0.04%)</title><rect x="462.2" y="115.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="465.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (20 samples, 0.11%)</title><rect x="462.7" y="115.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="465.7" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (11 samples, 0.06%)</title><rect x="463.3" y="99.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="466.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (21 samples, 0.11%)</title><rect x="464.0" y="163.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="467.0" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (16 samples, 0.09%)</title><rect x="464.4" y="147.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="467.4" y="158.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (13 samples, 0.07%)</title><rect x="464.5" y="131.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="467.5" y="142.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (9 samples, 0.05%)</title><rect x="464.7" y="115.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="467.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (4 samples, 0.02%)</title><rect x="465.5" y="163.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="468.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (6 samples, 0.03%)</title><rect x="466.1" y="179.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="469.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (14 samples, 0.08%)</title><rect x="466.5" y="179.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="469.5" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.02%)</title><rect x="466.8" y="163.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="469.8" y="174.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (5 samples, 0.03%)</title><rect x="467.1" y="163.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="470.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.02%)</title><rect x="467.8" y="179.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="470.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (167 samples, 0.91%)</title><rect x="468.0" y="179.0" width="10.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="471.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (157 samples, 0.86%)</title><rect x="468.7" y="163.0" width="10.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="471.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (151 samples, 0.82%)</title><rect x="469.0" y="147.0" width="9.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="472.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (147 samples, 0.80%)</title><rect x="469.3" y="131.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="472.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (4 samples, 0.02%)</title><rect x="469.6" y="115.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="472.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (131 samples, 0.71%)</title><rect x="469.9" y="115.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="472.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (7 samples, 0.04%)</title><rect x="470.8" y="99.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="473.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (107 samples, 0.58%)</title><rect x="471.4" y="99.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="474.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (6 samples, 0.03%)</title><rect x="474.6" y="83.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="477.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.02%)</title><rect x="474.8" y="67.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="477.8" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (42 samples, 0.23%)</title><rect x="475.2" y="83.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="478.2" y="94.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.02%)</title><rect x="476.1" y="67.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="479.1" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (24 samples, 0.13%)</title><rect x="476.3" y="67.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="479.3" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (18 samples, 0.10%)</title><rect x="476.7" y="51.0" width="1.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="479.7" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (580 samples, 3.16%)</title><rect x="478.8" y="179.0" width="37.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="481.8" y="190.0">roc..</text>
</g>
<g>
<title>Java_org_rocksdb_MemoryUtil_getApproximateMemoryUsageByType (7 samples, 0.04%)</title><rect x="482.6" y="163.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="485.6" y="174.0"></text>
</g>
<g>
<title>free (4 samples, 0.02%)</title><rect x="483.1" y="163.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="486.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (11 samples, 0.06%)</title><rect x="483.6" y="163.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="486.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.03%)</title><rect x="484.4" y="163.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="487.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (6 samples, 0.03%)</title><rect x="484.8" y="163.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="487.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (44 samples, 0.24%)</title><rect x="485.1" y="163.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="488.1" y="174.0"></text>
</g>
<g>
<title>free (17 samples, 0.09%)</title><rect x="485.8" y="147.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="488.8" y="158.0"></text>
</g>
<g>
<title>szone_size (9 samples, 0.05%)</title><rect x="486.3" y="131.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="489.3" y="142.0"></text>
</g>
<g>
<title>tiny_size (9 samples, 0.05%)</title><rect x="486.3" y="115.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="489.3" y="126.0"></text>
</g>
<g>
<title>free_tiny (16 samples, 0.09%)</title><rect x="486.9" y="147.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="489.9" y="158.0"></text>
</g>
<g>
<title>tiny_free_no_lock (10 samples, 0.05%)</title><rect x="487.3" y="131.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="490.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (436 samples, 2.38%)</title><rect x="488.0" y="163.0" width="28.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="491.0" y="174.0">ro..</text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (9 samples, 0.05%)</title><rect x="488.8" y="147.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="491.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (414 samples, 2.26%)</title><rect x="489.4" y="147.0" width="26.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="492.4" y="158.0">r..</text>
</g>
<g>
<title>Java_org_rocksdb_Statistics_toString (5 samples, 0.03%)</title><rect x="489.6" y="131.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="492.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (6 samples, 0.03%)</title><rect x="490.1" y="131.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="493.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (4 samples, 0.02%)</title><rect x="490.5" y="131.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="493.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (393 samples, 2.14%)</title><rect x="490.7" y="131.0" width="25.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="493.7" y="142.0">r..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="491.4" y="115.0" width="0.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="494.4" y="126.0"></text>
</g>
<g>
<title>operator new(unsigned long) (37 samples, 0.20%)</title><rect x="491.6" y="115.0" width="2.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="494.6" y="126.0"></text>
</g>
<g>
<title>malloc (37 samples, 0.20%)</title><rect x="491.6" y="99.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="494.6" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (34 samples, 0.19%)</title><rect x="491.8" y="83.0" width="2.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="494.8" y="94.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (28 samples, 0.15%)</title><rect x="492.2" y="67.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="495.2" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (23 samples, 0.13%)</title><rect x="492.5" y="51.0" width="1.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="495.5" y="62.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (8 samples, 0.04%)</title><rect x="493.4" y="35.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="496.4" y="46.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (4 samples, 0.02%)</title><rect x="494.3" y="115.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="497.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (322 samples, 1.76%)</title><rect x="494.5" y="115.0" width="20.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="497.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (5 samples, 0.03%)</title><rect x="496.1" y="99.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="499.1" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (292 samples, 1.59%)</title><rect x="496.5" y="99.0" width="18.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="499.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (14 samples, 0.08%)</title><rect x="498.1" y="83.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="501.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (8 samples, 0.04%)</title><rect x="498.5" y="67.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="501.5" y="78.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (248 samples, 1.35%)</title><rect x="499.3" y="83.0" width="16.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="502.3" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (6 samples, 0.03%)</title><rect x="507.5" y="67.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="510.5" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (13 samples, 0.07%)</title><rect x="507.9" y="67.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="510.9" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (6 samples, 0.03%)</title><rect x="508.2" y="51.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="511.2" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.02%)</title><rect x="508.3" y="35.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="511.3" y="46.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (99 samples, 0.54%)</title><rect x="508.8" y="67.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="511.8" y="78.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (4 samples, 0.02%)</title><rect x="510.6" y="51.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="513.6" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (6 samples, 0.03%)</title><rect x="510.9" y="51.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="513.9" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (55 samples, 0.30%)</title><rect x="511.3" y="51.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="514.3" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (42 samples, 0.23%)</title><rect x="512.1" y="35.0" width="2.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="515.1" y="46.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (5 samples, 0.03%)</title><rect x="514.8" y="51.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="517.8" y="62.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.02%)</title><rect x="515.5" y="115.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="518.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (5 samples, 0.03%)</title><rect x="515.7" y="115.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="518.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (4,960 samples, 27.06%)</title><rect x="516.4" y="179.0" width="319.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="519.4" y="190.0">rocksdb::WriteThread::AwaitState(rocksdb::W..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (5 samples, 0.03%)</title><rect x="638.3" y="163.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="641.3" y="174.0"></text>
</g>
<g>
<title>pthread_cond_wait (10 samples, 0.05%)</title><rect x="638.8" y="163.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="641.8" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_lock (6 samples, 0.03%)</title><rect x="639.5" y="163.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="642.5" y="174.0"></text>
</g>
<g>
<title>sched_yield (4 samples, 0.02%)</title><rect x="640.1" y="163.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="643.1" y="174.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (280 samples, 1.53%)</title><rect x="640.4" y="163.0" width="18.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="643.4" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2,711 samples, 14.79%)</title><rect x="658.6" y="163.0" width="174.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="661.6" y="174.0">std::__1::condition_va..</text>
</g>
<g>
<title>__psynch_cvwait (2,532 samples, 13.81%)</title><rect x="658.6" y="147.0" width="163.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="661.6" y="158.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (161 samples, 0.88%)</title><rect x="821.7" y="147.0" width="10.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="824.7" y="158.0"></text>
</g>
<g>
<title>_pthread_cond_check_init_slow (9 samples, 0.05%)</title><rect x="823.0" y="131.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="826.0" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (14 samples, 0.08%)</title><rect x="823.6" y="131.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="826.6" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (111 samples, 0.61%)</title><rect x="824.5" y="131.0" width="7.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="827.5" y="142.0"></text>
</g>
<g>
<title>__psynch_mutexwait (109 samples, 0.59%)</title><rect x="824.5" y="115.0" width="7.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="827.5" y="126.0"></text>
</g>
<g>
<title>_pthread_testcancel (6 samples, 0.03%)</title><rect x="831.7" y="131.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="834.7" y="142.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 0.05%)</title><rect x="832.5" y="147.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="835.5" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (35 samples, 0.19%)</title><rect x="833.2" y="163.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="836.2" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (7 samples, 0.04%)</title><rect x="833.2" y="147.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="836.2" y="158.0"></text>
</g>
<g>
<title>_pthread_mutex_lock_init_slow (28 samples, 0.15%)</title><rect x="833.6" y="147.0" width="1.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="836.6" y="158.0"></text>
</g>
<g>
<title>_pthread_mutex_check_init_slow (28 samples, 0.15%)</title><rect x="833.6" y="131.0" width="1.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="836.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (3,416 samples, 18.63%)</title><rect x="835.6" y="179.0" width="219.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="838.6" y="190.0">rocksdb::WriteThread::Complet..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (3,392 samples, 18.50%)</title><rect x="836.3" y="163.0" width="218.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="839.3" y="174.0">rocksdb::WriteThread::AwaitSt..</text>
</g>
<g>
<title>sched_yield (20 samples, 0.11%)</title><rect x="892.1" y="147.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="895.1" y="158.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (1,874 samples, 10.22%)</title><rect x="893.3" y="147.0" width="120.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="896.3" y="158.0">si_module_stati..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (34 samples, 0.19%)</title><rect x="1014.0" y="147.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1017.0" y="158.0"></text>
</g>
<g>
<title>clock_gettime (29 samples, 0.16%)</title><rect x="1014.0" y="131.0" width="1.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1017.0" y="142.0"></text>
</g>
<g>
<title>__block_literal_global (7 samples, 0.04%)</title><rect x="1014.2" y="115.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1017.2" y="126.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (19 samples, 0.10%)</title><rect x="1014.7" y="115.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1017.7" y="126.0"></text>
</g>
<g>
<title>__block_literal_global (6 samples, 0.03%)</title><rect x="1015.0" y="99.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1018.0" y="110.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (8 samples, 0.04%)</title><rect x="1015.4" y="99.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1018.4" y="110.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (4 samples, 0.02%)</title><rect x="1015.9" y="131.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1018.9" y="142.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (596 samples, 3.25%)</title><rect x="1016.2" y="147.0" width="38.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1019.2" y="158.0">std..</text>
</g>
<g>
<title>__psynch_cvwait (564 samples, 3.08%)</title><rect x="1016.2" y="131.0" width="36.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1019.2" y="142.0">__p..</text>
</g>
<g>
<title>_pthread_cond_wait (30 samples, 0.16%)</title><rect x="1052.5" y="131.0" width="1.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1055.5" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (21 samples, 0.11%)</title><rect x="1053.0" y="115.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1056.0" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (21 samples, 0.11%)</title><rect x="1053.0" y="99.0" width="1.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1056.0" y="110.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (7 samples, 0.04%)</title><rect x="1054.8" y="163.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1057.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (5 samples, 0.03%)</title><rect x="1055.5" y="179.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1058.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (181 samples, 0.99%)</title><rect x="1055.8" y="179.0" width="11.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1058.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (123 samples, 0.67%)</title><rect x="1056.2" y="163.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1059.2" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (90 samples, 0.49%)</title><rect x="1056.9" y="147.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1059.9" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (86 samples, 0.47%)</title><rect x="1057.0" y="131.0" width="5.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1060.0" y="142.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (20 samples, 0.11%)</title><rect x="1062.8" y="147.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.8" y="158.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (20 samples, 0.11%)</title><rect x="1062.8" y="131.0" width="1.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1065.8" y="142.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (20 samples, 0.11%)</title><rect x="1062.8" y="115.0" width="1.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1065.8" y="126.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (41 samples, 0.22%)</title><rect x="1064.1" y="163.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1067.1" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (34 samples, 0.19%)</title><rect x="1064.1" y="147.0" width="2.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1067.1" y="158.0"></text>
</g>
<g>
<title>pthread_cond_signal (6 samples, 0.03%)</title><rect x="1066.4" y="147.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1069.4" y="158.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (4 samples, 0.02%)</title><rect x="1066.5" y="131.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1069.5" y="142.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (10 samples, 0.05%)</title><rect x="1066.8" y="163.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.8" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (8 samples, 0.04%)</title><rect x="1066.9" y="147.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1069.9" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (8 samples, 0.04%)</title><rect x="1066.9" y="131.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1069.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (77 samples, 0.42%)</title><rect x="1067.4" y="179.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.4" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (54 samples, 0.29%)</title><rect x="1068.2" y="163.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1071.2" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (51 samples, 0.28%)</title><rect x="1068.3" y="147.0" width="3.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1071.3" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (6 samples, 0.03%)</title><rect x="1071.7" y="163.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1074.7" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (5 samples, 0.03%)</title><rect x="1071.7" y="147.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1074.7" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexwait (5 samples, 0.03%)</title><rect x="1071.7" y="131.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1074.7" y="142.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (5 samples, 0.03%)</title><rect x="1072.1" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1075.1" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (5 samples, 0.03%)</title><rect x="1072.1" y="147.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1075.1" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (5 samples, 0.03%)</title><rect x="1072.1" y="131.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1075.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (20 samples, 0.11%)</title><rect x="1072.4" y="179.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1075.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (18 samples, 0.10%)</title><rect x="1072.5" y="163.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1075.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (315 samples, 1.72%)</title><rect x="1073.7" y="179.0" width="20.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1076.7" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (6 samples, 0.03%)</title><rect x="1074.0" y="163.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1077.0" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.02%)</title><rect x="1074.3" y="163.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1077.3" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (275 samples, 1.50%)</title><rect x="1074.6" y="163.0" width="17.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1077.6" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (258 samples, 1.41%)</title><rect x="1074.6" y="147.0" width="16.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1077.6" y="158.0"></text>
</g>
<g>
<title>pthread_cond_signal (16 samples, 0.09%)</title><rect x="1091.2" y="147.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1094.2" y="158.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (8 samples, 0.04%)</title><rect x="1091.7" y="131.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1094.7" y="142.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (22 samples, 0.12%)</title><rect x="1092.6" y="163.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.6" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (21 samples, 0.11%)</title><rect x="1092.6" y="147.0" width="1.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1095.6" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (21 samples, 0.11%)</title><rect x="1092.6" y="131.0" width="1.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1095.6" y="142.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (10 samples, 0.05%)</title><rect x="1094.4" y="179.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.4" y="190.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (11 samples, 0.06%)</title><rect x="1095.2" y="179.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1098.2" y="190.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (6 samples, 0.03%)</title><rect x="1095.9" y="179.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1098.9" y="190.0"></text>
</g>
<g>
<title>std::__1::mutex::~mutex() (7 samples, 0.04%)</title><rect x="1096.3" y="179.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1099.3" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_destroy (7 samples, 0.04%)</title><rect x="1096.3" y="163.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1099.3" y="174.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (18 samples, 0.10%)</title><rect x="1096.7" y="179.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1099.7" y="190.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (7 samples, 0.04%)</title><rect x="1097.9" y="179.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (13 samples, 0.07%)</title><rect x="1098.7" y="195.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (4 samples, 0.02%)</title><rect x="1099.7" y="195.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1102.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (4 samples, 0.02%)</title><rect x="1100.2" y="195.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.2" y="206.0"></text>
</g>
<g>
<title>std::__1::mutex::~mutex() (5 samples, 0.03%)</title><rect x="1100.7" y="195.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.7" y="206.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (7 samples, 0.04%)</title><rect x="1101.0" y="195.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (13 samples, 0.07%)</title><rect x="1101.6" y="211.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (73 samples, 0.40%)</title><rect x="1102.5" y="211.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (7 samples, 0.04%)</title><rect x="1102.8" y="195.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (14 samples, 0.08%)</title><rect x="1103.2" y="195.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1106.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (35 samples, 0.19%)</title><rect x="1104.3" y="195.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.3" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (22 samples, 0.12%)</title><rect x="1104.8" y="179.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.8" y="190.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (9 samples, 0.05%)</title><rect x="1105.7" y="163.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1108.7" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::push_back(char) (4 samples, 0.02%)</title><rect x="1106.3" y="179.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1109.3" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (4 samples, 0.02%)</title><rect x="1106.5" y="195.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.5" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::push_back(char) (6 samples, 0.03%)</title><rect x="1106.8" y="195.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1109.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (111 samples, 0.61%)</title><rect x="1107.2" y="211.0" width="7.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.2" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (14 samples, 0.08%)</title><rect x="1107.5" y="195.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1110.5" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (64 samples, 0.35%)</title><rect x="1108.5" y="195.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.5" y="206.0"></text>
</g>
<g>
<title>operator new(unsigned long) (55 samples, 0.30%)</title><rect x="1109.1" y="179.0" width="3.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1112.1" y="190.0"></text>
</g>
<g>
<title>malloc (54 samples, 0.29%)</title><rect x="1109.2" y="163.0" width="3.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1112.2" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (54 samples, 0.29%)</title><rect x="1109.2" y="147.0" width="3.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1112.2" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (50 samples, 0.27%)</title><rect x="1109.4" y="131.0" width="3.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1112.4" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (50 samples, 0.27%)</title><rect x="1109.4" y="115.0" width="3.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1112.4" y="126.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (6 samples, 0.03%)</title><rect x="1110.6" y="99.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1113.6" y="110.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (24 samples, 0.13%)</title><rect x="1111.0" y="99.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1114.0" y="110.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (8 samples, 0.04%)</title><rect x="1112.1" y="83.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1115.1" y="94.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (21 samples, 0.11%)</title><rect x="1112.6" y="195.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.6" y="206.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (6 samples, 0.03%)</title><rect x="1112.8" y="179.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1115.8" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (13 samples, 0.07%)</title><rect x="1113.1" y="179.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.1" y="190.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (7 samples, 0.04%)</title><rect x="1113.5" y="163.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1116.5" y="174.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (5 samples, 0.03%)</title><rect x="1114.0" y="195.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (59 samples, 0.32%)</title><rect x="1114.3" y="211.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.3" y="222.0"></text>
</g>
<g>
<title>free (21 samples, 0.11%)</title><rect x="1114.6" y="195.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1117.6" y="206.0"></text>
</g>
<g>
<title>szone_size (14 samples, 0.08%)</title><rect x="1115.0" y="179.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1118.0" y="190.0"></text>
</g>
<g>
<title>tiny_size (14 samples, 0.08%)</title><rect x="1115.0" y="163.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1118.0" y="174.0"></text>
</g>
<g>
<title>free_tiny (28 samples, 0.15%)</title><rect x="1115.9" y="195.0" width="1.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1118.9" y="206.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (4 samples, 0.02%)</title><rect x="1116.6" y="179.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1119.6" y="190.0"></text>
</g>
<g>
<title>tiny_free_no_lock (14 samples, 0.08%)</title><rect x="1116.8" y="179.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1119.8" y="190.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (8 samples, 0.04%)</title><rect x="1117.2" y="163.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1120.2" y="174.0"></text>
</g>
<g>
<title>szone_size (6 samples, 0.03%)</title><rect x="1117.7" y="195.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1120.7" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (14 samples, 0.08%)</title><rect x="1118.2" y="211.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.04%)</title><rect x="1119.5" y="227.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1122.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (13 samples, 0.07%)</title><rect x="1120.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (4 samples, 0.02%)</title><rect x="1120.8" y="227.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (14 samples, 0.08%)</title><rect x="1121.1" y="259.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.1" y="270.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (6 samples, 0.03%)</title><rect x="1122.2" y="259.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igor_manikhin/ByteConvertor.toArray (5 samples, 0.03%)</title><rect x="1122.5" y="323.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1125.5" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.02%)</title><rect x="1122.6" y="307.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1125.6" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.02%)</title><rect x="1122.6" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1125.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igor_manikhin/ByteConvertor.toUnsignedArray (5 samples, 0.03%)</title><rect x="1122.9" y="323.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1125.9" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.03%)</title><rect x="1122.9" y="307.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1125.9" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="1122.9" y="291.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1125.9" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.02%)</title><rect x="1122.9" y="275.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1125.9" y="286.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (5 samples, 0.03%)</title><rect x="1123.2" y="387.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1126.2" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.03%)</title><rect x="1123.2" y="371.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1126.2" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (36 samples, 0.20%)</title><rect x="1123.5" y="387.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1126.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (36 samples, 0.20%)</title><rect x="1123.5" y="371.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1126.5" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (35 samples, 0.19%)</title><rect x="1123.6" y="355.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1126.6" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (35 samples, 0.19%)</title><rect x="1123.6" y="339.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1126.6" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.04%)</title><rect x="1125.3" y="323.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1128.3" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (57 samples, 0.31%)</title><rect x="1125.8" y="419.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1128.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (15 samples, 0.08%)</title><rect x="1126.0" y="403.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1129.0" y="414.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (11 samples, 0.06%)</title><rect x="1126.2" y="387.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1129.2" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (39 samples, 0.21%)</title><rect x="1126.9" y="403.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1129.9" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (39 samples, 0.21%)</title><rect x="1126.9" y="387.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1129.9" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.03%)</title><rect x="1129.0" y="371.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1132.0" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.03%)</title><rect x="1129.0" y="355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1132.0" y="366.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (5 samples, 0.03%)</title><rect x="1129.0" y="339.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1132.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (20 samples, 0.11%)</title><rect x="1129.5" y="419.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1132.5" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (12 samples, 0.07%)</title><rect x="1130.8" y="419.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1133.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.04%)</title><rect x="1131.6" y="419.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1134.6" y="430.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.03%)</title><rect x="1131.6" y="403.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1134.6" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.02%)</title><rect x="1131.7" y="387.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1134.7" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (46 samples, 0.25%)</title><rect x="1132.0" y="419.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1135.0" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (46 samples, 0.25%)</title><rect x="1132.0" y="403.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1135.0" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 0.06%)</title><rect x="1134.1" y="387.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1137.1" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 0.06%)</title><rect x="1134.1" y="371.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1137.1" y="382.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (11 samples, 0.06%)</title><rect x="1134.1" y="355.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1137.1" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (767 samples, 4.18%)</title><rect x="1135.0" y="435.0" width="49.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1138.0" y="446.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (767 samples, 4.18%)</title><rect x="1135.0" y="419.0" width="49.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1138.0" y="430.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (24 samples, 0.13%)</title><rect x="1135.2" y="403.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1138.2" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (24 samples, 0.13%)</title><rect x="1135.2" y="387.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1138.2" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (24 samples, 0.13%)</title><rect x="1135.2" y="371.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1138.2" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (15 samples, 0.08%)</title><rect x="1135.7" y="355.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1138.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.03%)</title><rect x="1135.8" y="339.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1138.8" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.03%)</title><rect x="1135.8" y="323.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1138.8" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (9 samples, 0.05%)</title><rect x="1136.1" y="339.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1139.1" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (9 samples, 0.05%)</title><rect x="1136.1" y="323.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1139.1" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (9 samples, 0.05%)</title><rect x="1136.1" y="307.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1139.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (740 samples, 4.04%)</title><rect x="1136.7" y="403.0" width="47.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1139.7" y="414.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (34 samples, 0.19%)</title><rect x="1136.8" y="387.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1139.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (20 samples, 0.11%)</title><rect x="1136.9" y="371.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1139.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (19 samples, 0.10%)</title><rect x="1137.0" y="355.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1140.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (19 samples, 0.10%)</title><rect x="1137.0" y="339.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1140.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.02%)</title><rect x="1137.1" y="323.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1140.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (13 samples, 0.07%)</title><rect x="1137.3" y="323.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1140.3" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (13 samples, 0.07%)</title><rect x="1137.3" y="307.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1140.3" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (13 samples, 0.07%)</title><rect x="1137.3" y="291.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1140.3" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (10 samples, 0.05%)</title><rect x="1138.3" y="371.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1141.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (698 samples, 3.81%)</title><rect x="1139.0" y="387.0" width="44.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1142.0" y="398.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (696 samples, 3.80%)</title><rect x="1139.2" y="371.0" width="44.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1142.2" y="382.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (686 samples, 3.74%)</title><rect x="1139.5" y="355.0" width="44.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1142.5" y="366.0">sun/..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.03%)</title><rect x="1139.5" y="339.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1142.5" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (5 samples, 0.03%)</title><rect x="1139.5" y="323.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1142.5" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.03%)</title><rect x="1139.5" y="307.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1142.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (681 samples, 3.71%)</title><rect x="1139.9" y="339.0" width="43.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1142.9" y="350.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (681 samples, 3.71%)</title><rect x="1139.9" y="323.0" width="43.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1142.9" y="334.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (13 samples, 0.07%)</title><rect x="1142.8" y="307.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1145.8" y="318.0"></text>
</g>
<g>
<title>fdval (10 samples, 0.05%)</title><rect x="1142.9" y="291.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1145.9" y="302.0"></text>
</g>
<g>
<title>rpc_errlist (621 samples, 3.39%)</title><rect x="1143.7" y="307.0" width="40.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1146.7" y="318.0">rpc..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.02%)</title><rect x="1183.7" y="355.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1186.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (6 samples, 0.03%)</title><rect x="1183.9" y="387.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1186.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureOpenAndConnected (6 samples, 0.03%)</title><rect x="1183.9" y="371.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1186.9" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.03%)</title><rect x="1184.3" y="451.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.3" y="462.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.02%)</title><rect x="1184.5" y="435.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1187.5" y="446.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (4 samples, 0.02%)</title><rect x="1184.5" y="419.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1187.5" y="430.0"></text>
</g>
<g>
<title>thread_start (82 samples, 0.45%)</title><rect x="1184.7" y="483.0" width="5.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1187.7" y="494.0"></text>
</g>
<g>
<title>_pthread_start (82 samples, 0.45%)</title><rect x="1184.7" y="467.0" width="5.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1187.7" y="478.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (64 samples, 0.35%)</title><rect x="1184.7" y="451.0" width="4.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1187.7" y="462.0"></text>
</g>
<g>
<title>Thread::call_run() (64 samples, 0.35%)</title><rect x="1184.7" y="435.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.7" y="446.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (7 samples, 0.04%)</title><rect x="1184.7" y="419.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.7" y="430.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (7 samples, 0.04%)</title><rect x="1184.7" y="403.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.7" y="414.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (4 samples, 0.02%)</title><rect x="1184.7" y="387.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.7" y="398.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (4 samples, 0.02%)</title><rect x="1184.7" y="371.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.7" y="382.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (4 samples, 0.02%)</title><rect x="1184.7" y="355.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.7" y="366.0"></text>
</g>
<g>
<title>JavaThread::run() (52 samples, 0.28%)</title><rect x="1185.2" y="419.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="430.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (52 samples, 0.28%)</title><rect x="1185.2" y="403.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.2" y="414.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (51 samples, 0.28%)</title><rect x="1185.2" y="387.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.2" y="398.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (51 samples, 0.28%)</title><rect x="1185.2" y="371.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.2" y="382.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (50 samples, 0.27%)</title><rect x="1185.2" y="355.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.2" y="366.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (50 samples, 0.27%)</title><rect x="1185.2" y="339.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.2" y="350.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (30 samples, 0.16%)</title><rect x="1185.2" y="323.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.2" y="334.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.02%)</title><rect x="1185.6" y="307.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.6" y="318.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.02%)</title><rect x="1185.6" y="291.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.6" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (21 samples, 0.11%)</title><rect x="1185.8" y="307.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.8" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.03%)</title><rect x="1186.1" y="291.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.1" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.02%)</title><rect x="1186.5" y="291.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.5" y="302.0"></text>
</g>
<g>
<title>Compile::Optimize() (14 samples, 0.08%)</title><rect x="1187.2" y="323.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.2" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (11 samples, 0.06%)</title><rect x="1187.4" y="307.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.4" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.02%)</title><rect x="1187.5" y="291.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.5" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 0.02%)</title><rect x="1187.5" y="275.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.5" y="286.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 0.02%)</title><rect x="1187.5" y="259.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.5" y="270.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (4 samples, 0.02%)</title><rect x="1187.5" y="243.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.5" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.03%)</title><rect x="1188.1" y="323.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.1" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.03%)</title><rect x="1188.1" y="307.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.03%)</title><rect x="1188.1" y="291.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.03%)</title><rect x="1188.1" y="275.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.03%)</title><rect x="1188.1" y="259.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.1" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.02%)</title><rect x="1188.1" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.1" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.02%)</title><rect x="1188.1" y="227.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.02%)</title><rect x="1188.1" y="211.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.1" y="222.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, void (*)(void*), rocksdb::BGThreadMetadata*&gt; &gt;(void*) (18 samples, 0.10%)</title><rect x="1188.8" y="451.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.8" y="462.0"></text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThreadWrapper(void*) (18 samples, 0.10%)</title><rect x="1188.8" y="435.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThread(unsigned long) (18 samples, 0.10%)</title><rect x="1188.8" y="419.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.8" y="430.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundCallFlush(rocksdb::Env::Priority) (18 samples, 0.10%)</title><rect x="1188.8" y="403.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundFlush(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::FlushReason*, rocksdb::Env::Priority) (17 samples, 0.09%)</title><rect x="1188.9" y="387.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.9" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTablesToOutputFiles(rocksdb::autovector&lt;rocksdb::DBImpl::BGFlushArg, 8ul&gt; const&amp;, bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (17 samples, 0.09%)</title><rect x="1188.9" y="371.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTableToOutputFile(rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&amp;, bool*, rocksdb::JobContext*, rocksdb::SuperVersionContext*, std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt; &gt;&amp;, unsigned long long, rocksdb::SnapshotChecker*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (17 samples, 0.09%)</title><rect x="1188.9" y="355.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::Run(rocksdb::LogsWithPrepTracker*, rocksdb::FileMetaData*) (17 samples, 0.09%)</title><rect x="1188.9" y="339.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::WriteLevel0Table() (17 samples, 0.09%)</title><rect x="1188.9" y="323.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::BuildTable(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, rocksdb::FileSystem*, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, rocksdb::FileOptions const&amp;, rocksdb::TableCache*, rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt; &gt; &gt;, rocksdb::FileMetaData*, rocksdb::InternalKeyComparator const&amp;, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::IntTblPropCollectorFactory, std::__1::default_delete&lt;rocks (17 samples, 0.09%)</title><rect x="1188.9" y="307.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Add(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.04%)</title><rect x="1188.9" y="291.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Flush() (5 samples, 0.03%)</title><rect x="1188.9" y="275.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::Slice const&amp;, rocksdb::BlockHandle*, bool) (5 samples, 0.03%)</title><rect x="1188.9" y="259.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::CompressAndVerifyBlock(rocksdb::Slice const&amp;, bool, rocksdb::CompressionContext&amp;, rocksdb::UncompressionContext*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Slice*, rocksdb::CompressionType*, rocksdb::Status*) (5 samples, 0.03%)</title><rect x="1188.9" y="243.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (5 samples, 0.03%)</title><rect x="1188.9" y="227.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (5 samples, 0.03%)</title><rect x="1188.9" y="211.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="222.0"></text>
</g>
<g>
<title>snappy::RawCompress(char const*, unsigned long, char*, unsigned long*) (4 samples, 0.02%)</title><rect x="1189.0" y="195.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.0" y="206.0"></text>
</g>
<g>
<title>snappy::Compress(snappy::Source*, snappy::Sink*) (4 samples, 0.02%)</title><rect x="1189.0" y="179.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::Next() (10 samples, 0.05%)</title><rect x="1189.4" y="291.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::NextFromInput() (9 samples, 0.05%)</title><rect x="1189.4" y="275.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (5 samples, 0.03%)</title><rect x="1189.5" y="259.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.5" y="270.0"></text>
</g>
</g>
</svg>
