<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="549"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="549"> </text>
<g id="frames">
<g>
<title>all (3,207 samples, 100.00%)</title><rect x="10.0" y="515.0" width="1180.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="526.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (10 samples, 0.31%)</title><rect x="10.0" y="499.0" width="3.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="10.0" y="483.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.03%)</title><rect x="10.4" y="483.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.4" y="494.0"></text>
</g>
<g>
<title>Method::from_compiled_entry_no_trampoline() const (2 samples, 0.06%)</title><rect x="10.7" y="483.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.7" y="494.0"></text>
</g>
<g>
<title>Method::get_c2i_entry() (3 samples, 0.09%)</title><rect x="11.5" y="483.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.5" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (1 samples, 0.03%)</title><rect x="12.6" y="483.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="15.6" y="494.0"></text>
</g>
<g>
<title>nmethod::verified_entry_point() const (2 samples, 0.06%)</title><rect x="12.9" y="483.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="15.9" y="494.0"></text>
</g>
<g>
<title>[unknown_Java] (44 samples, 1.37%)</title><rect x="13.7" y="499.0" width="16.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="16.7" y="510.0"></text>
</g>
<g>
<title>I2C/C2I adapters (3 samples, 0.09%)</title><rect x="13.7" y="483.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.7" y="494.0"></text>
</g>
<g>
<title>Interpreter (11 samples, 0.34%)</title><rect x="14.8" y="483.0" width="4.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="17.8" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (30 samples, 0.94%)</title><rect x="18.8" y="483.0" width="11.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="21.8" y="494.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (12 samples, 0.37%)</title><rect x="19.2" y="467.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="22.2" y="478.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (6 samples, 0.19%)</title><rect x="19.6" y="451.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="22.6" y="462.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.06%)</title><rect x="21.8" y="451.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="24.8" y="462.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="22.1" y="435.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="25.1" y="446.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (3 samples, 0.09%)</title><rect x="22.5" y="451.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="25.5" y="462.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.12%)</title><rect x="23.6" y="467.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="26.6" y="478.0"></text>
</g>
<g>
<title>Method::from_compiled_entry_no_trampoline() const (4 samples, 0.12%)</title><rect x="25.1" y="467.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="28.1" y="478.0"></text>
</g>
<g>
<title>Method::get_c2i_entry() (9 samples, 0.28%)</title><rect x="26.6" y="467.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="29.6" y="478.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,042 samples, 94.86%)</title><rect x="29.9" y="499.0" width="1119.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.9" y="510.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (8 samples, 0.25%)</title><rect x="31.7" y="483.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.7" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (6 samples, 0.19%)</title><rect x="34.7" y="483.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="37.7" y="494.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (6 samples, 0.19%)</title><rect x="34.7" y="467.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="37.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (6 samples, 0.19%)</title><rect x="34.7" y="451.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="37.7" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (649 samples, 20.24%)</title><rect x="36.9" y="483.0" width="238.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="39.9" y="494.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.06%)</title><rect x="36.9" y="467.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.9" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.03%)</title><rect x="37.2" y="451.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.2" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="37.2" y="435.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.2" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="37.2" y="419.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.2" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (35 samples, 1.09%)</title><rect x="37.6" y="467.0" width="12.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (31 samples, 0.97%)</title><rect x="39.1" y="451.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (31 samples, 0.97%)</title><rect x="39.1" y="435.0" width="11.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.1" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (27 samples, 0.84%)</title><rect x="39.1" y="419.0" width="9.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="42.1" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (27 samples, 0.84%)</title><rect x="39.1" y="403.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="42.1" y="414.0"></text>
</g>
<g>
<title>__block_literal_global (6 samples, 0.19%)</title><rect x="39.8" y="387.0" width="2.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="42.8" y="398.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (3 samples, 0.09%)</title><rect x="42.0" y="387.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="45.0" y="398.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (16 samples, 0.50%)</title><rect x="43.1" y="387.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="46.1" y="398.0"></text>
</g>
<g>
<title>__block_literal_global (2 samples, 0.06%)</title><rect x="46.8" y="371.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="49.8" y="382.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (4 samples, 0.12%)</title><rect x="47.5" y="371.0" width="1.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="50.5" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (4 samples, 0.12%)</title><rect x="49.0" y="419.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.0" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (2 samples, 0.06%)</title><rect x="49.7" y="403.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="52.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (611 samples, 19.05%)</title><rect x="50.5" y="467.0" width="224.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="53.5" y="478.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (611 samples, 19.05%)</title><rect x="50.5" y="451.0" width="224.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.5" y="462.0">sun/nio/ch/SelectorImpl.lockAn..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (607 samples, 18.93%)</title><rect x="51.9" y="435.0" width="223.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="54.9" y="446.0">sun/nio/ch/KQueueSelectorImpl..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (554 samples, 17.27%)</title><rect x="53.8" y="419.0" width="203.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="56.8" y="430.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (16 samples, 0.50%)</title><rect x="88.4" y="403.0" width="5.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="91.4" y="414.0"></text>
</g>
<g>
<title>kevent (444 samples, 13.84%)</title><rect x="94.3" y="403.0" width="163.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="97.3" y="414.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (22 samples, 0.69%)</title><rect x="257.6" y="419.0" width="8.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="260.6" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.25%)</title><rect x="257.6" y="403.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.6" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.09%)</title><rect x="257.6" y="387.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="260.6" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.16%)</title><rect x="258.7" y="387.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (14 samples, 0.44%)</title><rect x="260.6" y="403.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.6" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.add (12 samples, 0.37%)</title><rect x="260.6" y="387.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="263.6" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.put (12 samples, 0.37%)</title><rect x="260.6" y="371.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="263.6" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (12 samples, 0.37%)</title><rect x="260.6" y="355.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="263.6" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.03%)</title><rect x="261.7" y="339.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="264.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.22%)</title><rect x="262.0" y="339.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.0" y="350.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="264.6" y="339.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="267.6" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (1 samples, 0.03%)</title><rect x="265.0" y="387.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="268.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (1 samples, 0.03%)</title><rect x="265.4" y="387.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="268.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (4 samples, 0.12%)</title><rect x="265.7" y="419.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.7" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.03%)</title><rect x="266.8" y="403.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.03%)</title><rect x="267.2" y="419.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="270.2" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.03%)</title><rect x="267.2" y="403.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="270.2" y="414.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="267.2" y="387.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="270.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.03%)</title><rect x="267.6" y="419.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.6" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.03%)</title><rect x="267.6" y="403.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.6" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="267.6" y="387.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="270.6" y="398.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="267.6" y="371.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.6" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="267.6" y="355.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="270.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (20 samples, 0.62%)</title><rect x="267.9" y="419.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.9" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.03%)</title><rect x="271.6" y="403.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="274.6" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.03%)</title><rect x="271.6" y="387.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.6" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (9 samples, 0.28%)</title><rect x="272.0" y="403.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="275.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.06%)</title><rect x="272.3" y="387.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.3" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.06%)</title><rect x="272.3" y="371.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="275.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.06%)</title><rect x="272.3" y="355.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.06%)</title><rect x="272.3" y="339.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (6 samples, 0.19%)</title><rect x="273.1" y="387.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.1" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.&lt;init&gt; (1 samples, 0.03%)</title><rect x="274.9" y="371.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.9" y="382.0"></text>
</g>
<g>
<title>java/util/AbstractSet.&lt;init&gt; (1 samples, 0.03%)</title><rect x="274.9" y="355.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.9" y="366.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (1 samples, 0.03%)</title><rect x="274.9" y="339.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.9" y="350.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="274.9" y="323.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="277.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectedKeys (1 samples, 0.03%)</title><rect x="275.3" y="467.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (1 samples, 0.03%)</title><rect x="275.3" y="451.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.3" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,374 samples, 74.03%)</title><rect x="275.7" y="483.0" width="873.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="278.7" y="494.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,368 samples, 73.84%)</title><rect x="277.1" y="467.0" width="871.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.1" y="478.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>I2C/C2I adapters (7 samples, 0.22%)</title><rect x="279.3" y="451.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.3" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,175 samples, 67.82%)</title><rect x="281.9" y="451.0" width="800.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.9" y="462.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>I2C/C2I adapters (19 samples, 0.59%)</title><rect x="372.1" y="435.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="375.1" y="446.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (32 samples, 1.00%)</title><rect x="379.0" y="435.0" width="11.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="382.0" y="446.0"></text>
</g>
<g>
<title>BiasedLocking::revoke(GrowableArray&lt;Handle&gt;*) (1 samples, 0.03%)</title><rect x="379.0" y="419.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="382.0" y="430.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (30 samples, 0.94%)</title><rect x="379.4" y="419.0" width="11.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="382.4" y="430.0"></text>
</g>
<g>
<title>Arena::Amalloc(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="379.8" y="403.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="382.8" y="414.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (4 samples, 0.12%)</title><rect x="380.2" y="403.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="383.2" y="414.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.09%)</title><rect x="380.2" y="387.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="383.2" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.06%)</title><rect x="380.2" y="371.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="383.2" y="382.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="380.9" y="371.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="383.9" y="382.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="380.9" y="355.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="383.9" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="381.3" y="387.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="384.3" y="398.0"></text>
</g>
<g>
<title>Method::bcp_from(unsigned char*) const (1 samples, 0.03%)</title><rect x="381.6" y="403.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="384.6" y="414.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (20 samples, 0.62%)</title><rect x="382.0" y="403.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="385.0" y="414.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="382.4" y="387.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="385.4" y="398.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::method_back_branch_event(methodHandle const&amp;, methodHandle const&amp;, int, CompLevel, CompiledMethod*, JavaThread*) (18 samples, 0.56%)</title><rect x="382.7" y="387.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="385.7" y="398.0"></text>
</g>
<g>
<title>CompilationPolicy::is_compilation_enabled() (1 samples, 0.03%)</title><rect x="383.5" y="371.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="386.5" y="382.0"></text>
</g>
<g>
<title>Method::backedge_count() (1 samples, 0.03%)</title><rect x="383.8" y="371.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="386.8" y="382.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="384.2" y="371.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="387.2" y="382.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (2 samples, 0.06%)</title><rect x="384.6" y="371.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="387.6" y="382.0"></text>
</g>
<g>
<title>CompilationPolicy::can_be_compiled(methodHandle const&amp;, int) (1 samples, 0.03%)</title><rect x="384.6" y="355.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="387.6" y="366.0"></text>
</g>
<g>
<title>Method::is_not_compilable(int) const (1 samples, 0.03%)</title><rect x="384.6" y="339.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="387.6" y="350.0"></text>
</g>
<g>
<title>Method::is_not_compilable(int) const (1 samples, 0.03%)</title><rect x="384.9" y="355.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="387.9" y="366.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::loop_event(Method*, CompLevel, JavaThread*) (1 samples, 0.03%)</title><rect x="385.3" y="371.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="388.3" y="382.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (5 samples, 0.16%)</title><rect x="385.7" y="371.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="388.7" y="382.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (3 samples, 0.09%)</title><rect x="385.7" y="355.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="388.7" y="366.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, DirectiveSet*, Thread*) (2 samples, 0.06%)</title><rect x="385.7" y="339.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="388.7" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::lookup_osr_nmethod(Method const*, int, int, bool) const (2 samples, 0.06%)</title><rect x="385.7" y="323.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="388.7" y="334.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="386.0" y="307.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="389.0" y="318.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="386.0" y="291.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="389.0" y="302.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="386.0" y="275.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="389.0" y="286.0"></text>
</g>
<g>
<title>DirectivesStack::release(DirectiveSet*) (1 samples, 0.03%)</title><rect x="386.4" y="339.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="389.4" y="350.0"></text>
</g>
<g>
<title>DirectivesStack::release(CompilerDirectives*) (1 samples, 0.03%)</title><rect x="386.4" y="323.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="389.4" y="334.0"></text>
</g>
<g>
<title>DirectiveSet::compilecommand_compatibility_init(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="386.8" y="355.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="389.8" y="366.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="387.1" y="355.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="390.1" y="366.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="387.1" y="339.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="390.1" y="350.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="387.5" y="371.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="390.5" y="382.0"></text>
</g>
<g>
<title>bool CompilerOracle::has_option_value&lt;double&gt;(methodHandle const&amp;, char const*, double&amp;) (1 samples, 0.03%)</title><rect x="387.9" y="371.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="390.9" y="382.0"></text>
</g>
<g>
<title>bool SimpleThresholdPolicy::call_predicate_helper&lt;(CompLevel)0&gt;(int, int, double, Method*) (3 samples, 0.09%)</title><rect x="388.2" y="371.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="391.2" y="382.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.03%)</title><rect x="388.2" y="355.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="391.2" y="366.0"></text>
</g>
<g>
<title>bool CompilerOracle::has_option_value&lt;double&gt;(methodHandle const&amp;, char const*, double&amp;) (2 samples, 0.06%)</title><rect x="388.6" y="355.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="391.6" y="366.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (2 samples, 0.06%)</title><rect x="389.4" y="403.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="392.4" y="414.0"></text>
</g>
<g>
<title>frame::interpreter_frame_monitor_end() const (1 samples, 0.03%)</title><rect x="390.1" y="403.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="393.1" y="414.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="390.5" y="419.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="393.5" y="430.0"></text>
</g>
<g>
<title>SharedRuntime::OSR_migration_begin(JavaThread*) (5 samples, 0.16%)</title><rect x="390.8" y="435.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="393.8" y="446.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (4 samples, 0.12%)</title><rect x="390.8" y="419.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="393.8" y="430.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (4 samples, 0.12%)</title><rect x="390.8" y="403.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="393.8" y="414.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (4 samples, 0.12%)</title><rect x="390.8" y="387.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="393.8" y="398.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.09%)</title><rect x="391.2" y="371.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="394.2" y="382.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.09%)</title><rect x="391.2" y="355.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="394.2" y="366.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="391.2" y="339.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="394.2" y="350.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.06%)</title><rect x="391.6" y="339.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="394.6" y="350.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.06%)</title><rect x="391.6" y="323.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="394.6" y="334.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.06%)</title><rect x="391.6" y="307.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="394.6" y="318.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="392.3" y="419.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="395.3" y="430.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.03%)</title><rect x="392.3" y="403.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="395.3" y="414.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.06%)</title><rect x="392.7" y="435.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="395.7" y="446.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.06%)</title><rect x="392.7" y="419.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="395.7" y="430.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="393.0" y="403.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="396.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,816 samples, 56.63%)</title><rect x="393.4" y="435.0" width="668.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="396.4" y="446.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,815 samples, 56.59%)</title><rect x="393.8" y="419.0" width="667.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="396.8" y="430.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,787 samples, 55.72%)</title><rect x="393.8" y="403.0" width="657.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="396.8" y="414.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (551 samples, 17.18%)</title><rect x="393.8" y="387.0" width="202.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="396.8" y="398.0">one/nio/http/HttpSession.s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (540 samples, 16.84%)</title><rect x="394.1" y="371.0" width="198.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="397.1" y="382.0">one/nio/http/HttpSession.w..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (18 samples, 0.56%)</title><rect x="394.1" y="355.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="397.1" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (12 samples, 0.37%)</title><rect x="396.3" y="339.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="399.3" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.12%)</title><rect x="396.7" y="323.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="399.7" y="334.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.06%)</title><rect x="397.4" y="307.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="400.4" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.06%)</title><rect x="397.4" y="291.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="400.4" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.22%)</title><rect x="398.2" y="323.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="401.2" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.22%)</title><rect x="398.2" y="307.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="401.2" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.22%)</title><rect x="398.2" y="291.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="401.2" y="302.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.06%)</title><rect x="400.0" y="275.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="403.0" y="286.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.06%)</title><rect x="400.0" y="259.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="403.0" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (522 samples, 16.28%)</title><rect x="400.8" y="355.0" width="192.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="403.8" y="366.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (522 samples, 16.28%)</title><rect x="400.8" y="339.0" width="192.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="403.8" y="350.0">one/nio/net/Session.write</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="401.5" y="323.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="404.5" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (506 samples, 15.78%)</title><rect x="402.2" y="323.0" width="186.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="405.2" y="334.0">one/nio/net/Session$Arra..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (505 samples, 15.75%)</title><rect x="402.6" y="307.0" width="185.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="405.6" y="318.0">one/nio/net/JavaSocket.w..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="402.6" y="291.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="405.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (504 samples, 15.72%)</title><rect x="403.0" y="291.0" width="185.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="406.0" y="302.0">sun/nio/ch/SocketChannel..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.16%)</title><rect x="403.0" y="275.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="406.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.16%)</title><rect x="403.0" y="259.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="406.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.16%)</title><rect x="403.0" y="243.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="406.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.16%)</title><rect x="403.0" y="227.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="406.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.09%)</title><rect x="403.0" y="211.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.0" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.09%)</title><rect x="403.0" y="195.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="406.0" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.09%)</title><rect x="403.0" y="179.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (2 samples, 0.06%)</title><rect x="404.1" y="211.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="407.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="404.8" y="275.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="407.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="404.8" y="259.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="407.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.03%)</title><rect x="404.8" y="243.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="407.8" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (498 samples, 15.53%)</title><rect x="405.2" y="275.0" width="183.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="408.2" y="286.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (496 samples, 15.47%)</title><rect x="405.9" y="259.0" width="182.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="408.9" y="270.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.09%)</title><rect x="405.9" y="243.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="408.9" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="406.3" y="227.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="409.3" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.03%)</title><rect x="406.6" y="227.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="409.6" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="406.6" y="211.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.6" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.03%)</title><rect x="406.6" y="195.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="409.6" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.03%)</title><rect x="406.6" y="179.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="409.6" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.03%)</title><rect x="406.6" y="163.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="409.6" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (474 samples, 14.78%)</title><rect x="407.0" y="243.0" width="174.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="410.0" y="254.0">sun/nio/ch/IOUtil.writ..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (474 samples, 14.78%)</title><rect x="407.0" y="227.0" width="174.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="410.0" y="238.0">sun/nio/ch/SocketDispa..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (474 samples, 14.78%)</title><rect x="407.0" y="211.0" width="174.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="410.0" y="222.0">sun/nio/ch/FileDispatc..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.12%)</title><rect x="410.3" y="195.0" width="1.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="413.3" y="206.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.06%)</title><rect x="411.1" y="179.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="414.1" y="190.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="411.8" y="195.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="414.8" y="206.0"></text>
</g>
<g>
<title>write (460 samples, 14.34%)</title><rect x="412.2" y="195.0" width="169.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="415.2" y="206.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (19 samples, 0.59%)</title><rect x="581.4" y="243.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="584.4" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.12%)</title><rect x="582.2" y="227.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="585.2" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="583.3" y="211.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="586.3" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (13 samples, 0.41%)</title><rect x="583.6" y="227.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="586.6" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.09%)</title><rect x="584.7" y="211.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="587.7" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.09%)</title><rect x="584.7" y="195.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="587.7" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.09%)</title><rect x="584.7" y="179.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="587.7" y="190.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="585.5" y="163.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="588.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (7 samples, 0.22%)</title><rect x="585.8" y="211.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="588.8" y="222.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (12 samples, 0.37%)</title><rect x="588.4" y="323.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="591.4" y="334.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (2 samples, 0.06%)</title><rect x="589.5" y="307.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="592.5" y="318.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (2 samples, 0.06%)</title><rect x="590.2" y="307.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="593.2" y="318.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="591.0" y="307.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="594.0" y="318.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.12%)</title><rect x="591.4" y="307.0" width="1.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="594.4" y="318.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (4 samples, 0.12%)</title><rect x="591.4" y="291.0" width="1.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="594.4" y="302.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.06%)</title><rect x="592.1" y="275.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="595.1" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (10 samples, 0.31%)</title><rect x="592.8" y="371.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="595.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.25%)</title><rect x="593.6" y="355.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="596.6" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.25%)</title><rect x="593.6" y="339.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="596.6" y="350.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.06%)</title><rect x="595.0" y="323.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="598.0" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.06%)</title><rect x="595.0" y="307.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="598.0" y="318.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.03%)</title><rect x="595.0" y="291.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="598.0" y="302.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.03%)</title><rect x="595.4" y="291.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="598.4" y="302.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.06%)</title><rect x="595.8" y="323.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="598.8" y="334.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.06%)</title><rect x="595.8" y="307.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="598.8" y="318.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.06%)</title><rect x="595.8" y="291.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="598.8" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (31 samples, 0.97%)</title><rect x="596.5" y="387.0" width="11.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="599.5" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (31 samples, 0.97%)</title><rect x="596.5" y="371.0" width="11.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="599.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="596.5" y="355.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="599.5" y="366.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (24 samples, 0.75%)</title><rect x="596.9" y="355.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="599.9" y="366.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="602.4" y="339.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="605.4" y="350.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="602.8" y="339.0" width="0.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="605.8" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.16%)</title><rect x="603.5" y="339.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="606.5" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.03%)</title><rect x="605.3" y="339.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="608.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.16%)</title><rect x="605.7" y="355.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="608.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="606.8" y="339.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="609.8" y="350.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="606.8" y="323.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="609.8" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="607.2" y="339.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="610.2" y="350.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="607.5" y="355.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="610.5" y="366.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="607.5" y="339.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="610.5" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="607.5" y="323.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="610.5" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="607.5" y="307.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="610.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igor_manikhin/ServiceImpl.entity (1,205 samples, 37.57%)</title><rect x="607.9" y="387.0" width="443.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="610.9" y="398.0">ru/mail/polis/service/igor_manikhin/ServiceImpl.entity</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.03%)</title><rect x="607.9" y="371.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="610.9" y="382.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.03%)</title><rect x="607.9" y="355.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="610.9" y="366.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.03%)</title><rect x="607.9" y="339.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="610.9" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.03%)</title><rect x="607.9" y="323.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="610.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.31%)</title><rect x="608.3" y="371.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="611.3" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.31%)</title><rect x="608.3" y="355.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="611.3" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.28%)</title><rect x="608.6" y="339.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="611.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.28%)</title><rect x="608.6" y="323.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="611.6" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.25%)</title><rect x="609.0" y="307.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="612.0" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.09%)</title><rect x="610.9" y="291.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="613.9" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.09%)</title><rect x="610.9" y="275.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="613.9" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.09%)</title><rect x="610.9" y="259.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="613.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igor_manikhin/ServiceImpl.get (36 samples, 1.12%)</title><rect x="612.0" y="371.0" width="13.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="615.0" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.06%)</title><rect x="613.1" y="355.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="616.1" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="613.1" y="339.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="616.1" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="613.1" y="323.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="616.1" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (9 samples, 0.28%)</title><rect x="613.8" y="355.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="616.8" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (9 samples, 0.28%)</title><rect x="613.8" y="339.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="616.8" y="350.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="616.7" y="323.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="619.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igor_manikhin/ByteConvertor.toArray (21 samples, 0.65%)</title><rect x="617.1" y="355.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="620.1" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.06%)</title><rect x="617.1" y="339.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="620.1" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.06%)</title><rect x="617.1" y="323.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="620.1" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1 samples, 0.03%)</title><rect x="617.5" y="307.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="620.5" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (19 samples, 0.59%)</title><rect x="617.8" y="339.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="620.8" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.22%)</title><rect x="618.6" y="323.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="621.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.22%)</title><rect x="618.6" y="307.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="621.6" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.22%)</title><rect x="618.6" y="291.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="621.6" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (10 samples, 0.31%)</title><rect x="621.2" y="323.0" width="3.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="624.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igor_manikhin/DAOImpl.get (1 samples, 0.03%)</title><rect x="624.8" y="355.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="627.8" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igor_manikhin/ByteConvertor.toUnsignedArray (1 samples, 0.03%)</title><rect x="624.8" y="339.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="627.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igor_manikhin/ByteConvertor.toUnsignedByte (1 samples, 0.03%)</title><rect x="624.8" y="323.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="627.8" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igor_manikhin/ServiceImpl.put (1,158 samples, 36.11%)</title><rect x="625.2" y="371.0" width="426.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="628.2" y="382.0">ru/mail/polis/service/igor_manikhin/ServiceImpl.put</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.06%)</title><rect x="625.2" y="355.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="628.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.06%)</title><rect x="625.2" y="339.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="628.2" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="625.2" y="323.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="628.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="625.2" y="307.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="628.2" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="625.2" y="291.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="628.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="625.2" y="275.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="628.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="625.6" y="275.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="628.6" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="625.9" y="355.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="628.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igor_manikhin/DAOImpl.upsert (1,155 samples, 36.01%)</title><rect x="626.3" y="355.0" width="425.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="629.3" y="366.0">ru/mail/polis/dao/igor_manikhin/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,142 samples, 35.61%)</title><rect x="626.3" y="339.0" width="420.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="629.3" y="350.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,142 samples, 35.61%)</title><rect x="626.3" y="323.0" width="420.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="629.3" y="334.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,139 samples, 35.52%)</title><rect x="627.4" y="307.0" width="419.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="630.4" y="318.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (1 samples, 0.03%)</title><rect x="628.9" y="291.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="631.9" y="302.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.12%)</title><rect x="629.3" y="291.0" width="1.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="632.3" y="302.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.09%)</title><rect x="630.7" y="291.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="633.7" y="302.0"></text>
</g>
<g>
<title>operator delete[](void*) (2 samples, 0.06%)</title><rect x="631.8" y="291.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="634.8" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (8 samples, 0.25%)</title><rect x="632.6" y="291.0" width="2.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="635.6" y="302.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (7 samples, 0.22%)</title><rect x="635.5" y="291.0" width="2.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="638.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.09%)</title><rect x="638.1" y="291.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="641.1" y="302.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,107 samples, 34.52%)</title><rect x="639.2" y="291.0" width="407.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="642.2" y="302.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::Writ..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (3 samples, 0.09%)</title><rect x="639.6" y="275.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="642.6" y="286.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="640.7" y="275.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="643.7" y="286.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.09%)</title><rect x="641.0" y="275.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="644.0" y="286.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (7 samples, 0.22%)</title><rect x="642.1" y="275.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="645.1" y="286.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="644.7" y="275.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="647.7" y="286.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.06%)</title><rect x="645.1" y="275.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="648.1" y="286.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.06%)</title><rect x="645.8" y="275.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="648.8" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="646.5" y="275.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="649.5" y="286.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="646.9" y="275.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="649.9" y="286.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (3 samples, 0.09%)</title><rect x="647.3" y="275.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="650.3" y="286.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.12%)</title><rect x="648.4" y="275.0" width="1.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="651.4" y="286.0"></text>
</g>
<g>
<title>default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="649.9" y="275.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="652.9" y="286.0"></text>
</g>
<g>
<title>free (10 samples, 0.31%)</title><rect x="650.2" y="275.0" width="3.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="653.2" y="286.0"></text>
</g>
<g>
<title>szone_size (10 samples, 0.31%)</title><rect x="650.2" y="259.0" width="3.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="653.2" y="270.0"></text>
</g>
<g>
<title>tiny_size (10 samples, 0.31%)</title><rect x="650.2" y="243.0" width="3.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="653.2" y="254.0"></text>
</g>
<g>
<title>free_tiny (19 samples, 0.59%)</title><rect x="653.9" y="275.0" width="7.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="656.9" y="286.0"></text>
</g>
<g>
<title>tiny_free_no_lock (14 samples, 0.44%)</title><rect x="655.7" y="259.0" width="5.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="658.7" y="270.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (7 samples, 0.22%)</title><rect x="658.3" y="243.0" width="2.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="661.3" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (15 samples, 0.47%)</title><rect x="660.9" y="275.0" width="5.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="663.9" y="286.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (8 samples, 0.25%)</title><rect x="662.0" y="259.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="665.0" y="270.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="664.9" y="259.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="667.9" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.09%)</title><rect x="665.3" y="259.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="668.3" y="270.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="665.7" y="243.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="668.7" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.03%)</title><rect x="666.0" y="243.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="669.0" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (33 samples, 1.03%)</title><rect x="666.4" y="275.0" width="12.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="669.4" y="286.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.03%)</title><rect x="667.9" y="259.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="670.9" y="270.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="668.3" y="259.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="671.3" y="270.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="668.3" y="243.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="671.3" y="254.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="668.6" y="259.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="671.6" y="270.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.09%)</title><rect x="669.0" y="259.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="672.0" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (14 samples, 0.44%)</title><rect x="670.1" y="259.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="673.1" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (13 samples, 0.41%)</title><rect x="670.1" y="243.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="673.1" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (10 samples, 0.31%)</title><rect x="670.8" y="227.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="673.8" y="238.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (9 samples, 0.28%)</title><rect x="671.2" y="211.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="674.2" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (7 samples, 0.22%)</title><rect x="671.6" y="195.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="674.6" y="206.0"></text>
</g>
<g>
<title>OrderAccess::acquire() (1 samples, 0.03%)</title><rect x="671.9" y="179.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="674.9" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.03%)</title><rect x="672.3" y="179.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="675.3" y="190.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.03%)</title><rect x="672.7" y="179.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="675.7" y="190.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="673.0" y="179.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="676.0" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.06%)</title><rect x="673.4" y="179.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="676.4" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="673.4" y="163.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="676.4" y="174.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="673.8" y="163.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="676.8" y="174.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="673.8" y="147.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="676.8" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="674.1" y="195.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="677.1" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="674.5" y="227.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="677.5" y="238.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.03%)</title><rect x="674.9" y="243.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="677.9" y="254.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.09%)</title><rect x="675.2" y="259.0" width="1.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="678.2" y="270.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.19%)</title><rect x="676.3" y="259.0" width="2.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="679.3" y="270.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="676.7" y="243.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="679.7" y="254.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.12%)</title><rect x="677.1" y="243.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="680.1" y="254.0"></text>
</g>
<g>
<title>Chunk::next() const (3 samples, 0.09%)</title><rect x="677.5" y="227.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="680.5" y="238.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.12%)</title><rect x="678.6" y="275.0" width="1.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="681.6" y="286.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.03%)</title><rect x="680.0" y="275.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="683.0" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (25 samples, 0.78%)</title><rect x="680.4" y="275.0" width="9.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="683.4" y="286.0"></text>
</g>
<g>
<title>malloc (24 samples, 0.75%)</title><rect x="680.8" y="259.0" width="8.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="683.8" y="270.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.06%)</title><rect x="680.8" y="243.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="683.8" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (22 samples, 0.69%)</title><rect x="681.5" y="243.0" width="8.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="684.5" y="254.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="681.9" y="227.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="684.9" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (20 samples, 0.62%)</title><rect x="682.2" y="227.0" width="7.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="685.2" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (19 samples, 0.59%)</title><rect x="682.6" y="211.0" width="7.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="685.6" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (9 samples, 0.28%)</title><rect x="686.3" y="195.0" width="3.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="689.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (959 samples, 29.90%)</title><rect x="689.6" y="275.0" width="352.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="692.6" y="286.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options ..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (955 samples, 29.78%)</title><rect x="691.1" y="259.0" width="351.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="694.1" y="270.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (948 samples, 29.56%)</title><rect x="691.8" y="243.0" width="348.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="694.8" y="254.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, ..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="691.8" y="227.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="694.8" y="238.0"></text>
</g>
<g>
<title>free (6 samples, 0.19%)</title><rect x="692.2" y="227.0" width="2.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="695.2" y="238.0"></text>
</g>
<g>
<title>operator delete(void*) (3 samples, 0.09%)</title><rect x="694.4" y="227.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="697.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (4 samples, 0.12%)</title><rect x="695.5" y="227.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="698.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (878 samples, 27.38%)</title><rect x="697.0" y="227.0" width="323.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="700.0" y="238.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="697.0" y="211.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="700.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (4 samples, 0.12%)</title><rect x="697.3" y="211.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="700.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (859 samples, 26.79%)</title><rect x="698.8" y="211.0" width="316.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="701.8" y="222.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOp..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (5 samples, 0.16%)</title><rect x="709.5" y="195.0" width="1.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="712.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (2 samples, 0.06%)</title><rect x="711.3" y="195.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="714.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (5 samples, 0.16%)</title><rect x="712.0" y="195.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="715.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (675 samples, 21.05%)</title><rect x="713.9" y="195.0" width="248.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="716.9" y="206.0">rocksdb::DBImpl::WriteToWAL(rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (2 samples, 0.06%)</title><rect x="715.4" y="179.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="718.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (665 samples, 20.74%)</title><rect x="716.1" y="179.0" width="244.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="719.1" y="190.0">rocksdb::DBImpl::WriteToWAL(rock..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (1 samples, 0.03%)</title><rect x="719.8" y="163.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="722.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (654 samples, 20.39%)</title><rect x="720.1" y="163.0" width="240.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="723.1" y="174.0">rocksdb::log::Writer::AddRecord(..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="722.3" y="147.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="725.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Flush(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="722.7" y="147.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="725.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (620 samples, 19.33%)</title><rect x="723.1" y="147.0" width="228.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="726.1" y="158.0">rocksdb::WritableFileWriter::F..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (5 samples, 0.16%)</title><rect x="724.9" y="131.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="727.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (3 samples, 0.09%)</title><rect x="726.8" y="131.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="729.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (4 samples, 0.12%)</title><rect x="727.9" y="131.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="730.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (4 samples, 0.12%)</title><rect x="729.3" y="131.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="732.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (1 samples, 0.03%)</title><rect x="730.8" y="131.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="733.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (598 samples, 18.65%)</title><rect x="731.2" y="131.0" width="220.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="734.2" y="142.0">rocksdb::WritableFileWriter::..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="732.3" y="115.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="735.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (6 samples, 0.19%)</title><rect x="732.6" y="115.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="735.6" y="126.0"></text>
</g>
<g>
<title>write (588 samples, 18.33%)</title><rect x="734.9" y="115.0" width="216.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="737.9" y="126.0">write</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="951.2" y="147.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="954.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (9 samples, 0.28%)</title><rect x="951.6" y="147.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="954.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (16 samples, 0.50%)</title><rect x="954.9" y="147.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="957.9" y="158.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.09%)</title><rect x="955.3" y="131.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="958.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (3 samples, 0.09%)</title><rect x="956.4" y="131.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="959.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (9 samples, 0.28%)</title><rect x="957.5" y="131.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.5" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (7 samples, 0.22%)</title><rect x="957.8" y="115.0" width="2.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="960.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="960.4" y="115.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="963.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) (2 samples, 0.06%)</title><rect x="960.8" y="179.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="963.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (2 samples, 0.06%)</title><rect x="961.5" y="179.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="964.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (1 samples, 0.03%)</title><rect x="962.2" y="195.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="965.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (7 samples, 0.22%)</title><rect x="962.6" y="195.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="965.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (6 samples, 0.19%)</title><rect x="965.2" y="195.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="968.2" y="206.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.06%)</title><rect x="965.6" y="179.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="968.6" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.09%)</title><rect x="966.3" y="179.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="969.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::TrimHistoryScheduler::Empty() (1 samples, 0.03%)</title><rect x="967.4" y="195.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="970.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="967.8" y="195.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="970.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (109 samples, 3.40%)</title><rect x="968.1" y="195.0" width="40.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="971.1" y="206.0">roc..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (3 samples, 0.09%)</title><rect x="969.6" y="179.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="972.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="970.7" y="179.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="973.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (101 samples, 3.15%)</title><rect x="971.1" y="179.0" width="37.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="974.1" y="190.0">roc..</text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (6 samples, 0.19%)</title><rect x="973.3" y="163.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="976.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (89 samples, 2.78%)</title><rect x="975.5" y="163.0" width="32.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="978.5" y="174.0">ro..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (2 samples, 0.06%)</title><rect x="975.9" y="147.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="978.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (86 samples, 2.68%)</title><rect x="976.6" y="147.0" width="31.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.6" y="158.0">ro..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.16%)</title><rect x="978.4" y="131.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="981.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.03%)</title><rect x="980.3" y="131.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="983.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.03%)</title><rect x="980.6" y="131.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="983.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.03%)</title><rect x="981.0" y="131.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="984.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (66 samples, 2.06%)</title><rect x="981.4" y="131.0" width="24.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="984.4" y="142.0">r..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.06%)</title><rect x="987.3" y="115.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="990.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (5 samples, 0.16%)</title><rect x="988.0" y="115.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="991.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.06%)</title><rect x="989.8" y="115.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="992.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (41 samples, 1.28%)</title><rect x="990.6" y="115.0" width="15.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="993.6" y="126.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.09%)</title><rect x="998.3" y="99.0" width="1.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1001.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (5 samples, 0.16%)</title><rect x="999.4" y="99.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1002.4" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.06%)</title><rect x="1000.1" y="83.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1003.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="1000.9" y="83.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1003.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (11 samples, 0.34%)</title><rect x="1001.2" y="99.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1004.2" y="110.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.06%)</title><rect x="1004.2" y="83.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1007.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="1004.9" y="83.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1007.9" y="94.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="1004.9" y="67.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1007.9" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="1005.3" y="99.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1008.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (1 samples, 0.03%)</title><rect x="1005.7" y="131.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1008.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.12%)</title><rect x="1006.0" y="131.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1009.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="1007.5" y="131.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1010.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="1008.2" y="195.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1011.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long long) (1 samples, 0.03%)</title><rect x="1009.0" y="195.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1012.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.06%)</title><rect x="1009.3" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1012.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (5 samples, 0.16%)</title><rect x="1010.1" y="195.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1013.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (4 samples, 0.12%)</title><rect x="1010.4" y="179.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1013.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.06%)</title><rect x="1011.9" y="195.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1014.9" y="206.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (5 samples, 0.16%)</title><rect x="1012.7" y="195.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1015.7" y="206.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (1 samples, 0.03%)</title><rect x="1014.5" y="195.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1017.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (1 samples, 0.03%)</title><rect x="1014.9" y="211.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1017.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.03%)</title><rect x="1015.2" y="211.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1018.2" y="222.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (9 samples, 0.28%)</title><rect x="1015.6" y="211.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1018.6" y="222.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (3 samples, 0.09%)</title><rect x="1018.9" y="211.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1021.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (3 samples, 0.09%)</title><rect x="1020.0" y="227.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1023.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (11 samples, 0.34%)</title><rect x="1021.1" y="227.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1024.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.03%)</title><rect x="1021.1" y="211.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1024.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.19%)</title><rect x="1021.5" y="211.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1024.5" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (4 samples, 0.12%)</title><rect x="1021.8" y="195.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.8" y="206.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1023.0" y="179.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1026.0" y="190.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (1 samples, 0.03%)</title><rect x="1023.3" y="195.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1026.3" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (3 samples, 0.09%)</title><rect x="1023.7" y="211.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1026.7" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::push_back(char) (1 samples, 0.03%)</title><rect x="1024.8" y="211.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1027.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (21 samples, 0.65%)</title><rect x="1025.2" y="227.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1028.2" y="238.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (2 samples, 0.06%)</title><rect x="1025.2" y="211.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1028.2" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (13 samples, 0.41%)</title><rect x="1025.9" y="211.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1028.9" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (12 samples, 0.37%)</title><rect x="1026.3" y="195.0" width="4.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1029.3" y="206.0"></text>
</g>
<g>
<title>malloc (10 samples, 0.31%)</title><rect x="1027.0" y="179.0" width="3.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1030.0" y="190.0"></text>
</g>
<g>
<title>malloc_zone_malloc (10 samples, 0.31%)</title><rect x="1027.0" y="163.0" width="3.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1030.0" y="174.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (10 samples, 0.31%)</title><rect x="1027.0" y="147.0" width="3.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1030.0" y="158.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (10 samples, 0.31%)</title><rect x="1027.0" y="131.0" width="3.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1030.0" y="142.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="1028.8" y="115.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1031.8" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (4 samples, 0.12%)</title><rect x="1029.2" y="115.0" width="1.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1032.2" y="126.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (4 samples, 0.12%)</title><rect x="1030.7" y="211.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1033.7" y="222.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (3 samples, 0.09%)</title><rect x="1030.7" y="195.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1033.7" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (1 samples, 0.03%)</title><rect x="1031.8" y="195.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1034.8" y="206.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1031.8" y="179.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1034.8" y="190.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (2 samples, 0.06%)</title><rect x="1032.2" y="211.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1035.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (16 samples, 0.50%)</title><rect x="1032.9" y="227.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1035.9" y="238.0"></text>
</g>
<g>
<title>free (10 samples, 0.31%)</title><rect x="1032.9" y="211.0" width="3.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1035.9" y="222.0"></text>
</g>
<g>
<title>szone_size (7 samples, 0.22%)</title><rect x="1034.0" y="195.0" width="2.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1037.0" y="206.0"></text>
</g>
<g>
<title>tiny_size (7 samples, 0.22%)</title><rect x="1034.0" y="179.0" width="2.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1037.0" y="190.0"></text>
</g>
<g>
<title>free_tiny (6 samples, 0.19%)</title><rect x="1036.6" y="211.0" width="2.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1039.6" y="222.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.06%)</title><rect x="1038.0" y="195.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1041.0" y="206.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.06%)</title><rect x="1038.0" y="179.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1041.0" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (4 samples, 0.12%)</title><rect x="1038.8" y="227.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1041.8" y="238.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (1 samples, 0.03%)</title><rect x="1040.2" y="227.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1043.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.03%)</title><rect x="1040.6" y="243.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1043.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="1041.0" y="243.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1044.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="1041.4" y="243.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1044.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.03%)</title><rect x="1042.1" y="243.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1045.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (7 samples, 0.22%)</title><rect x="1042.5" y="275.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1045.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="1045.0" y="275.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1048.0" y="286.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.09%)</title><rect x="1045.4" y="275.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1048.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igor_manikhin/ByteConvertor.toArray (1 samples, 0.03%)</title><rect x="1046.5" y="339.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1049.5" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.03%)</title><rect x="1046.5" y="323.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1049.5" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="1046.5" y="307.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1049.5" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="1046.5" y="291.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1049.5" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="1046.5" y="275.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1049.5" y="286.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1046.5" y="259.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1049.5" y="270.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1046.5" y="243.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1049.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igor_manikhin/ByteConvertor.toUnsignedArray (12 samples, 0.37%)</title><rect x="1046.9" y="339.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1049.9" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (12 samples, 0.37%)</title><rect x="1046.9" y="323.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1049.9" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.12%)</title><rect x="1047.6" y="307.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1050.6" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.19%)</title><rect x="1049.1" y="307.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1052.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.19%)</title><rect x="1049.1" y="291.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1052.1" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.19%)</title><rect x="1049.1" y="275.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1052.1" y="286.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (5 samples, 0.16%)</title><rect x="1049.1" y="259.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1052.1" y="270.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (5 samples, 0.16%)</title><rect x="1049.1" y="243.0" width="1.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1052.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="1050.9" y="259.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1053.9" y="270.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (19 samples, 0.59%)</title><rect x="1051.3" y="403.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1054.3" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.get (18 samples, 0.56%)</title><rect x="1051.7" y="387.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1054.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (14 samples, 0.44%)</title><rect x="1051.7" y="371.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1054.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.equals (11 samples, 0.34%)</title><rect x="1052.8" y="355.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1055.8" y="366.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1053.9" y="339.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1056.9" y="350.0"></text>
</g>
<g>
<title>java/lang/String.coder (5 samples, 0.16%)</title><rect x="1054.6" y="339.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1057.6" y="350.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.12%)</title><rect x="1055.0" y="323.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1058.0" y="334.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="1056.4" y="339.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1059.4" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.12%)</title><rect x="1056.8" y="371.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1059.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.12%)</title><rect x="1056.8" y="355.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1059.8" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.12%)</title><rect x="1056.8" y="339.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1059.8" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (9 samples, 0.28%)</title><rect x="1058.3" y="403.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1061.3" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.25%)</title><rect x="1058.6" y="387.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1061.6" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8 samples, 0.25%)</title><rect x="1058.6" y="371.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1061.6" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.19%)</title><rect x="1059.0" y="355.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1062.0" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="1061.2" y="355.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1064.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (24 samples, 0.75%)</title><rect x="1061.6" y="435.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1064.6" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.25%)</title><rect x="1064.9" y="419.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1067.9" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.25%)</title><rect x="1064.9" y="403.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1067.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1067.1" y="387.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1070.1" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1067.1" y="371.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1070.1" y="382.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.06%)</title><rect x="1067.1" y="355.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1070.1" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (7 samples, 0.22%)</title><rect x="1067.8" y="419.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1070.8" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.19%)</title><rect x="1068.2" y="403.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1071.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (6 samples, 0.19%)</title><rect x="1070.4" y="435.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1073.4" y="446.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.12%)</title><rect x="1070.8" y="419.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1073.8" y="430.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.12%)</title><rect x="1070.8" y="403.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1073.8" y="414.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.06%)</title><rect x="1071.5" y="387.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1074.5" y="398.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.06%)</title><rect x="1071.5" y="371.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1074.5" y="382.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (2 samples, 0.06%)</title><rect x="1071.5" y="355.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1074.5" y="366.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="1072.3" y="419.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1075.3" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.06%)</title><rect x="1072.6" y="435.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1075.6" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1073.0" y="419.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1076.0" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (14 samples, 0.44%)</title><rect x="1073.4" y="435.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1076.4" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.34%)</title><rect x="1074.5" y="419.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1077.5" y="430.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.06%)</title><rect x="1074.5" y="403.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1077.5" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.28%)</title><rect x="1075.2" y="403.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1078.2" y="414.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.03%)</title><rect x="1075.9" y="387.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1078.9" y="398.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.03%)</title><rect x="1075.9" y="371.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1078.9" y="382.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.03%)</title><rect x="1075.9" y="355.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1078.9" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.19%)</title><rect x="1076.3" y="387.0" width="2.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1079.3" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.31%)</title><rect x="1078.5" y="435.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1081.5" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.28%)</title><rect x="1078.9" y="419.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1081.9" y="430.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1081.5" y="403.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1084.5" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1081.5" y="387.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1084.5" y="398.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.06%)</title><rect x="1081.5" y="371.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1084.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (180 samples, 5.61%)</title><rect x="1082.2" y="451.0" width="66.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1085.2" y="462.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (180 samples, 5.61%)</title><rect x="1082.2" y="435.0" width="66.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1085.2" y="446.0">one/nio..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.19%)</title><rect x="1082.9" y="419.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1085.9" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.19%)</title><rect x="1082.9" y="403.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1085.9" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.19%)</title><rect x="1082.9" y="387.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1085.9" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="1083.7" y="371.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1086.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="1084.8" y="355.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1087.8" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="1084.8" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1087.8" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="1084.8" y="323.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1087.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (172 samples, 5.36%)</title><rect x="1085.1" y="419.0" width="63.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1088.1" y="430.0">sun/nio..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (21 samples, 0.65%)</title><rect x="1085.5" y="403.0" width="7.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1088.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (15 samples, 0.47%)</title><rect x="1085.5" y="387.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1088.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (15 samples, 0.47%)</title><rect x="1085.5" y="371.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1088.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (15 samples, 0.47%)</title><rect x="1085.5" y="355.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1088.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (7 samples, 0.22%)</title><rect x="1085.5" y="339.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1088.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (8 samples, 0.25%)</title><rect x="1088.1" y="339.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1091.1" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (8 samples, 0.25%)</title><rect x="1088.1" y="323.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1091.1" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (8 samples, 0.25%)</title><rect x="1088.1" y="307.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1091.1" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.19%)</title><rect x="1091.0" y="387.0" width="2.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1094.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (142 samples, 4.43%)</title><rect x="1093.2" y="403.0" width="52.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1096.2" y="414.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (142 samples, 4.43%)</title><rect x="1093.2" y="387.0" width="52.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1096.2" y="398.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (142 samples, 4.43%)</title><rect x="1093.2" y="371.0" width="52.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1096.2" y="382.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (141 samples, 4.40%)</title><rect x="1093.6" y="355.0" width="51.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1096.6" y="366.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (141 samples, 4.40%)</title><rect x="1093.6" y="339.0" width="51.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1096.6" y="350.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="1095.1" y="323.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1098.1" y="334.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1095.1" y="307.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1098.1" y="318.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="1095.4" y="323.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1098.4" y="334.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1095.8" y="323.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1098.8" y="334.0"></text>
</g>
<g>
<title>rpc_errlist (134 samples, 4.18%)</title><rect x="1096.2" y="323.0" width="49.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1099.2" y="334.0">rpc_e..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (8 samples, 0.25%)</title><rect x="1145.5" y="403.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1148.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureOpenAndConnected (8 samples, 0.25%)</title><rect x="1145.5" y="387.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1148.5" y="398.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="1148.4" y="467.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.4" y="478.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="1148.4" y="451.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1151.4" y="462.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.06%)</title><rect x="1148.4" y="435.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1151.4" y="446.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="1148.4" y="419.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1151.4" y="430.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="1148.8" y="419.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1151.8" y="430.0"></text>
</g>
<g>
<title>thread_start (111 samples, 3.46%)</title><rect x="1149.2" y="499.0" width="40.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1152.2" y="510.0">thr..</text>
</g>
<g>
<title>_pthread_start (111 samples, 3.46%)</title><rect x="1149.2" y="483.0" width="40.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1152.2" y="494.0">_pt..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.16%)</title><rect x="1149.2" y="467.0" width="1.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1152.2" y="478.0"></text>
</g>
<g>
<title>Thread::call_run() (5 samples, 0.16%)</title><rect x="1149.2" y="451.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.2" y="462.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.06%)</title><rect x="1149.2" y="435.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.2" y="446.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.06%)</title><rect x="1149.2" y="419.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.2" y="430.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (1 samples, 0.03%)</title><rect x="1149.2" y="403.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.2" y="414.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.03%)</title><rect x="1149.2" y="387.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.2" y="398.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1149.2" y="371.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.2" y="382.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.03%)</title><rect x="1149.2" y="355.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.2" y="366.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.03%)</title><rect x="1149.2" y="339.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.2" y="350.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="1149.2" y="323.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.2" y="334.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1149.2" y="307.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.2" y="318.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.03%)</title><rect x="1149.5" y="403.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.5" y="414.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1149.5" y="387.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.5" y="398.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1149.5" y="371.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.5" y="382.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="1149.5" y="355.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.5" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1149.5" y="339.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1152.5" y="350.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.06%)</title><rect x="1149.9" y="435.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.9" y="446.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.06%)</title><rect x="1149.9" y="419.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.9" y="430.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (2 samples, 0.06%)</title><rect x="1149.9" y="403.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1152.9" y="414.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (2 samples, 0.06%)</title><rect x="1149.9" y="387.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1152.9" y="398.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (2 samples, 0.06%)</title><rect x="1149.9" y="371.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.9" y="382.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.03%)</title><rect x="1149.9" y="355.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1152.9" y="366.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.03%)</title><rect x="1149.9" y="339.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.9" y="350.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="1149.9" y="323.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1152.9" y="334.0"></text>
</g>
<g>
<title>os::dll_load(char const*, char*, int) (1 samples, 0.03%)</title><rect x="1150.3" y="355.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.3" y="366.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1150.3" y="339.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1153.3" y="350.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1150.3" y="323.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1153.3" y="334.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1150.3" y="307.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1153.3" y="318.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1150.3" y="291.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1153.3" y="302.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.03%)</title><rect x="1150.6" y="435.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.6" y="446.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.03%)</title><rect x="1150.6" y="419.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.6" y="430.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1150.6" y="403.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.6" y="414.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1150.6" y="387.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.6" y="398.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="1150.6" y="371.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.6" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1150.6" y="355.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1153.6" y="366.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, void (*)(void*), rocksdb::BGThreadMetadata*&gt; &gt;(void*) (106 samples, 3.31%)</title><rect x="1151.0" y="467.0" width="39.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.0" y="478.0">voi..</text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThreadWrapper(void*) (106 samples, 3.31%)</title><rect x="1151.0" y="451.0" width="39.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.0" y="462.0">roc..</text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThread(unsigned long) (106 samples, 3.31%)</title><rect x="1151.0" y="435.0" width="39.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.0" y="446.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::BGWorkCompaction(void*) (66 samples, 2.06%)</title><rect x="1151.0" y="419.0" width="24.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.0" y="430.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundCallCompaction(rocksdb::DBImpl::PrepickedCompaction*, rocksdb::Env::Priority) (66 samples, 2.06%)</title><rect x="1151.0" y="403.0" width="24.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.0" y="414.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundCompaction(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::DBImpl::PrepickedCompaction*, rocksdb::Env::Priority) (66 samples, 2.06%)</title><rect x="1151.0" y="387.0" width="24.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.0" y="398.0">r..</text>
</g>
<g>
<title>rocksdb::CompactionJob::Run() (66 samples, 2.06%)</title><rect x="1151.0" y="371.0" width="24.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.0" y="382.0">r..</text>
</g>
<g>
<title>rocksdb::CompactionJob::ProcessKeyValueCompaction(rocksdb::CompactionJob::SubcompactionState*) (66 samples, 2.06%)</title><rect x="1151.0" y="355.0" width="24.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.0" y="366.0">r..</text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Add(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (26 samples, 0.81%)</title><rect x="1151.0" y="339.0" width="9.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Flush() (16 samples, 0.50%)</title><rect x="1151.0" y="323.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::Slice const&amp;, rocksdb::BlockHandle*, bool) (16 samples, 0.50%)</title><rect x="1151.0" y="307.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::CompressAndVerifyBlock(rocksdb::Slice const&amp;, bool, rocksdb::CompressionContext&amp;, rocksdb::UncompressionContext*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Slice*, rocksdb::CompressionType*, rocksdb::Status*) (15 samples, 0.47%)</title><rect x="1151.0" y="291.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (15 samples, 0.47%)</title><rect x="1151.0" y="275.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (15 samples, 0.47%)</title><rect x="1151.0" y="259.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.0" y="270.0"></text>
</g>
<g>
<title>snappy::RawCompress(char const*, unsigned long, char*, unsigned long*) (15 samples, 0.47%)</title><rect x="1151.0" y="243.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.0" y="254.0"></text>
</g>
<g>
<title>snappy::Compress(snappy::Source*, snappy::Sink*) (15 samples, 0.47%)</title><rect x="1151.0" y="227.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.0" y="238.0"></text>
</g>
<g>
<title>snappy::internal::CompressFragment(char const*, unsigned long, char*, unsigned short*, int) (13 samples, 0.41%)</title><rect x="1151.0" y="211.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.0" y="222.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.06%)</title><rect x="1151.4" y="195.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1154.4" y="206.0"></text>
</g>
<g>
<title>snappy::Bits::Log2Floor(unsigned int) (10 samples, 0.31%)</title><rect x="1152.1" y="195.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.1" y="206.0"></text>
</g>
<g>
<title>snappy::Bits::FindLSBSetNonZero64(unsigned long long) (2 samples, 0.06%)</title><rect x="1153.9" y="179.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.9" y="190.0"></text>
</g>
<g>
<title>snappy::LittleEndian::FromHost32(unsigned int) (3 samples, 0.09%)</title><rect x="1154.7" y="179.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.7" y="190.0"></text>
</g>
<g>
<title>snappy::LittleEndian::Store32(void*, unsigned int) (2 samples, 0.06%)</title><rect x="1155.0" y="163.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.0" y="174.0"></text>
</g>
<g>
<title>snappy::internal::WorkingMemory::GetHashTable(unsigned long, int*) const (1 samples, 0.03%)</title><rect x="1155.8" y="211.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.8" y="222.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1155.8" y="195.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1158.8" y="206.0"></text>
</g>
<g>
<title>snappy::internal::WorkingMemory::WorkingMemory(unsigned long) (1 samples, 0.03%)</title><rect x="1156.1" y="211.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.1" y="222.0"></text>
</g>
<g>
<title>snappy::internal::WorkingMemory::WorkingMemory(unsigned long) (1 samples, 0.03%)</title><rect x="1156.1" y="195.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.1" y="206.0"></text>
</g>
<g>
<title>snappy::internal::WorkingMemory::WorkingMemory(unsigned long) (1 samples, 0.03%)</title><rect x="1156.1" y="179.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.1" y="190.0"></text>
</g>
<g>
<title>std::__1::_DeallocateCaller::__do_call(void*) (1 samples, 0.03%)</title><rect x="1156.1" y="163.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.1" y="174.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="1156.1" y="147.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1159.1" y="158.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1156.1" y="131.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1159.1" y="142.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1156.1" y="115.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1159.1" y="126.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="1156.1" y="99.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1159.1" y="110.0"></text>
</g>
<g>
<title>small_malloc_should_clear (1 samples, 0.03%)</title><rect x="1156.1" y="83.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1159.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::WriteRawBlock(rocksdb::Slice const&amp;, rocksdb::CompressionType, rocksdb::BlockHandle*, bool) (1 samples, 0.03%)</title><rect x="1156.5" y="291.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="1156.5" y="275.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (1 samples, 0.03%)</title><rect x="1156.5" y="259.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1156.5" y="243.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.5" y="254.0"></text>
</g>
<g>
<title>write (1 samples, 0.03%)</title><rect x="1156.5" y="227.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1159.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::status() const (1 samples, 0.03%)</title><rect x="1156.9" y="323.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::BlockBuilder::Add(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const*) (6 samples, 0.19%)</title><rect x="1157.3" y="323.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.3" y="334.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.06%)</title><rect x="1158.7" y="307.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.7" y="318.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1159.1" y="291.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1162.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::NotifyCollectTableCollectorsOnAdd(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, unsigned long long, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::IntTblPropCollector, std::__1::default_delete&lt;rocksdb::IntTblPropCollector&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::IntTblPropCollector, std::__1::default_delete&lt;rocksdb::IntTblPropCollector&gt; &gt; &gt; &gt; const&amp;, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="1159.5" y="323.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::PartitionedIndexBuilder::NumPartitions() const (1 samples, 0.03%)</title><rect x="1159.8" y="323.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::BlockBuilder::Add(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const*) (1 samples, 0.03%)</title><rect x="1159.8" y="307.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.8" y="318.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1160.2" y="323.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::Next() (37 samples, 1.15%)</title><rect x="1160.6" y="339.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.6" y="350.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1160.9" y="323.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1163.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::IsInEarliestSnapshot(unsigned long long) (2 samples, 0.06%)</title><rect x="1161.3" y="323.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::NextFromInput() (15 samples, 0.47%)</title><rect x="1162.0" y="323.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::MergeIteratorBuilder::Finish() (9 samples, 0.28%)</title><rect x="1163.9" y="307.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::NextAndGetResult(rocksdb::IterateResult*) (4 samples, 0.12%)</title><rect x="1163.9" y="291.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Next() (3 samples, 0.09%)</title><rect x="1164.2" y="275.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::FindBlockForward() (3 samples, 0.09%)</title><rect x="1164.2" y="259.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::InitDataBlock() (3 samples, 0.09%)</title><rect x="1164.2" y="243.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (3 samples, 0.09%)</title><rect x="1164.2" y="227.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (3 samples, 0.09%)</title><rect x="1164.2" y="211.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (3 samples, 0.09%)</title><rect x="1164.2" y="195.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (3 samples, 0.09%)</title><rect x="1164.2" y="179.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (3 samples, 0.09%)</title><rect x="1164.2" y="163.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (3 samples, 0.09%)</title><rect x="1164.2" y="147.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.2" y="158.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (3 samples, 0.09%)</title><rect x="1164.2" y="131.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.2" y="142.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (3 samples, 0.09%)</title><rect x="1164.2" y="115.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.2" y="126.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (3 samples, 0.09%)</title><rect x="1164.2" y="99.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.2" y="110.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (3 samples, 0.09%)</title><rect x="1164.2" y="83.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.2" y="94.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (3 samples, 0.09%)</title><rect x="1164.2" y="67.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.2" y="78.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1164.6" y="51.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.6" y="62.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (1 samples, 0.03%)</title><rect x="1164.6" y="35.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.6" y="46.0"></text>
</g>
<g>
<title>snappy::SnappyDecompressor::RefillTag() (1 samples, 0.03%)</title><rect x="1165.0" y="51.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.0" y="62.0"></text>
</g>
<g>
<title>rocksdb::MergeIteratorBuilder::Finish() (5 samples, 0.16%)</title><rect x="1165.3" y="291.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.3" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1166.1" y="275.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1169.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.06%)</title><rect x="1166.5" y="275.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.5" y="286.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="1166.8" y="259.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1169.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="1167.2" y="307.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.2" y="318.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="1167.2" y="291.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1170.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::MergeIteratorBuilder::Finish() (18 samples, 0.56%)</title><rect x="1167.6" y="323.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.6" y="334.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1167.6" y="307.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1170.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::NextAndGetResult(rocksdb::IterateResult*) (13 samples, 0.41%)</title><rect x="1167.9" y="307.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Next() (13 samples, 0.41%)</title><rect x="1167.9" y="291.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::FindBlockForward() (13 samples, 0.41%)</title><rect x="1167.9" y="275.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::InitDataBlock() (13 samples, 0.41%)</title><rect x="1167.9" y="259.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (13 samples, 0.41%)</title><rect x="1167.9" y="243.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (13 samples, 0.41%)</title><rect x="1167.9" y="227.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (13 samples, 0.41%)</title><rect x="1167.9" y="211.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (13 samples, 0.41%)</title><rect x="1167.9" y="195.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.9" y="206.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1167.9" y="179.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1170.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::RandomAccessFileReader::Read(rocksdb::IOOptions const&amp;, unsigned long long, unsigned long, rocksdb::Slice*, char*, std::__1::unique_ptr&lt;char [], std::__1::default_delete&lt;char []&gt; &gt;*, bool) const (1 samples, 0.03%)</title><rect x="1168.3" y="179.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.3" y="190.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="1168.3" y="163.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1171.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (10 samples, 0.31%)</title><rect x="1168.7" y="179.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (9 samples, 0.28%)</title><rect x="1169.0" y="163.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.0" y="174.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (9 samples, 0.28%)</title><rect x="1169.0" y="147.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.0" y="158.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (9 samples, 0.28%)</title><rect x="1169.0" y="131.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.0" y="142.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (9 samples, 0.28%)</title><rect x="1169.0" y="115.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.0" y="126.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (9 samples, 0.28%)</title><rect x="1169.0" y="99.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.0" y="110.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (9 samples, 0.28%)</title><rect x="1169.0" y="83.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.0" y="94.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="1170.5" y="67.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.5" y="78.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (2 samples, 0.06%)</title><rect x="1170.5" y="51.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.5" y="62.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (1 samples, 0.03%)</title><rect x="1170.9" y="35.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.9" y="46.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::TryFastAppend(char const*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1171.2" y="67.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.2" y="78.0"></text>
</g>
<g>
<title>std::__1::_DeallocateCaller::__do_call(void*) (1 samples, 0.03%)</title><rect x="1171.2" y="51.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.2" y="62.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (1 samples, 0.03%)</title><rect x="1171.6" y="67.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.6" y="78.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::TryFastAppend(char const*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1172.0" y="67.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1172.3" y="179.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::MergeIteratorBuilder::Finish() (4 samples, 0.12%)</title><rect x="1172.7" y="307.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="1173.4" y="291.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.4" y="302.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="1173.4" y="275.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1176.4" y="286.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="1173.8" y="291.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::CompactionJob::FinishCompactionOutputFile(rocksdb::Status const&amp;, rocksdb::CompactionJob::SubcompactionState*, rocksdb::CompactionRangeDelAggregator*, CompactionIterationStats*, rocksdb::Slice const*) (1 samples, 0.03%)</title><rect x="1174.2" y="339.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::~BlockBasedTableBuilder() (1 samples, 0.03%)</title><rect x="1174.2" y="323.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::GetFileChecksumFuncName() const (1 samples, 0.03%)</title><rect x="1174.2" y="307.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::PartitionedIndexBuilder::NumPartitions() const (1 samples, 0.03%)</title><rect x="1174.2" y="291.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.2" y="302.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.03%)</title><rect x="1174.2" y="275.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1177.2" y="286.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.03%)</title><rect x="1174.2" y="259.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1177.2" y="270.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.03%)</title><rect x="1174.2" y="243.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1177.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::FileMetaData::UpdateBoundaries(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, unsigned long long, rocksdb::ValueType) (1 samples, 0.03%)</title><rect x="1174.5" y="339.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.5" y="350.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.03%)</title><rect x="1174.5" y="323.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1177.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::NotifyCollectTableCollectorsOnAdd(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, unsigned long long, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::IntTblPropCollector, std::__1::default_delete&lt;rocksdb::IntTblPropCollector&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::IntTblPropCollector, std::__1::default_delete&lt;rocksdb::IntTblPropCollector&gt; &gt; &gt; &gt; const&amp;, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="1174.9" y="339.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundCallFlush(rocksdb::Env::Priority) (40 samples, 1.25%)</title><rect x="1175.3" y="419.0" width="14.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundFlush(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::FlushReason*, rocksdb::Env::Priority) (40 samples, 1.25%)</title><rect x="1175.3" y="403.0" width="14.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTablesToOutputFiles(rocksdb::autovector&lt;rocksdb::DBImpl::BGFlushArg, 8ul&gt; const&amp;, bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (40 samples, 1.25%)</title><rect x="1175.3" y="387.0" width="14.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.3" y="398.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTableToOutputFile(rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&amp;, bool*, rocksdb::JobContext*, rocksdb::SuperVersionContext*, std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt; &gt;&amp;, unsigned long long, rocksdb::SnapshotChecker*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (40 samples, 1.25%)</title><rect x="1175.3" y="371.0" width="14.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.3" y="382.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::Run(rocksdb::LogsWithPrepTracker*, rocksdb::FileMetaData*) (40 samples, 1.25%)</title><rect x="1175.3" y="355.0" width="14.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.3" y="366.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::WriteLevel0Table() (40 samples, 1.25%)</title><rect x="1175.3" y="339.0" width="14.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.3" y="350.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.06%)</title><rect x="1175.3" y="323.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1178.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::BuildTable(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, rocksdb::FileSystem*, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, rocksdb::FileOptions const&amp;, rocksdb::TableCache*, rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt; &gt; &gt;, rocksdb::FileMetaData*, rocksdb::InternalKeyComparator const&amp;, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::IntTblPropCollectorFactory, std::__1::default_delete&lt;rocks (38 samples, 1.18%)</title><rect x="1176.0" y="323.0" width="14.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.0" y="334.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="1176.0" y="307.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1179.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Add(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (30 samples, 0.94%)</title><rect x="1176.4" y="307.0" width="11.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Flush() (21 samples, 0.65%)</title><rect x="1177.5" y="291.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::Slice const&amp;, rocksdb::BlockHandle*, bool) (21 samples, 0.65%)</title><rect x="1177.5" y="275.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::CompressAndVerifyBlock(rocksdb::Slice const&amp;, bool, rocksdb::CompressionContext&amp;, rocksdb::UncompressionContext*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Slice*, rocksdb::CompressionType*, rocksdb::Status*) (20 samples, 0.62%)</title><rect x="1177.5" y="259.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (20 samples, 0.62%)</title><rect x="1177.5" y="243.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (20 samples, 0.62%)</title><rect x="1177.5" y="227.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="238.0"></text>
</g>
<g>
<title>snappy::RawCompress(char const*, unsigned long, char*, unsigned long*) (19 samples, 0.59%)</title><rect x="1177.5" y="211.0" width="7.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.5" y="222.0"></text>
</g>
<g>
<title>snappy::Compress(snappy::Source*, snappy::Sink*) (19 samples, 0.59%)</title><rect x="1177.5" y="195.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.5" y="206.0"></text>
</g>
<g>
<title>snappy::internal::CompressFragment(char const*, unsigned long, char*, unsigned short*, int) (18 samples, 0.56%)</title><rect x="1177.5" y="179.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="190.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.06%)</title><rect x="1178.6" y="163.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1181.6" y="174.0"></text>
</g>
<g>
<title>snappy::Bits::Log2Floor(unsigned int) (12 samples, 0.37%)</title><rect x="1179.3" y="163.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="174.0"></text>
</g>
<g>
<title>snappy::Bits::FindLSBSetNonZero64(unsigned long long) (2 samples, 0.06%)</title><rect x="1181.5" y="147.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.5" y="158.0"></text>
</g>
<g>
<title>snappy::Bits::FindLSBSetNonZero64(unsigned long long) (1 samples, 0.03%)</title><rect x="1181.9" y="131.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="142.0"></text>
</g>
<g>
<title>snappy::Bits::Log2Floor(unsigned int) (1 samples, 0.03%)</title><rect x="1182.3" y="147.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="158.0"></text>
</g>
<g>
<title>snappy::LittleEndian::FromHost32(unsigned int) (2 samples, 0.06%)</title><rect x="1182.6" y="147.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.6" y="158.0"></text>
</g>
<g>
<title>snappy::LittleEndian::IsLittleEndian() (1 samples, 0.03%)</title><rect x="1183.4" y="147.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.4" y="158.0"></text>
</g>
<g>
<title>snappy::LittleEndian::FromHost32(unsigned int) (1 samples, 0.03%)</title><rect x="1183.7" y="163.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.7" y="174.0"></text>
</g>
<g>
<title>snappy::internal::WorkingMemory::~WorkingMemory() (1 samples, 0.03%)</title><rect x="1184.1" y="179.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.1" y="190.0"></text>
</g>
<g>
<title>snappy::internal::WorkingMemory::~WorkingMemory() (1 samples, 0.03%)</title><rect x="1184.1" y="163.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.1" y="174.0"></text>
</g>
<g>
<title>snappy::internal::WorkingMemory::~WorkingMemory() (1 samples, 0.03%)</title><rect x="1184.1" y="147.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.1" y="158.0"></text>
</g>
<g>
<title>snappy::LittleEndian::IsLittleEndian() (1 samples, 0.03%)</title><rect x="1184.1" y="131.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="142.0"></text>
</g>
<g>
<title>snappy::LittleEndian::IsLittleEndian() (1 samples, 0.03%)</title><rect x="1184.1" y="115.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.1" y="126.0"></text>
</g>
<g>
<title>std::__1::_DeallocateCaller::__do_deallocate_handle_size(void*, unsigned long) (1 samples, 0.03%)</title><rect x="1184.1" y="99.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="110.0"></text>
</g>
<g>
<title>std::__1::_DeallocateCaller::__do_call(void*) (1 samples, 0.03%)</title><rect x="1184.1" y="83.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="94.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="1184.1" y="67.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1187.1" y="78.0"></text>
</g>
<g>
<title>small_size (1 samples, 0.03%)</title><rect x="1184.1" y="51.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1187.1" y="62.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (1 samples, 0.03%)</title><rect x="1184.5" y="211.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.5" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (1 samples, 0.03%)</title><rect x="1184.5" y="195.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1184.8" y="259.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBuilder::Add(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const*) (3 samples, 0.09%)</title><rect x="1185.2" y="291.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.2" y="302.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (2 samples, 0.06%)</title><rect x="1185.6" y="275.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::BlockBuilder::EstimateSizeAfterKV(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="1186.3" y="291.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.03%)</title><rect x="1186.7" y="291.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::PartitionedIndexBuilder::NumPartitions() const (1 samples, 0.03%)</title><rect x="1187.1" y="291.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::FindShortestSeparator(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="1187.1" y="275.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::Next() (6 samples, 0.19%)</title><rect x="1187.4" y="307.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::NextFromInput() (5 samples, 0.16%)</title><rect x="1187.4" y="291.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.09%)</title><rect x="1188.2" y="275.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.2" y="286.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1188.9" y="259.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1191.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::CompactionRangeDelAggregator::ShouldDelete(rocksdb::ParsedInternalKey const&amp;, rocksdb::RangeDelPositioningMode) (1 samples, 0.03%)</title><rect x="1189.3" y="291.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::FileMetaData::UpdateBoundaries(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, unsigned long long, rocksdb::ValueType) (1 samples, 0.03%)</title><rect x="1189.6" y="307.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.6" y="318.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1189.6" y="291.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.6" y="302.0"></text>
</g>
</g>
</svg>
