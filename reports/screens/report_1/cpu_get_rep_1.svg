<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="629"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="629"> </text>
<g id="frames">
<g>
<title>all (2,208 samples, 100.00%)</title><rect x="10.0" y="595.0" width="1180.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="13.0" y="606.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,179 samples, 98.69%)</title><rect x="10.0" y="579.0" width="1164.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="590.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (3 samples, 0.14%)</title><rect x="12.7" y="563.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.7" y="574.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (3 samples, 0.14%)</title><rect x="12.7" y="547.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="15.7" y="558.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (721 samples, 32.65%)</title><rect x="14.3" y="563.0" width="385.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.3" y="574.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.05%)</title><rect x="14.3" y="547.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.3" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.05%)</title><rect x="14.3" y="531.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.3" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.05%)</title><rect x="14.3" y="515.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.3" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (30 samples, 1.36%)</title><rect x="14.8" y="547.0" width="16.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (24 samples, 1.09%)</title><rect x="18.0" y="531.0" width="12.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (24 samples, 1.09%)</title><rect x="18.0" y="515.0" width="12.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.0" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (18 samples, 0.82%)</title><rect x="18.6" y="499.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.6" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (18 samples, 0.82%)</title><rect x="18.6" y="483.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.6" y="494.0"></text>
</g>
<g>
<title>__block_literal_global (5 samples, 0.23%)</title><rect x="19.1" y="467.0" width="2.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="22.1" y="478.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.05%)</title><rect x="21.8" y="467.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="24.8" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (11 samples, 0.50%)</title><rect x="22.3" y="467.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="25.3" y="478.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.05%)</title><rect x="26.0" y="451.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="29.0" y="462.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (3 samples, 0.14%)</title><rect x="26.6" y="451.0" width="1.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="29.6" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (5 samples, 0.23%)</title><rect x="28.2" y="499.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.2" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (2 samples, 0.09%)</title><rect x="29.8" y="483.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="32.8" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (690 samples, 31.25%)</title><rect x="30.8" y="547.0" width="368.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="33.8" y="558.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (689 samples, 31.20%)</title><rect x="31.4" y="531.0" width="368.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.4" y="542.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (681 samples, 30.84%)</title><rect x="35.7" y="515.0" width="363.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="38.7" y="526.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (607 samples, 27.49%)</title><rect x="35.7" y="499.0" width="324.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.7" y="510.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.05%)</title><rect x="72.0" y="483.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="75.0" y="494.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (17 samples, 0.77%)</title><rect x="72.5" y="483.0" width="9.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="75.5" y="494.0"></text>
</g>
<g>
<title>kevent (521 samples, 23.60%)</title><rect x="81.6" y="483.0" width="278.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="84.6" y="494.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (30 samples, 1.36%)</title><rect x="360.0" y="499.0" width="16.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="363.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.36%)</title><rect x="362.7" y="483.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="365.7" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.32%)</title><rect x="362.7" y="467.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="365.7" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.05%)</title><rect x="366.5" y="467.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="369.5" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.05%)</title><rect x="367.0" y="483.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.0" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (16 samples, 0.72%)</title><rect x="367.5" y="483.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="370.5" y="494.0"></text>
</g>
<g>
<title>java/util/HashSet.add (14 samples, 0.63%)</title><rect x="367.5" y="467.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="370.5" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.put (14 samples, 0.63%)</title><rect x="367.5" y="451.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="370.5" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (14 samples, 0.63%)</title><rect x="367.5" y="435.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.5" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.05%)</title><rect x="370.7" y="419.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="373.7" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 0.27%)</title><rect x="371.3" y="419.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="374.3" y="430.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.05%)</title><rect x="374.5" y="419.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="377.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (2 samples, 0.09%)</title><rect x="375.0" y="467.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="378.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (7 samples, 0.32%)</title><rect x="376.1" y="499.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="379.1" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.05%)</title><rect x="379.3" y="483.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="382.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.05%)</title><rect x="379.8" y="499.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="382.8" y="510.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.05%)</title><rect x="379.8" y="483.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="382.8" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (36 samples, 1.63%)</title><rect x="380.4" y="499.0" width="19.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="383.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (6 samples, 0.27%)</title><rect x="387.8" y="483.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.8" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (6 samples, 0.27%)</title><rect x="387.8" y="467.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="390.8" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.isEmpty (3 samples, 0.14%)</title><rect x="391.0" y="483.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="394.0" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.isEmpty (3 samples, 0.14%)</title><rect x="391.0" y="467.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="394.0" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (13 samples, 0.59%)</title><rect x="392.6" y="483.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="395.6" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (7 samples, 0.32%)</title><rect x="393.7" y="467.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="396.7" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (7 samples, 0.32%)</title><rect x="393.7" y="451.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.7" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (7 samples, 0.32%)</title><rect x="393.7" y="435.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="396.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.05%)</title><rect x="396.9" y="419.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="399.9" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (4 samples, 0.18%)</title><rect x="397.5" y="467.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="400.5" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,450 samples, 65.67%)</title><rect x="399.6" y="563.0" width="774.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="402.6" y="574.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,447 samples, 65.53%)</title><rect x="399.6" y="547.0" width="773.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="402.6" y="558.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,254 samples, 56.79%)</title><rect x="400.7" y="531.0" width="670.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="403.7" y="542.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,194 samples, 54.08%)</title><rect x="408.7" y="515.0" width="638.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="411.7" y="526.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,192 samples, 53.99%)</title><rect x="409.7" y="499.0" width="637.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="412.7" y="510.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,170 samples, 52.99%)</title><rect x="410.3" y="483.0" width="625.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.3" y="494.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (593 samples, 26.86%)</title><rect x="410.8" y="467.0" width="316.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="413.8" y="478.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (6 samples, 0.27%)</title><rect x="412.4" y="451.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="415.4" y="462.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.27%)</title><rect x="412.4" y="435.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="415.4" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.27%)</title><rect x="412.4" y="419.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="415.4" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.14%)</title><rect x="414.0" y="403.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="417.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (581 samples, 26.31%)</title><rect x="415.6" y="451.0" width="310.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="418.6" y="462.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (28 samples, 1.27%)</title><rect x="415.6" y="435.0" width="15.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="418.6" y="446.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="419.4" y="419.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="422.4" y="430.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.09%)</title><rect x="419.9" y="419.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="422.9" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="420.4" y="403.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="423.4" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="420.4" y="387.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="423.4" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="420.4" y="371.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="423.4" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="420.4" y="355.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="423.4" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="420.4" y="339.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="423.4" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="420.4" y="323.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="423.4" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.05%)</title><rect x="420.4" y="307.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="423.4" y="318.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.05%)</title><rect x="420.4" y="291.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="423.4" y="302.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (18 samples, 0.82%)</title><rect x="421.0" y="419.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="424.0" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.18%)</title><rect x="421.0" y="403.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="424.0" y="414.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.09%)</title><rect x="422.0" y="387.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="425.0" y="398.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.05%)</title><rect x="422.0" y="371.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="425.0" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.05%)</title><rect x="422.6" y="371.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="425.6" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (14 samples, 0.63%)</title><rect x="423.1" y="403.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="426.1" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (13 samples, 0.59%)</title><rect x="423.6" y="387.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="426.6" y="398.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.05%)</title><rect x="423.6" y="371.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="426.6" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (12 samples, 0.54%)</title><rect x="424.2" y="371.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="427.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.14%)</title><rect x="429.0" y="355.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="432.0" y="366.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.09%)</title><rect x="429.0" y="339.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="432.0" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.05%)</title><rect x="430.1" y="339.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="433.1" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (553 samples, 25.05%)</title><rect x="430.6" y="435.0" width="295.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="433.6" y="446.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (551 samples, 24.95%)</title><rect x="431.7" y="419.0" width="294.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="434.7" y="430.0">one/nio/net/Session.write</text>
</g>
<g>
<title>__cxx_global_var_init.4 (2 samples, 0.09%)</title><rect x="432.7" y="403.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="435.7" y="414.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.18%)</title><rect x="433.8" y="403.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="436.8" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (539 samples, 24.41%)</title><rect x="435.9" y="403.0" width="288.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="438.9" y="414.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (539 samples, 24.41%)</title><rect x="435.9" y="387.0" width="288.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="438.9" y="398.0">one/nio/net/JavaSocket.write</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.54%)</title><rect x="435.9" y="371.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="438.9" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (12 samples, 0.54%)</title><rect x="435.9" y="355.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="438.9" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.50%)</title><rect x="436.5" y="339.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="439.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (527 samples, 23.87%)</title><rect x="442.3" y="371.0" width="281.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="445.3" y="382.0">sun/nio/ch/SocketChannelImpl.write</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.09%)</title><rect x="442.3" y="355.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="445.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.09%)</title><rect x="442.3" y="339.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="445.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.09%)</title><rect x="442.3" y="323.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="445.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.09%)</title><rect x="442.3" y="307.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="445.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.05%)</title><rect x="442.3" y="291.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="445.3" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.05%)</title><rect x="442.3" y="275.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="445.3" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.05%)</title><rect x="442.3" y="259.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="445.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.05%)</title><rect x="442.9" y="291.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="445.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.09%)</title><rect x="443.4" y="355.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="446.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.09%)</title><rect x="443.4" y="339.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="446.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.09%)</title><rect x="443.4" y="323.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="446.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOStatus.normalize (1 samples, 0.05%)</title><rect x="444.5" y="355.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="447.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (522 samples, 23.64%)</title><rect x="445.0" y="355.0" width="279.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="448.0" y="366.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (521 samples, 23.60%)</title><rect x="445.6" y="339.0" width="278.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="448.6" y="350.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.09%)</title><rect x="445.6" y="323.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="448.6" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.09%)</title><rect x="445.6" y="307.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="448.6" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.05%)</title><rect x="446.1" y="291.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="449.1" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.05%)</title><rect x="446.1" y="275.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="449.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.05%)</title><rect x="446.1" y="259.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="449.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (503 samples, 22.78%)</title><rect x="446.6" y="323.0" width="268.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="449.6" y="334.0">sun/nio/ch/IOUtil.writeFromNativeBuf..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (503 samples, 22.78%)</title><rect x="446.6" y="307.0" width="268.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.6" y="318.0">sun/nio/ch/SocketDispatcher.write</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (502 samples, 22.74%)</title><rect x="447.2" y="291.0" width="268.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="450.2" y="302.0">sun/nio/ch/FileDispatcherImpl.write0</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (7 samples, 0.32%)</title><rect x="453.0" y="275.0" width="3.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="456.0" y="286.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.05%)</title><rect x="456.8" y="275.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="459.8" y="286.0"></text>
</g>
<g>
<title>write (483 samples, 21.88%)</title><rect x="457.3" y="275.0" width="258.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="460.3" y="286.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (16 samples, 0.72%)</title><rect x="715.4" y="323.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="718.4" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.27%)</title><rect x="715.4" y="307.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="718.4" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.05%)</title><rect x="718.1" y="291.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="721.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (10 samples, 0.45%)</title><rect x="718.6" y="307.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="721.6" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.23%)</title><rect x="720.2" y="291.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="723.2" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (5 samples, 0.23%)</title><rect x="720.2" y="275.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="723.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.18%)</title><rect x="720.8" y="259.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="723.8" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.05%)</title><rect x="722.9" y="291.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="725.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.05%)</title><rect x="723.5" y="291.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="726.5" y="302.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.18%)</title><rect x="724.0" y="403.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="727.0" y="414.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.05%)</title><rect x="724.5" y="387.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="727.5" y="398.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.09%)</title><rect x="725.1" y="387.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="728.1" y="398.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.05%)</title><rect x="725.6" y="371.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="728.6" y="382.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.05%)</title><rect x="725.6" y="355.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="728.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.09%)</title><rect x="726.1" y="451.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="729.1" y="462.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.05%)</title><rect x="726.1" y="435.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="729.1" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.05%)</title><rect x="726.7" y="435.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="729.7" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.05%)</title><rect x="726.7" y="419.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="729.7" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.isHttp11 (1 samples, 0.05%)</title><rect x="727.2" y="451.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="730.2" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.05%)</title><rect x="727.2" y="435.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="730.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (14 samples, 0.63%)</title><rect x="727.7" y="467.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="730.7" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (13 samples, 0.59%)</title><rect x="727.7" y="451.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.7" y="462.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.18%)</title><rect x="727.7" y="435.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="730.7" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.18%)</title><rect x="727.7" y="419.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="730.7" y="430.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="729.3" y="403.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="732.3" y="414.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (5 samples, 0.23%)</title><rect x="729.9" y="435.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="732.9" y="446.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.14%)</title><rect x="730.9" y="419.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="733.9" y="430.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.14%)</title><rect x="730.9" y="403.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="733.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.05%)</title><rect x="732.5" y="435.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="735.5" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.05%)</title><rect x="732.5" y="419.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="735.5" y="430.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.14%)</title><rect x="733.1" y="435.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="736.1" y="446.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.14%)</title><rect x="733.1" y="419.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="736.1" y="430.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.14%)</title><rect x="733.1" y="403.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="736.1" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.14%)</title><rect x="733.1" y="387.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="736.1" y="398.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.05%)</title><rect x="734.7" y="451.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="737.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igor_manikhin/ServiceImpl.entity (562 samples, 25.45%)</title><rect x="735.2" y="467.0" width="300.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="738.2" y="478.0">ru/mail/polis/service/igor_manikhin/Serv..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (18 samples, 0.82%)</title><rect x="737.3" y="451.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="740.3" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (18 samples, 0.82%)</title><rect x="737.3" y="435.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="740.3" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (18 samples, 0.82%)</title><rect x="737.3" y="419.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="740.3" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (18 samples, 0.82%)</title><rect x="737.3" y="403.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="740.3" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (18 samples, 0.82%)</title><rect x="737.3" y="387.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="740.3" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.09%)</title><rect x="738.9" y="371.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="741.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.32%)</title><rect x="740.0" y="371.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="743.0" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.23%)</title><rect x="741.1" y="355.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="744.1" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="743.2" y="339.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="746.2" y="350.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (6 samples, 0.27%)</title><rect x="743.8" y="371.0" width="3.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="746.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igor_manikhin/ServiceImpl.get (531 samples, 24.05%)</title><rect x="747.0" y="451.0" width="283.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="750.0" y="462.0">ru/mail/polis/service/igor_manikhin/Se..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.09%)</title><rect x="748.0" y="435.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="751.0" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="748.6" y="419.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="751.6" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="748.6" y="403.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="751.6" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="748.6" y="387.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="751.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="748.6" y="371.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="751.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="748.6" y="355.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="751.6" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="748.6" y="339.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="751.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igor_manikhin/ByteConvertor.toArray (4 samples, 0.18%)</title><rect x="749.1" y="435.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="752.1" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.05%)</title><rect x="749.1" y="419.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="752.1" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.05%)</title><rect x="749.1" y="403.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="752.1" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.14%)</title><rect x="749.6" y="419.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="752.6" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.09%)</title><rect x="750.2" y="403.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="753.2" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.09%)</title><rect x="750.2" y="387.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="753.2" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.09%)</title><rect x="750.2" y="371.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="753.2" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.09%)</title><rect x="750.2" y="355.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="753.2" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.09%)</title><rect x="750.2" y="339.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="753.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igor_manikhin/DAOImpl.get (523 samples, 23.69%)</title><rect x="751.2" y="435.0" width="279.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="754.2" y="446.0">ru/mail/polis/dao/igor_manikhin/DAOIm..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.09%)</title><rect x="752.8" y="419.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="755.8" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1745983131.invoke (2 samples, 0.09%)</title><rect x="752.8" y="403.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="755.8" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1689992719.invoke (2 samples, 0.09%)</title><rect x="752.8" y="387.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="755.8" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.09%)</title><rect x="752.8" y="371.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="755.8" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.14%)</title><rect x="753.9" y="419.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="756.9" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.09%)</title><rect x="754.4" y="403.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="757.4" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.05%)</title><rect x="754.4" y="387.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="757.4" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.05%)</title><rect x="754.4" y="371.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="757.4" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.05%)</title><rect x="754.4" y="355.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="757.4" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="754.4" y="339.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="757.4" y="350.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="754.4" y="323.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="757.4" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="754.4" y="307.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="757.4" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.05%)</title><rect x="754.4" y="291.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="757.4" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.05%)</title><rect x="754.4" y="275.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="757.4" y="286.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.05%)</title><rect x="754.4" y="259.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="757.4" y="270.0"></text>
</g>
<g>
<title>G1AllocRegion::retire_internal(HeapRegion*, bool) (1 samples, 0.05%)</title><rect x="754.4" y="243.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="757.4" y="254.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.05%)</title><rect x="754.4" y="227.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="757.4" y="238.0"></text>
</g>
<g>
<title>G1MonitoringSupport::recalculate_eden_size() (1 samples, 0.05%)</title><rect x="754.4" y="211.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="757.4" y="222.0"></text>
</g>
<g>
<title>G1SurvivorRegions::length() const (1 samples, 0.05%)</title><rect x="754.4" y="195.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="757.4" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="755.0" y="387.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="758.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="755.0" y="371.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="758.0" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="755.0" y="355.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="758.0" y="366.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.05%)</title><rect x="755.0" y="339.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="758.0" y="350.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.05%)</title><rect x="755.0" y="323.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="758.0" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (504 samples, 22.83%)</title><rect x="755.5" y="419.0" width="269.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="758.5" y="430.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (504 samples, 22.83%)</title><rect x="755.5" y="403.0" width="269.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="758.5" y="414.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (502 samples, 22.74%)</title><rect x="756.6" y="387.0" width="268.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="759.6" y="398.0">Java_org_rocksdb_RocksDB_get__J_3BII</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (4 samples, 0.18%)</title><rect x="761.9" y="371.0" width="2.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="764.9" y="382.0"></text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (2 samples, 0.09%)</title><rect x="764.1" y="371.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.1" y="382.0"></text>
</g>
<g>
<title>free (2 samples, 0.09%)</title><rect x="765.1" y="371.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="768.1" y="382.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.09%)</title><rect x="766.2" y="371.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="769.2" y="382.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.09%)</title><rect x="767.3" y="371.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="770.3" y="382.0"></text>
</g>
<g>
<title>operator delete(void*) (3 samples, 0.14%)</title><rect x="768.3" y="371.0" width="1.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="771.3" y="382.0"></text>
</g>
<g>
<title>operator delete[](void*) (2 samples, 0.09%)</title><rect x="769.9" y="371.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="772.9" y="382.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.32%)</title><rect x="771.0" y="371.0" width="3.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="774.0" y="382.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (5 samples, 0.23%)</title><rect x="774.8" y="371.0" width="2.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="777.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (6 samples, 0.27%)</title><rect x="777.4" y="371.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="780.4" y="382.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (453 samples, 20.52%)</title><rect x="780.6" y="371.0" width="242.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="783.6" y="382.0">rocksdb_get_helper(JNIEnv_*, roc..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.05%)</title><rect x="782.8" y="355.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="785.8" y="366.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (4 samples, 0.18%)</title><rect x="783.3" y="355.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="786.3" y="366.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.05%)</title><rect x="785.4" y="355.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="788.4" y="366.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (72 samples, 3.26%)</title><rect x="786.0" y="355.0" width="38.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="789.0" y="366.0">Jav..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.05%)</title><rect x="786.5" y="339.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="789.5" y="350.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (3 samples, 0.14%)</title><rect x="787.0" y="339.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="790.0" y="350.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.05%)</title><rect x="788.7" y="339.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="791.7" y="350.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="789.2" y="339.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="792.2" y="350.0"></text>
</g>
<g>
<title>compiler_barrier() (2 samples, 0.09%)</title><rect x="789.7" y="339.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="792.7" y="350.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.18%)</title><rect x="790.8" y="339.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="793.8" y="350.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.05%)</title><rect x="791.3" y="323.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="794.3" y="334.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.05%)</title><rect x="791.3" y="307.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="794.3" y="318.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.05%)</title><rect x="791.9" y="323.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="794.9" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.05%)</title><rect x="792.4" y="323.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="795.4" y="334.0"></text>
</g>
<g>
<title>jni_NewByteArray (45 samples, 2.04%)</title><rect x="792.9" y="339.0" width="24.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="795.9" y="350.0">j..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (5 samples, 0.23%)</title><rect x="794.5" y="323.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="797.5" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.18%)</title><rect x="797.2" y="323.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="800.2" y="334.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.05%)</title><rect x="799.3" y="323.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="802.3" y="334.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (3 samples, 0.14%)</title><rect x="799.9" y="323.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="802.9" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4 samples, 0.18%)</title><rect x="801.5" y="323.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="804.5" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.14%)</title><rect x="802.0" y="307.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="805.0" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.14%)</title><rect x="802.0" y="291.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="805.0" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.09%)</title><rect x="802.5" y="275.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="805.5" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.09%)</title><rect x="802.5" y="259.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="805.5" y="270.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.05%)</title><rect x="802.5" y="243.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="805.5" y="254.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.05%)</title><rect x="803.1" y="243.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="806.1" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (25 samples, 1.13%)</title><rect x="803.6" y="323.0" width="13.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="806.6" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (19 samples, 0.86%)</title><rect x="806.8" y="307.0" width="10.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="809.8" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (19 samples, 0.86%)</title><rect x="806.8" y="291.0" width="10.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="809.8" y="302.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.05%)</title><rect x="808.4" y="275.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="811.4" y="286.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (8 samples, 0.36%)</title><rect x="809.0" y="275.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="812.0" y="286.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (5 samples, 0.23%)</title><rect x="810.6" y="259.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="813.6" y="270.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.05%)</title><rect x="813.2" y="275.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="816.2" y="286.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="813.8" y="275.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="816.8" y="286.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.05%)</title><rect x="814.3" y="275.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="817.3" y="286.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="814.3" y="259.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="817.3" y="270.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.09%)</title><rect x="814.8" y="275.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="817.8" y="286.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.09%)</title><rect x="815.9" y="275.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="818.9" y="286.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (14 samples, 0.63%)</title><rect x="817.0" y="339.0" width="7.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="820.0" y="350.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.05%)</title><rect x="818.6" y="323.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="821.6" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5 samples, 0.23%)</title><rect x="819.1" y="323.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="822.1" y="334.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.05%)</title><rect x="819.1" y="307.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="822.1" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.18%)</title><rect x="819.6" y="307.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="822.6" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.14%)</title><rect x="819.6" y="291.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="822.6" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.09%)</title><rect x="820.2" y="275.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="823.2" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.09%)</title><rect x="820.2" y="259.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="823.2" y="270.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.05%)</title><rect x="820.2" y="243.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="823.2" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="820.7" y="243.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="823.7" y="254.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.05%)</title><rect x="820.7" y="227.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="823.7" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.05%)</title><rect x="821.2" y="291.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="824.2" y="302.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.09%)</title><rect x="821.8" y="323.0" width="1.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="824.8" y="334.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="822.3" y="307.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="825.3" y="318.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.14%)</title><rect x="822.9" y="323.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="825.9" y="334.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.05%)</title><rect x="823.4" y="307.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="826.4" y="318.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::load&lt;oopDesc*&gt;(void*) (1 samples, 0.05%)</title><rect x="823.9" y="307.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="826.9" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.05%)</title><rect x="824.5" y="355.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="827.5" y="366.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.09%)</title><rect x="825.0" y="355.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="828.0" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.05%)</title><rect x="826.1" y="355.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="829.1" y="366.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.05%)</title><rect x="826.6" y="355.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="829.6" y="366.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.14%)</title><rect x="827.1" y="355.0" width="1.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="830.1" y="366.0"></text>
</g>
<g>
<title>free (15 samples, 0.68%)</title><rect x="828.7" y="355.0" width="8.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="831.7" y="366.0"></text>
</g>
<g>
<title>szone_size (9 samples, 0.41%)</title><rect x="831.9" y="339.0" width="4.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="834.9" y="350.0"></text>
</g>
<g>
<title>tiny_size (9 samples, 0.41%)</title><rect x="831.9" y="323.0" width="4.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="834.9" y="334.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.09%)</title><rect x="836.7" y="355.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="839.7" y="366.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.05%)</title><rect x="837.3" y="339.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="840.3" y="350.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.05%)</title><rect x="837.3" y="323.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="840.3" y="334.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (15 samples, 0.68%)</title><rect x="837.8" y="355.0" width="8.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="840.8" y="366.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (4 samples, 0.18%)</title><rect x="842.1" y="339.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="845.1" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.14%)</title><rect x="844.2" y="339.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="847.2" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.14%)</title><rect x="844.2" y="323.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="847.2" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.14%)</title><rect x="844.2" y="307.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="847.2" y="318.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.14%)</title><rect x="844.2" y="291.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="847.2" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.14%)</title><rect x="844.2" y="275.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="847.2" y="286.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.05%)</title><rect x="844.8" y="259.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="847.8" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="845.3" y="259.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="848.3" y="270.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.05%)</title><rect x="845.3" y="243.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="848.3" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (32 samples, 1.45%)</title><rect x="845.8" y="355.0" width="17.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="848.8" y="366.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.05%)</title><rect x="851.7" y="339.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="854.7" y="350.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.05%)</title><rect x="851.7" y="323.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="854.7" y="334.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.05%)</title><rect x="852.2" y="339.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="855.2" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.05%)</title><rect x="852.8" y="339.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="855.8" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.27%)</title><rect x="853.3" y="339.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="856.3" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.05%)</title><rect x="853.3" y="323.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="856.3" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.23%)</title><rect x="853.8" y="323.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="856.8" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.18%)</title><rect x="854.4" y="307.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="857.4" y="318.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.18%)</title><rect x="854.4" y="291.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="857.4" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.14%)</title><rect x="854.4" y="275.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="857.4" y="286.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.05%)</title><rect x="854.4" y="259.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="857.4" y="270.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.05%)</title><rect x="854.9" y="259.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="857.9" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="855.5" y="259.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="858.5" y="270.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.05%)</title><rect x="855.5" y="243.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="858.5" y="254.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="855.5" y="227.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="858.5" y="238.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.05%)</title><rect x="856.0" y="275.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="859.0" y="286.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.14%)</title><rect x="856.5" y="339.0" width="1.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="859.5" y="350.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.27%)</title><rect x="858.1" y="339.0" width="3.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="861.1" y="350.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.09%)</title><rect x="860.3" y="323.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="863.3" y="334.0"></text>
</g>
<g>
<title>Chunk::next() const (2 samples, 0.09%)</title><rect x="860.3" y="307.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="863.3" y="318.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.05%)</title><rect x="861.3" y="339.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="864.3" y="350.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.05%)</title><rect x="861.3" y="323.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="864.3" y="334.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (2 samples, 0.09%)</title><rect x="861.9" y="339.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="864.9" y="350.0"></text>
</g>
<g>
<title>jni_NewByteArray (3 samples, 0.14%)</title><rect x="862.9" y="355.0" width="1.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="865.9" y="366.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.14%)</title><rect x="864.5" y="355.0" width="1.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="867.5" y="366.0"></text>
</g>
<g>
<title>malloc (4 samples, 0.18%)</title><rect x="866.1" y="355.0" width="2.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="869.1" y="366.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.05%)</title><rect x="868.3" y="355.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="871.3" y="366.0"></text>
</g>
<g>
<title>operator new(unsigned long) (21 samples, 0.95%)</title><rect x="868.8" y="355.0" width="11.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="871.8" y="366.0"></text>
</g>
<g>
<title>malloc (21 samples, 0.95%)</title><rect x="868.8" y="339.0" width="11.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="871.8" y="350.0"></text>
</g>
<g>
<title>malloc_zone_malloc (19 samples, 0.86%)</title><rect x="869.3" y="323.0" width="10.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="872.3" y="334.0"></text>
</g>
<g>
<title>default_zone_malloc (7 samples, 0.32%)</title><rect x="870.4" y="307.0" width="3.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="873.4" y="318.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (9 samples, 0.41%)</title><rect x="874.2" y="307.0" width="4.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="877.2" y="318.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (8 samples, 0.36%)</title><rect x="874.7" y="291.0" width="4.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="877.7" y="302.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="879.0" y="307.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="882.0" y="318.0"></text>
</g>
<g>
<title>szone_malloc (1 samples, 0.05%)</title><rect x="879.5" y="323.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="882.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (256 samples, 11.59%)</title><rect x="880.0" y="355.0" width="136.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="883.0" y="366.0">rocksdb::Compacte..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.05%)</title><rect x="880.0" y="339.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="883.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (255 samples, 11.55%)</title><rect x="880.6" y="339.0" width="136.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="883.6" y="350.0">rocksdb::Compacte..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (252 samples, 11.41%)</title><rect x="881.6" y="323.0" width="134.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="884.6" y="334.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (250 samples, 11.32%)</title><rect x="882.7" y="307.0" width="133.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="885.7" y="318.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.14%)</title><rect x="883.2" y="291.0" width="1.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="886.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (1 samples, 0.05%)</title><rect x="884.8" y="291.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="887.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (3 samples, 0.14%)</title><rect x="885.4" y="291.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="888.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (236 samples, 10.69%)</title><rect x="887.0" y="291.0" width="126.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="890.0" y="302.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (9 samples, 0.41%)</title><rect x="895.0" y="275.0" width="4.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="898.0" y="286.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="899.8" y="275.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="902.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (15 samples, 0.68%)</title><rect x="900.3" y="275.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="903.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (5 samples, 0.23%)</title><rect x="904.1" y="259.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="907.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.05%)</title><rect x="906.2" y="243.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="909.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (3 samples, 0.14%)</title><rect x="906.8" y="259.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="909.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.09%)</title><rect x="907.3" y="243.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="910.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (6 samples, 0.27%)</title><rect x="908.4" y="275.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="911.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (3 samples, 0.14%)</title><rect x="908.9" y="259.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="911.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.09%)</title><rect x="910.5" y="259.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="913.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.05%)</title><rect x="911.0" y="243.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="914.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.05%)</title><rect x="911.6" y="275.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="914.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long, rocksdb::Slice const*) (1 samples, 0.05%)</title><rect x="912.1" y="275.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="915.1" y="286.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="912.1" y="259.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="915.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (149 samples, 6.75%)</title><rect x="912.6" y="275.0" width="79.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="915.6" y="286.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.14%)</title><rect x="918.5" y="259.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="921.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.05%)</title><rect x="920.1" y="259.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="923.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.05%)</title><rect x="920.7" y="259.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="923.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (133 samples, 6.02%)</title><rect x="921.2" y="259.0" width="71.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="924.2" y="270.0">rocksdb:..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.09%)</title><rect x="951.6" y="243.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="954.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (17 samples, 0.77%)</title><rect x="952.7" y="243.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="955.7" y="254.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (3 samples, 0.14%)</title><rect x="956.5" y="227.0" width="1.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="959.5" y="238.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.09%)</title><rect x="958.1" y="227.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="961.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.05%)</title><rect x="959.1" y="227.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="962.1" y="238.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.05%)</title><rect x="959.1" y="211.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="962.1" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.09%)</title><rect x="959.7" y="227.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="962.7" y="238.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="960.2" y="211.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="963.2" y="222.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (2 samples, 0.09%)</title><rect x="960.7" y="227.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="963.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (44 samples, 1.99%)</title><rect x="961.8" y="243.0" width="23.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="964.8" y="254.0">r..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (4 samples, 0.18%)</title><rect x="969.3" y="227.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="972.3" y="238.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.14%)</title><rect x="971.4" y="227.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="974.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (21 samples, 0.95%)</title><rect x="973.0" y="227.0" width="11.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="976.0" y="238.0"></text>
</g>
<g>
<title>_platform_memcmp (12 samples, 0.54%)</title><rect x="977.8" y="211.0" width="6.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="980.8" y="222.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.09%)</title><rect x="984.2" y="227.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="987.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (6 samples, 0.27%)</title><rect x="985.3" y="243.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::UnPackSequenceAndType(unsigned long long, unsigned long long*, rocksdb::ValueType*) (2 samples, 0.09%)</title><rect x="988.5" y="243.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="991.5" y="254.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (5 samples, 0.23%)</title><rect x="989.6" y="243.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="992.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.05%)</title><rect x="992.3" y="275.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.05%)</title><rect x="992.8" y="275.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="995.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.09%)</title><rect x="993.3" y="275.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="996.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (34 samples, 1.54%)</title><rect x="994.4" y="275.0" width="18.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="997.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (2 samples, 0.09%)</title><rect x="994.4" y="259.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="997.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::FindFile(rocksdb::InternalKeyComparator const&amp;, rocksdb::LevelFilesBrief const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.05%)</title><rect x="994.4" y="243.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="997.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.05%)</title><rect x="994.4" y="227.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="997.4" y="238.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.05%)</title><rect x="994.9" y="243.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="997.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (32 samples, 1.45%)</title><rect x="995.5" y="259.0" width="17.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="998.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (30 samples, 1.36%)</title><rect x="995.5" y="243.0" width="16.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="998.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (2 samples, 0.09%)</title><rect x="996.0" y="227.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="999.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (1 samples, 0.05%)</title><rect x="996.5" y="211.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="999.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (1 samples, 0.05%)</title><rect x="996.5" y="195.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="999.5" y="206.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.05%)</title><rect x="996.5" y="179.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="999.5" y="190.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.05%)</title><rect x="996.5" y="163.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="999.5" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.05%)</title><rect x="996.5" y="147.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="999.5" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="996.5" y="131.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="999.5" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="996.5" y="115.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="999.5" y="126.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (1 samples, 0.05%)</title><rect x="996.5" y="99.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="999.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (2 samples, 0.09%)</title><rect x="997.1" y="227.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1000.1" y="238.0"></text>
</g>
<g>
<title>free (1 samples, 0.05%)</title><rect x="997.6" y="211.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1000.6" y="222.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.05%)</title><rect x="997.6" y="195.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1000.6" y="206.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.05%)</title><rect x="997.6" y="179.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1000.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (16 samples, 0.72%)</title><rect x="998.1" y="227.0" width="8.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (16 samples, 0.72%)</title><rect x="998.1" y="211.0" width="8.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1001.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (16 samples, 0.72%)</title><rect x="998.1" y="195.0" width="8.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.1" y="206.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.05%)</title><rect x="999.2" y="179.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1002.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (4 samples, 0.18%)</title><rect x="999.7" y="179.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1002.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetShard(int) (1 samples, 0.05%)</title><rect x="999.7" y="163.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1002.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (1 samples, 0.05%)</title><rect x="1000.3" y="163.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1003.3" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.05%)</title><rect x="1000.3" y="147.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1003.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Insert(rocksdb::Slice const&amp;, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (1 samples, 0.05%)</title><rect x="1000.8" y="163.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1003.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Insert(rocksdb::Slice const&amp;, unsigned int, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (1 samples, 0.05%)</title><rect x="1000.8" y="147.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1003.8" y="158.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.05%)</title><rect x="1000.8" y="131.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1003.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (1 samples, 0.05%)</title><rect x="1001.3" y="163.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1004.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (1 samples, 0.05%)</title><rect x="1001.9" y="179.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1004.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (7 samples, 0.32%)</title><rect x="1002.4" y="179.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1005.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::RandomAccessFileReader::Read(rocksdb::IOOptions const&amp;, unsigned long long, unsigned long, rocksdb::Slice*, char*, std::__1::unique_ptr&lt;char [], std::__1::default_delete&lt;char []&gt; &gt;*, bool) const (2 samples, 0.09%)</title><rect x="1002.4" y="163.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1005.4" y="174.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.09%)</title><rect x="1002.4" y="147.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1005.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (4 samples, 0.18%)</title><rect x="1003.5" y="163.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1006.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (4 samples, 0.18%)</title><rect x="1003.5" y="147.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1006.5" y="158.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (4 samples, 0.18%)</title><rect x="1003.5" y="131.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1006.5" y="142.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (4 samples, 0.18%)</title><rect x="1003.5" y="115.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1006.5" y="126.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (4 samples, 0.18%)</title><rect x="1003.5" y="99.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1006.5" y="110.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (4 samples, 0.18%)</title><rect x="1003.5" y="83.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1006.5" y="94.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (4 samples, 0.18%)</title><rect x="1003.5" y="67.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1006.5" y="78.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (2 samples, 0.09%)</title><rect x="1004.6" y="51.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1007.6" y="62.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (2 samples, 0.09%)</title><rect x="1004.6" y="35.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1007.6" y="46.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (1 samples, 0.05%)</title><rect x="1005.6" y="163.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1008.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetCharge(rocksdb::Cache::Handle*) const (1 samples, 0.05%)</title><rect x="1006.2" y="179.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1009.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (2 samples, 0.09%)</title><rect x="1006.7" y="227.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1009.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (2 samples, 0.09%)</title><rect x="1006.7" y="211.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1009.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.05%)</title><rect x="1007.2" y="195.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1010.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (1 samples, 0.05%)</title><rect x="1007.8" y="227.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1010.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.05%)</title><rect x="1007.8" y="211.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1010.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (6 samples, 0.27%)</title><rect x="1008.3" y="227.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1011.3" y="238.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (1 samples, 0.05%)</title><rect x="1008.3" y="211.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1011.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (2 samples, 0.09%)</title><rect x="1008.8" y="211.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1011.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (3 samples, 0.14%)</title><rect x="1009.9" y="211.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1012.9" y="222.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (1 samples, 0.05%)</title><rect x="1011.0" y="195.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1014.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (1 samples, 0.05%)</title><rect x="1011.5" y="243.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1014.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (1 samples, 0.05%)</title><rect x="1012.0" y="243.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1015.0" y="254.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.05%)</title><rect x="1012.6" y="275.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1015.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (1 samples, 0.05%)</title><rect x="1013.1" y="291.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1016.1" y="302.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (5 samples, 0.23%)</title><rect x="1013.6" y="291.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1016.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (1 samples, 0.05%)</title><rect x="1016.3" y="323.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1019.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (8 samples, 0.36%)</title><rect x="1016.8" y="355.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1019.8" y="366.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (2 samples, 0.09%)</title><rect x="1021.1" y="355.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1024.1" y="366.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.05%)</title><rect x="1022.2" y="355.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1025.2" y="366.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (4 samples, 0.18%)</title><rect x="1022.7" y="371.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1025.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igor_manikhin/ByteConvertor.toUnsignedArray (11 samples, 0.50%)</title><rect x="1024.9" y="419.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1027.9" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.05%)</title><rect x="1025.9" y="403.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1028.9" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (8 samples, 0.36%)</title><rect x="1026.5" y="403.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1029.5" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.32%)</title><rect x="1027.0" y="387.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1030.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.32%)</title><rect x="1027.0" y="371.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1030.0" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.32%)</title><rect x="1027.0" y="355.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1030.0" y="366.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.18%)</title><rect x="1027.5" y="339.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1030.5" y="350.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (4 samples, 0.18%)</title><rect x="1027.5" y="323.0" width="2.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1030.5" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.09%)</title><rect x="1029.7" y="339.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1032.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/igor_manikhin/ServiceImpl.put (9 samples, 0.41%)</title><rect x="1030.7" y="451.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1033.7" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.14%)</title><rect x="1030.7" y="435.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1033.7" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.14%)</title><rect x="1030.7" y="419.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1033.7" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.14%)</title><rect x="1030.7" y="403.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1033.7" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.14%)</title><rect x="1030.7" y="387.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1033.7" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1031.8" y="371.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1034.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igor_manikhin/DAOImpl.upsert (6 samples, 0.27%)</title><rect x="1032.3" y="435.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1035.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igor_manikhin/ByteConvertor.toArray (3 samples, 0.14%)</title><rect x="1032.3" y="419.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1035.3" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.14%)</title><rect x="1032.3" y="403.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1035.3" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.09%)</title><rect x="1032.9" y="387.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1035.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/igor_manikhin/ByteConvertor.toUnsignedArray (3 samples, 0.14%)</title><rect x="1033.9" y="419.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1036.9" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.05%)</title><rect x="1035.0" y="403.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1038.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (7 samples, 0.32%)</title><rect x="1035.6" y="483.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1038.6" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.32%)</title><rect x="1035.6" y="467.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1038.6" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.18%)</title><rect x="1035.6" y="451.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1038.6" y="462.0"></text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.18%)</title><rect x="1035.6" y="435.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1038.6" y="446.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.09%)</title><rect x="1036.6" y="419.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1039.6" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.14%)</title><rect x="1037.7" y="451.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1040.7" y="462.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.05%)</title><rect x="1037.7" y="435.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1040.7" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.05%)</title><rect x="1037.7" y="419.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1040.7" y="430.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1037.7" y="403.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1040.7" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2 samples, 0.09%)</title><rect x="1038.2" y="435.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1041.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (14 samples, 0.63%)</title><rect x="1039.3" y="483.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1042.3" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (14 samples, 0.63%)</title><rect x="1039.3" y="467.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1042.3" y="478.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.05%)</title><rect x="1039.3" y="451.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1042.3" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (13 samples, 0.59%)</title><rect x="1039.8" y="451.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1042.8" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 0.50%)</title><rect x="1040.4" y="435.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1043.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3 samples, 0.14%)</title><rect x="1044.6" y="419.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1047.6" y="430.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="1046.2" y="435.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1049.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (21 samples, 0.95%)</title><rect x="1046.8" y="515.0" width="11.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1049.8" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.45%)</title><rect x="1048.9" y="499.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1051.9" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.41%)</title><rect x="1049.4" y="483.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1052.4" y="494.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1053.7" y="467.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1056.7" y="478.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1053.7" y="451.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1056.7" y="462.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.05%)</title><rect x="1053.7" y="435.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1056.7" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (7 samples, 0.32%)</title><rect x="1054.3" y="499.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1057.3" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.14%)</title><rect x="1056.4" y="483.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1059.4" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (3 samples, 0.14%)</title><rect x="1058.0" y="515.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1061.0" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.14%)</title><rect x="1058.0" y="499.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1061.0" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.36%)</title><rect x="1059.6" y="515.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1062.6" y="526.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.05%)</title><rect x="1060.7" y="499.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1063.7" y="510.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.23%)</title><rect x="1061.2" y="499.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1064.2" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.23%)</title><rect x="1061.2" y="483.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1064.2" y="494.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.05%)</title><rect x="1061.2" y="467.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1064.2" y="478.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.18%)</title><rect x="1061.7" y="467.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1064.7" y="478.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.18%)</title><rect x="1061.7" y="451.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1064.7" y="462.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (4 samples, 0.18%)</title><rect x="1061.7" y="435.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1064.7" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeaderCount (4 samples, 0.18%)</title><rect x="1063.9" y="515.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1066.9" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2 samples, 0.09%)</title><rect x="1064.9" y="499.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1067.9" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.41%)</title><rect x="1066.0" y="515.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1069.0" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.41%)</title><rect x="1066.0" y="499.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1069.0" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="1069.8" y="483.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1072.8" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1069.8" y="467.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.8" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="1069.8" y="451.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1072.8" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="1069.8" y="435.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1072.8" y="446.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1069.8" y="419.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1072.8" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="1069.8" y="403.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1072.8" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.05%)</title><rect x="1069.8" y="387.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.8" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.05%)</title><rect x="1069.8" y="371.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1072.8" y="382.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.05%)</title><rect x="1069.8" y="355.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1072.8" y="366.0"></text>
</g>
<g>
<title>G1AllocRegion::retire_internal(HeapRegion*, bool) (1 samples, 0.05%)</title><rect x="1069.8" y="339.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1072.8" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.05%)</title><rect x="1069.8" y="323.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1072.8" y="334.0"></text>
</g>
<g>
<title>G1CollectionSet::add_young_region_common(HeapRegion*) (1 samples, 0.05%)</title><rect x="1069.8" y="307.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1072.8" y="318.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.05%)</title><rect x="1069.8" y="291.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1072.8" y="302.0"></text>
</g>
<g>
<title>G1Analytics::predict_card_num(unsigned long, bool) const (1 samples, 0.05%)</title><rect x="1069.8" y="275.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1072.8" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.05%)</title><rect x="1070.3" y="483.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1073.3" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (191 samples, 8.65%)</title><rect x="1070.8" y="531.0" width="102.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1073.8" y="542.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (191 samples, 8.65%)</title><rect x="1070.8" y="515.0" width="102.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1073.8" y="526.0">one/nio/net/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.23%)</title><rect x="1071.4" y="499.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1074.4" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.23%)</title><rect x="1071.4" y="483.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1074.4" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.23%)</title><rect x="1071.4" y="467.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1074.4" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.18%)</title><rect x="1071.9" y="451.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1074.9" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="1071.9" y="435.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1074.9" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.05%)</title><rect x="1071.9" y="419.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1074.9" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="1071.9" y="403.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1074.9" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.14%)</title><rect x="1072.4" y="435.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1075.4" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.14%)</title><rect x="1072.4" y="419.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1075.4" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.14%)</title><rect x="1072.4" y="403.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1075.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (185 samples, 8.38%)</title><rect x="1074.0" y="499.0" width="98.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1077.0" y="510.0">sun/nio/ch/S..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (17 samples, 0.77%)</title><rect x="1075.1" y="483.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1078.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (10 samples, 0.45%)</title><rect x="1075.1" y="467.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1078.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (10 samples, 0.45%)</title><rect x="1075.1" y="451.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1078.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (10 samples, 0.45%)</title><rect x="1075.1" y="435.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1078.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.14%)</title><rect x="1075.6" y="419.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1078.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.27%)</title><rect x="1077.2" y="419.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1080.2" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (6 samples, 0.27%)</title><rect x="1077.2" y="403.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1080.2" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (6 samples, 0.27%)</title><rect x="1077.2" y="387.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1080.2" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.05%)</title><rect x="1080.4" y="467.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1083.4" y="478.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.23%)</title><rect x="1081.0" y="467.0" width="2.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1084.0" y="478.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.05%)</title><rect x="1083.7" y="467.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1086.7" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (161 samples, 7.29%)</title><rect x="1084.2" y="483.0" width="86.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1087.2" y="494.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.05%)</title><rect x="1084.2" y="467.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1087.2" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (160 samples, 7.25%)</title><rect x="1084.7" y="467.0" width="85.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1087.7" y="478.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (157 samples, 7.11%)</title><rect x="1084.7" y="451.0" width="83.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1087.7" y="462.0">sun/nio/c..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.09%)</title><rect x="1085.3" y="435.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1088.3" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.09%)</title><rect x="1085.3" y="419.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1088.3" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.09%)</title><rect x="1085.3" y="403.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1088.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (154 samples, 6.97%)</title><rect x="1086.3" y="435.0" width="82.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1089.3" y="446.0">sun/nio/c..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (154 samples, 6.97%)</title><rect x="1086.3" y="419.0" width="82.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1089.3" y="430.0">sun/nio/c..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.18%)</title><rect x="1091.7" y="403.0" width="2.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1094.7" y="414.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.14%)</title><rect x="1092.2" y="387.0" width="1.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1095.2" y="398.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.05%)</title><rect x="1093.8" y="403.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1096.8" y="414.0"></text>
</g>
<g>
<title>rpc_errlist (139 samples, 6.30%)</title><rect x="1094.3" y="403.0" width="74.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1097.3" y="414.0">rpc_errl..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.14%)</title><rect x="1168.6" y="451.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1171.6" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.05%)</title><rect x="1169.7" y="435.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1172.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (5 samples, 0.23%)</title><rect x="1170.2" y="483.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1173.2" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureOpenAndConnected (5 samples, 0.23%)</title><rect x="1170.2" y="467.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1173.2" y="478.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.14%)</title><rect x="1172.9" y="547.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.9" y="558.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.09%)</title><rect x="1173.4" y="531.0" width="1.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1176.4" y="542.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.09%)</title><rect x="1173.4" y="515.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1176.4" y="526.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.05%)</title><rect x="1174.0" y="499.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1177.0" y="510.0"></text>
</g>
<g>
<title>thread_start (29 samples, 1.31%)</title><rect x="1174.5" y="579.0" width="15.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1177.5" y="590.0"></text>
</g>
<g>
<title>_pthread_start (29 samples, 1.31%)</title><rect x="1174.5" y="563.0" width="15.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1177.5" y="574.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (29 samples, 1.31%)</title><rect x="1174.5" y="547.0" width="15.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1177.5" y="558.0"></text>
</g>
<g>
<title>Thread::call_run() (29 samples, 1.31%)</title><rect x="1174.5" y="531.0" width="15.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.5" y="542.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (14 samples, 0.63%)</title><rect x="1174.5" y="515.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="526.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (14 samples, 0.63%)</title><rect x="1174.5" y="499.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.5" y="510.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (9 samples, 0.41%)</title><rect x="1174.5" y="483.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.5" y="494.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (9 samples, 0.41%)</title><rect x="1174.5" y="467.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.5" y="478.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (9 samples, 0.41%)</title><rect x="1174.5" y="451.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="462.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (3 samples, 0.14%)</title><rect x="1175.6" y="435.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.6" y="446.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (3 samples, 0.14%)</title><rect x="1175.6" y="419.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.6" y="430.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (2 samples, 0.09%)</title><rect x="1175.6" y="403.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.6" y="414.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (2 samples, 0.09%)</title><rect x="1175.6" y="387.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.6" y="398.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.05%)</title><rect x="1176.1" y="371.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.1" y="382.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.05%)</title><rect x="1176.6" y="403.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.6" y="414.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="1177.2" y="435.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.2" y="446.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="1177.2" y="419.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.2" y="430.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.05%)</title><rect x="1177.2" y="403.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="414.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (3 samples, 0.14%)</title><rect x="1177.7" y="435.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="446.0"></text>
</g>
<g>
<title>OtherRegionsTable::occ_fine() const (2 samples, 0.09%)</title><rect x="1178.2" y="419.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.2" y="430.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (5 samples, 0.23%)</title><rect x="1179.3" y="483.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.3" y="494.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.23%)</title><rect x="1179.3" y="467.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="478.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (5 samples, 0.23%)</title><rect x="1179.3" y="451.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="462.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (5 samples, 0.23%)</title><rect x="1179.3" y="435.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="446.0"></text>
</g>
<g>
<title>__gettimeofday (2 samples, 0.09%)</title><rect x="1179.3" y="419.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1182.3" y="430.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.14%)</title><rect x="1180.4" y="419.0" width="1.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1183.4" y="430.0"></text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 0.45%)</title><rect x="1182.0" y="515.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.0" y="526.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 0.36%)</title><rect x="1182.0" y="499.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.0" y="510.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.27%)</title><rect x="1182.0" y="483.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="494.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.09%)</title><rect x="1182.0" y="467.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.0" y="478.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (2 samples, 0.09%)</title><rect x="1182.0" y="451.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1185.0" y="462.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.18%)</title><rect x="1183.1" y="467.0" width="2.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1186.1" y="478.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::state_for_worker(unsigned int) (1 samples, 0.05%)</title><rect x="1185.2" y="483.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.2" y="494.0"></text>
</g>
<g>
<title>G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, unsigned int, unsigned long) (1 samples, 0.05%)</title><rect x="1185.2" y="467.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.2" y="478.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1185.2" y="451.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="462.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="1185.2" y="435.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.2" y="446.0"></text>
</g>
<g>
<title>os::malloc(unsigned long, MemoryType, NativeCallStack const&amp;) (1 samples, 0.05%)</title><rect x="1185.2" y="419.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="430.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.05%)</title><rect x="1185.2" y="403.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1188.2" y="414.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.05%)</title><rect x="1185.2" y="387.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1188.2" y="398.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="1185.2" y="371.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1188.2" y="382.0"></text>
</g>
<g>
<title>small_malloc_should_clear (1 samples, 0.05%)</title><rect x="1185.2" y="355.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1188.2" y="366.0"></text>
</g>
<g>
<title>small_malloc_from_free_list (1 samples, 0.05%)</title><rect x="1185.2" y="339.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1188.2" y="350.0"></text>
</g>
<g>
<title>small_free_list_remove_ptr (1 samples, 0.05%)</title><rect x="1185.2" y="323.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1188.2" y="334.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.05%)</title><rect x="1185.7" y="483.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.7" y="494.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.05%)</title><rect x="1185.7" y="467.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.7" y="478.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.05%)</title><rect x="1185.7" y="451.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="462.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.05%)</title><rect x="1185.7" y="435.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.7" y="446.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.05%)</title><rect x="1185.7" y="419.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.7" y="430.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (1 samples, 0.05%)</title><rect x="1185.7" y="403.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.7" y="414.0"></text>
</g>
<g>
<title>Method::bcp_from(unsigned char*) const (1 samples, 0.05%)</title><rect x="1185.7" y="387.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.7" y="398.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.05%)</title><rect x="1186.3" y="499.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.3" y="510.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.05%)</title><rect x="1186.3" y="483.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.3" y="494.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.05%)</title><rect x="1186.3" y="467.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.3" y="478.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.05%)</title><rect x="1186.3" y="451.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.3" y="462.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.05%)</title><rect x="1186.3" y="435.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.3" y="446.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.05%)</title><rect x="1186.3" y="419.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.3" y="430.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.05%)</title><rect x="1186.3" y="403.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.3" y="414.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.05%)</title><rect x="1186.3" y="387.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.3" y="398.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.05%)</title><rect x="1186.8" y="499.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.8" y="510.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.05%)</title><rect x="1186.8" y="483.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1189.8" y="494.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.05%)</title><rect x="1187.3" y="515.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.3" y="526.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.05%)</title><rect x="1187.3" y="499.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.3" y="510.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.05%)</title><rect x="1187.3" y="483.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1190.3" y="494.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.05%)</title><rect x="1187.3" y="467.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1190.3" y="478.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.05%)</title><rect x="1187.3" y="451.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.3" y="462.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.05%)</title><rect x="1187.3" y="435.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1190.3" y="446.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.05%)</title><rect x="1187.3" y="419.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.3" y="430.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.05%)</title><rect x="1187.3" y="403.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1190.3" y="414.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.05%)</title><rect x="1187.9" y="515.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.9" y="526.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.05%)</title><rect x="1187.9" y="499.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.9" y="510.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.05%)</title><rect x="1187.9" y="483.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.9" y="494.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.05%)</title><rect x="1187.9" y="467.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.9" y="478.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_prologue() (1 samples, 0.05%)</title><rect x="1187.9" y="451.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.9" y="462.0"></text>
</g>
<g>
<title>WatcherThread::run() (3 samples, 0.14%)</title><rect x="1188.4" y="515.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.4" y="526.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (3 samples, 0.14%)</title><rect x="1188.4" y="499.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.4" y="510.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.14%)</title><rect x="1188.4" y="483.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.4" y="494.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.14%)</title><rect x="1188.4" y="467.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.4" y="478.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.14%)</title><rect x="1188.4" y="451.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.4" y="462.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.05%)</title><rect x="1188.4" y="435.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1191.4" y="446.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.09%)</title><rect x="1188.9" y="435.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1191.9" y="446.0"></text>
</g>
</g>
</svg>
