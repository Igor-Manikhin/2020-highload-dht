<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1894" onload="init(evt)" viewBox="0 0 1200 1894" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1877"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1877"> </text>
<g id="frames">
<g>
<title>all (8,398 samples, 100.00%)</title><rect x="10.0" y="1843.0" width="1180.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.0" y="1854.0">all</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (3 samples, 0.04%)</title><rect x="10.0" y="1827.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (7 samples, 0.08%)</title><rect x="10.7" y="1827.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.7" y="1838.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.02%)</title><rect x="10.7" y="1811.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.7" y="1822.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="10.7" y="1795.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.7" y="1806.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (4 samples, 0.05%)</title><rect x="11.0" y="1811.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.0" y="1822.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (4 samples, 0.05%)</title><rect x="11.0" y="1795.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.0" y="1806.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::call_event(Method*, CompLevel, JavaThread*) (4 samples, 0.05%)</title><rect x="11.0" y="1779.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.0" y="1790.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::common(bool (TieredThresholdPolicy::*)(int, int, CompLevel, Method*), Method*, CompLevel, bool) (2 samples, 0.02%)</title><rect x="11.3" y="1763.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.3" y="1774.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::loop_predicate(int, int, CompLevel, Method*) (2 samples, 0.02%)</title><rect x="11.3" y="1747.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.3" y="1758.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (2 samples, 0.02%)</title><rect x="11.7" y="1827.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.7" y="1838.0"></text>
</g>
<g>
<title>exception_handler_for_pc_helper(JavaThread*, oopDesc*, unsigned char*, nmethod*&amp;) [clone .constprop.0] (2 samples, 0.02%)</title><rect x="11.7" y="1811.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="14.7" y="1822.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (4 samples, 0.05%)</title><rect x="12.0" y="1827.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.0" y="1838.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.05%)</title><rect x="12.0" y="1811.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="15.0" y="1822.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (4 samples, 0.05%)</title><rect x="12.0" y="1795.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.0" y="1806.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.05%)</title><rect x="12.0" y="1779.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="15.0" y="1790.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (20 samples, 0.24%)</title><rect x="12.5" y="1827.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="15.5" y="1838.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (19 samples, 0.23%)</title><rect x="12.7" y="1811.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.7" y="1822.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (15 samples, 0.18%)</title><rect x="13.2" y="1795.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="16.2" y="1806.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (7 samples, 0.08%)</title><rect x="13.7" y="1779.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.7" y="1790.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.04%)</title><rect x="14.6" y="1779.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="17.6" y="1790.0"></text>
</g>
<g>
<title>[no_Java_frame] (3 samples, 0.04%)</title><rect x="15.3" y="1827.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="18.3" y="1838.0"></text>
</g>
<g>
<title>[not_walkable_Java] (7 samples, 0.08%)</title><rect x="15.8" y="1827.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="18.8" y="1838.0"></text>
</g>
<g>
<title>Method::from_compiled_entry_no_trampoline() const (2 samples, 0.02%)</title><rect x="15.8" y="1811.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="18.8" y="1822.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (2 samples, 0.02%)</title><rect x="16.0" y="1811.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="19.0" y="1822.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.30%)</title><rect x="16.7" y="1827.0" width="3.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="19.7" y="1838.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (15 samples, 0.18%)</title><rect x="16.7" y="1811.0" width="2.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="19.7" y="1822.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (5 samples, 0.06%)</title><rect x="19.3" y="1811.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="22.3" y="1822.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.05%)</title><rect x="19.4" y="1795.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="22.4" y="1806.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.05%)</title><rect x="19.4" y="1779.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="22.4" y="1790.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.05%)</title><rect x="19.4" y="1763.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="22.4" y="1774.0"></text>
</g>
<g>
<title>get_timespec64 (3 samples, 0.04%)</title><rect x="19.6" y="1747.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="22.6" y="1758.0"></text>
</g>
<g>
<title>copy_user_generic_string (2 samples, 0.02%)</title><rect x="19.7" y="1731.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="22.7" y="1742.0"></text>
</g>
<g>
<title>read (2 samples, 0.02%)</title><rect x="20.0" y="1811.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="23.0" y="1822.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="20.0" y="1795.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="23.0" y="1806.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="20.0" y="1779.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="23.0" y="1790.0"></text>
</g>
<g>
<title>__x64_sys_read (2 samples, 0.02%)</title><rect x="20.0" y="1763.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="23.0" y="1774.0"></text>
</g>
<g>
<title>ksys_read (2 samples, 0.02%)</title><rect x="20.0" y="1747.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="23.0" y="1758.0"></text>
</g>
<g>
<title>vfs_read (2 samples, 0.02%)</title><rect x="20.0" y="1731.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="23.0" y="1742.0"></text>
</g>
<g>
<title>__vfs_read (2 samples, 0.02%)</title><rect x="20.0" y="1715.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="23.0" y="1726.0"></text>
</g>
<g>
<title>kernfs_fop_read (2 samples, 0.02%)</title><rect x="20.0" y="1699.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="23.0" y="1710.0"></text>
</g>
<g>
<title>seq_read (2 samples, 0.02%)</title><rect x="20.0" y="1683.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="23.0" y="1694.0"></text>
</g>
<g>
<title>[unknown_Java] (46 samples, 0.55%)</title><rect x="20.3" y="1827.0" width="6.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="23.3" y="1838.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (2 samples, 0.02%)</title><rect x="20.3" y="1811.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="23.3" y="1822.0"></text>
</g>
<g>
<title>I2C/C2I adapters (2 samples, 0.02%)</title><rect x="20.5" y="1811.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.5" y="1822.0"></text>
</g>
<g>
<title>Interpreter (5 samples, 0.06%)</title><rect x="20.8" y="1811.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="23.8" y="1822.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (7 samples, 0.08%)</title><rect x="21.7" y="1811.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="24.7" y="1822.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.02%)</title><rect x="21.7" y="1795.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="24.7" y="1806.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.02%)</title><rect x="22.2" y="1795.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="25.2" y="1806.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (2 samples, 0.02%)</title><rect x="22.8" y="1811.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="25.8" y="1822.0"></text>
</g>
<g>
<title>__pthread_cond_signal (15 samples, 0.18%)</title><rect x="23.1" y="1811.0" width="2.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="26.1" y="1822.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 0.14%)</title><rect x="23.5" y="1795.0" width="1.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="26.5" y="1806.0"></text>
</g>
<g>
<title>do_syscall_64 (11 samples, 0.13%)</title><rect x="23.6" y="1779.0" width="1.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="26.6" y="1790.0"></text>
</g>
<g>
<title>__x64_sys_futex (11 samples, 0.13%)</title><rect x="23.6" y="1763.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="26.6" y="1774.0"></text>
</g>
<g>
<title>do_futex (11 samples, 0.13%)</title><rect x="23.6" y="1747.0" width="1.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="26.6" y="1758.0"></text>
</g>
<g>
<title>futex_wake (11 samples, 0.13%)</title><rect x="23.6" y="1731.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="26.6" y="1742.0"></text>
</g>
<g>
<title>wake_up_q (9 samples, 0.11%)</title><rect x="23.9" y="1715.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="26.9" y="1726.0"></text>
</g>
<g>
<title>try_to_wake_up (9 samples, 0.11%)</title><rect x="23.9" y="1699.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="26.9" y="1710.0"></text>
</g>
<g>
<title>__lock_text_start (9 samples, 0.11%)</title><rect x="23.9" y="1683.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="26.9" y="1694.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.07%)</title><rect x="25.2" y="1811.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="28.2" y="1822.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.05%)</title><rect x="25.5" y="1795.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="28.5" y="1806.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.05%)</title><rect x="25.5" y="1779.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="28.5" y="1790.0"></text>
</g>
<g>
<title>slow_subtype_check Runtime1 stub (3 samples, 0.04%)</title><rect x="26.3" y="1811.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="29.3" y="1822.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.02%)</title><rect x="26.9" y="1827.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="29.9" y="1838.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="26.9" y="1811.0" width="0.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="29.9" y="1822.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="26.9" y="1795.0" width="0.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="29.9" y="1806.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.02%)</title><rect x="26.9" y="1779.0" width="0.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="29.9" y="1790.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.02%)</title><rect x="26.9" y="1763.0" width="0.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="29.9" y="1774.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.02%)</title><rect x="26.9" y="1747.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="29.9" y="1758.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.02%)</title><rect x="26.9" y="1731.0" width="0.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="29.9" y="1742.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.02%)</title><rect x="26.9" y="1715.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="29.9" y="1726.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.02%)</title><rect x="26.9" y="1699.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="29.9" y="1710.0"></text>
</g>
<g>
<title>io/netty/handler/codec/MessageAggregator.decode (2 samples, 0.02%)</title><rect x="27.4" y="1827.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="30.4" y="1838.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator.aggregate (2 samples, 0.02%)</title><rect x="27.4" y="1811.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.4" y="1822.0"></text>
</g>
<g>
<title>slow_subtype_check Runtime1 stub (2 samples, 0.02%)</title><rect x="27.4" y="1795.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="30.4" y="1806.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (2 samples, 0.02%)</title><rect x="27.8" y="1827.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.8" y="1838.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (2 samples, 0.02%)</title><rect x="27.8" y="1811.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="30.8" y="1822.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (2 samples, 0.02%)</title><rect x="27.8" y="1795.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.8" y="1806.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (2 samples, 0.02%)</title><rect x="27.8" y="1779.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.8" y="1790.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (2 samples, 0.02%)</title><rect x="27.8" y="1763.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="30.8" y="1774.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (2 samples, 0.02%)</title><rect x="27.8" y="1747.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.8" y="1758.0"></text>
</g>
<g>
<title>java/lang/Thread.run (6,262 samples, 74.57%)</title><rect x="28.1" y="1827.0" width="879.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.1" y="1838.0">java/lang/Thread.run</text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocalRunnable.run (4,652 samples, 55.39%)</title><rect x="28.1" y="1811.0" width="653.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.1" y="1822.0">io/netty/util/concurrent/FastThreadLocalRunnable.run</text>
</g>
<g>
<title>io/netty/util/internal/ThreadExecutorMap$2.run (4,652 samples, 55.39%)</title><rect x="28.1" y="1795.0" width="653.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.1" y="1806.0">io/netty/util/internal/ThreadExecutorMap$2.run</text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor$4.run (4,649 samples, 55.36%)</title><rect x="28.4" y="1779.0" width="653.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.4" y="1790.0">io/netty/util/concurrent/SingleThreadEventExecutor$4.run</text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.run (4,649 samples, 55.36%)</title><rect x="28.4" y="1763.0" width="653.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="31.4" y="1774.0">io/netty/channel/nio/NioEventLoop.run</text>
</g>
<g>
<title>io/netty/channel/SingleThreadEventLoop.hasTasks (2 samples, 0.02%)</title><rect x="31.4" y="1747.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.4" y="1758.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKeys (2,290 samples, 27.27%)</title><rect x="31.6" y="1747.0" width="321.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="34.6" y="1758.0">io/netty/channel/nio/NioEventLoop.processSe..</text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKeysOptimized (2,288 samples, 27.24%)</title><rect x="31.9" y="1731.0" width="321.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="34.9" y="1742.0">io/netty/channel/nio/NioEventLoop.processSe..</text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKey (2,268 samples, 27.01%)</title><rect x="34.7" y="1715.0" width="318.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.7" y="1726.0">io/netty/channel/nio/NioEventLoop.processSe..</text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe.read (2,259 samples, 26.90%)</title><rect x="35.3" y="1699.0" width="317.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="38.3" y="1710.0">io/netty/channel/nio/AbstractNioByteChannel..</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.fireChannelRead (1,932 samples, 23.01%)</title><rect x="36.4" y="1683.0" width="271.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.4" y="1694.0">io/netty/channel/DefaultChannelPipel..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1,932 samples, 23.01%)</title><rect x="36.4" y="1667.0" width="271.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="39.4" y="1678.0">io/netty/channel/AbstractChannelHand..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1,862 samples, 22.17%)</title><rect x="36.4" y="1651.0" width="261.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.4" y="1662.0">io/netty/channel/AbstractChannelHan..</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.channelRead (1,861 samples, 22.16%)</title><rect x="36.6" y="1635.0" width="261.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="39.6" y="1646.0">io/netty/channel/DefaultChannelPipe..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (1,861 samples, 22.16%)</title><rect x="36.6" y="1619.0" width="261.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="39.6" y="1630.0">io/netty/channel/AbstractChannelHan..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1,858 samples, 22.12%)</title><rect x="36.6" y="1603.0" width="261.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="39.6" y="1614.0">io/netty/channel/AbstractChannelHan..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1,805 samples, 21.49%)</title><rect x="36.7" y="1587.0" width="253.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.7" y="1598.0">io/netty/channel/AbstractChannelHa..</text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.channelRead (1,805 samples, 21.49%)</title><rect x="36.7" y="1571.0" width="253.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.7" y="1582.0">io/netty/handler/codec/ByteToMessa..</text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.release (76 samples, 0.90%)</title><rect x="37.1" y="1555.0" width="10.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.1" y="1566.0"></text>
</g>
<g>
<title>io/netty/buffer/SimpleLeakAwareByteBuf.release (7 samples, 0.08%)</title><rect x="37.1" y="1539.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.1" y="1550.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.release (6 samples, 0.07%)</title><rect x="37.3" y="1523.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.3" y="1534.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (4 samples, 0.05%)</title><rect x="37.5" y="1507.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="40.5" y="1518.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.handleRelease (4 samples, 0.05%)</title><rect x="37.5" y="1491.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.5" y="1502.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.deallocate (4 samples, 0.05%)</title><rect x="37.5" y="1475.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="40.5" y="1486.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.free (2 samples, 0.02%)</title><rect x="37.5" y="1459.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.5" y="1470.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.add (2 samples, 0.02%)</title><rect x="37.5" y="1443.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.5" y="1454.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.recycle (2 samples, 0.02%)</title><rect x="37.8" y="1459.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="40.8" y="1470.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (69 samples, 0.82%)</title><rect x="38.1" y="1539.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.1" y="1550.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (69 samples, 0.82%)</title><rect x="38.1" y="1523.0" width="9.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.1" y="1534.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (69 samples, 0.82%)</title><rect x="38.1" y="1507.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.1" y="1518.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (68 samples, 0.81%)</title><rect x="38.2" y="1491.0" width="9.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.2" y="1502.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (66 samples, 0.79%)</title><rect x="38.5" y="1475.0" width="9.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="41.5" y="1486.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (66 samples, 0.79%)</title><rect x="38.5" y="1459.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="41.5" y="1470.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (66 samples, 0.79%)</title><rect x="38.5" y="1443.0" width="9.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="41.5" y="1454.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (66 samples, 0.79%)</title><rect x="38.5" y="1427.0" width="9.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="41.5" y="1438.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (64 samples, 0.76%)</title><rect x="38.8" y="1411.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="41.8" y="1422.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (2 samples, 0.02%)</title><rect x="38.9" y="1395.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="41.9" y="1406.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (58 samples, 0.69%)</title><rect x="39.6" y="1395.0" width="8.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="42.6" y="1406.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (9 samples, 0.11%)</title><rect x="44.3" y="1379.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="47.3" y="1390.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (2 samples, 0.02%)</title><rect x="44.6" y="1363.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="47.6" y="1374.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="44.6" y="1347.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="47.6" y="1358.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.06%)</title><rect x="44.8" y="1363.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="47.8" y="1374.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.06%)</title><rect x="44.8" y="1347.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="47.8" y="1358.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.06%)</title><rect x="44.8" y="1331.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="47.8" y="1342.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.02%)</title><rect x="45.0" y="1315.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="48.0" y="1326.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (2 samples, 0.02%)</title><rect x="45.7" y="1379.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="48.7" y="1390.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (13 samples, 0.15%)</title><rect x="46.0" y="1379.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="49.0" y="1390.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (12 samples, 0.14%)</title><rect x="46.1" y="1363.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="49.1" y="1374.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.04%)</title><rect x="46.3" y="1347.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="49.3" y="1358.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (6 samples, 0.07%)</title><rect x="46.7" y="1347.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="49.7" y="1358.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.02%)</title><rect x="47.5" y="1347.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="50.5" y="1358.0"></text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.callDecode (470 samples, 5.60%)</title><rect x="47.8" y="1555.0" width="66.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.8" y="1566.0">io/nett..</text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.decodeRemovalReentryProtection (468 samples, 5.57%)</title><rect x="48.1" y="1539.0" width="65.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.1" y="1550.0">io/nett..</text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectDecoder.decode (468 samples, 5.57%)</title><rect x="48.1" y="1523.0" width="65.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.1" y="1534.0">io/nett..</text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectDecoder$LineParser.parse (87 samples, 1.04%)</title><rect x="48.8" y="1507.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.8" y="1518.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectDecoder$HeaderParser.parse (86 samples, 1.02%)</title><rect x="48.8" y="1491.0" width="12.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="51.8" y="1502.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.forEachByte (85 samples, 1.01%)</title><rect x="48.9" y="1475.0" width="12.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="51.9" y="1486.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (71 samples, 0.85%)</title><rect x="48.9" y="1459.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="51.9" y="1470.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (71 samples, 0.85%)</title><rect x="48.9" y="1443.0" width="10.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.9" y="1454.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (71 samples, 0.85%)</title><rect x="48.9" y="1427.0" width="10.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.9" y="1438.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (71 samples, 0.85%)</title><rect x="48.9" y="1411.0" width="10.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.9" y="1422.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (71 samples, 0.85%)</title><rect x="48.9" y="1395.0" width="10.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.9" y="1406.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (70 samples, 0.83%)</title><rect x="49.1" y="1379.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.1" y="1390.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (70 samples, 0.83%)</title><rect x="49.1" y="1363.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.1" y="1374.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (68 samples, 0.81%)</title><rect x="49.3" y="1347.0" width="9.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="52.3" y="1358.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (68 samples, 0.81%)</title><rect x="49.3" y="1331.0" width="9.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="52.3" y="1342.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (64 samples, 0.76%)</title><rect x="49.9" y="1315.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="52.9" y="1326.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (2 samples, 0.02%)</title><rect x="50.3" y="1299.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="53.3" y="1310.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (57 samples, 0.68%)</title><rect x="50.9" y="1299.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="53.9" y="1310.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (7 samples, 0.08%)</title><rect x="55.7" y="1283.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="58.7" y="1294.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (2 samples, 0.02%)</title><rect x="56.2" y="1267.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="59.2" y="1278.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.04%)</title><rect x="56.6" y="1283.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="59.6" y="1294.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="56.8" y="1267.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="59.8" y="1278.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (2 samples, 0.02%)</title><rect x="57.1" y="1283.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="60.1" y="1294.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (2 samples, 0.02%)</title><rect x="57.4" y="1283.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="60.4" y="1294.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (8 samples, 0.10%)</title><rect x="57.6" y="1283.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="60.6" y="1294.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (8 samples, 0.10%)</title><rect x="57.6" y="1267.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="60.6" y="1278.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="57.6" y="1251.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="60.6" y="1262.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (6 samples, 0.07%)</title><rect x="57.9" y="1251.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="60.9" y="1262.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.forEachByte (14 samples, 0.17%)</title><rect x="58.9" y="1459.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="61.9" y="1470.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.forEachByte (14 samples, 0.17%)</title><rect x="58.9" y="1443.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.9" y="1454.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.forEachByteAsc0 (14 samples, 0.17%)</title><rect x="58.9" y="1427.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.9" y="1438.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf._getByte (9 samples, 0.11%)</title><rect x="58.9" y="1411.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="61.9" y="1422.0"></text>
</g>
<g>
<title>io/netty/buffer/UnsafeByteBufUtil.getByte (9 samples, 0.11%)</title><rect x="58.9" y="1395.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.9" y="1406.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.getByte (9 samples, 0.11%)</title><rect x="58.9" y="1379.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.9" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.getByte (9 samples, 0.11%)</title><rect x="58.9" y="1363.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="61.9" y="1374.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectDecoder.readHeaders (3 samples, 0.04%)</title><rect x="59.6" y="1347.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.6" y="1358.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectDecoder$LineParser.process (5 samples, 0.06%)</title><rect x="60.2" y="1411.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.2" y="1422.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectDecoder$HeaderParser.process (4 samples, 0.05%)</title><rect x="60.2" y="1395.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.2" y="1406.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectDecoder.readHeaders (356 samples, 4.24%)</title><rect x="61.1" y="1507.0" width="50.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="64.1" y="1518.0">io/ne..</text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.add (18 samples, 0.21%)</title><rect x="61.3" y="1491.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="64.3" y="1502.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.addObject (18 samples, 0.21%)</title><rect x="61.3" y="1475.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="64.3" y="1486.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.add (16 samples, 0.19%)</title><rect x="61.3" y="1459.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.3" y="1470.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders$2.validateName (6 samples, 0.07%)</title><rect x="61.4" y="1443.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="64.4" y="1454.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders$2.validateName (6 samples, 0.07%)</title><rect x="61.4" y="1427.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="64.4" y="1438.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.04%)</title><rect x="61.8" y="1411.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="64.8" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString$1.hashCode (9 samples, 0.11%)</title><rect x="62.3" y="1443.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.3" y="1454.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString$1.hashCode (7 samples, 0.08%)</title><rect x="62.6" y="1427.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.6" y="1438.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString.hashCode (7 samples, 0.08%)</title><rect x="62.6" y="1411.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="65.6" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.hashCodeAscii (7 samples, 0.08%)</title><rect x="62.6" y="1395.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="65.6" y="1406.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.hashCodeAsciiCompute (5 samples, 0.06%)</title><rect x="62.6" y="1379.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="65.6" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.hashCodeAsciiSanitizeInt (5 samples, 0.06%)</title><rect x="62.6" y="1363.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.6" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.05%)</title><rect x="62.7" y="1347.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.7" y="1358.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.02%)</title><rect x="63.3" y="1379.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="66.3" y="1390.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders$HeaderValueConverterAndValidator.convertObject (2 samples, 0.02%)</title><rect x="63.5" y="1459.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="66.5" y="1470.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.getAll (3 samples, 0.04%)</title><rect x="63.8" y="1491.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="66.8" y="1502.0"></text>
</g>
<g>
<title>io/netty/handler/codec/HeadersUtils.getAllAsString (3 samples, 0.04%)</title><rect x="63.8" y="1475.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="66.8" y="1486.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.getAll (3 samples, 0.04%)</title><rect x="63.8" y="1459.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="66.8" y="1470.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString$1.hashCode (3 samples, 0.04%)</title><rect x="63.8" y="1443.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.8" y="1454.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString$1.hashCode (3 samples, 0.04%)</title><rect x="63.8" y="1427.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="66.8" y="1438.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString.hashCode (3 samples, 0.04%)</title><rect x="63.8" y="1411.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.8" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.hashCodeAscii (3 samples, 0.04%)</title><rect x="63.8" y="1395.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.8" y="1406.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.hashCodeAsciiCompute (3 samples, 0.04%)</title><rect x="63.8" y="1379.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="66.8" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.hashCodeAsciiSanitizeInt (3 samples, 0.04%)</title><rect x="63.8" y="1363.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="66.8" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.02%)</title><rect x="64.0" y="1347.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.0" y="1358.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectDecoder$HeaderParser.parse (324 samples, 3.86%)</title><rect x="64.2" y="1491.0" width="45.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.2" y="1502.0">io/n..</text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.forEachByte (324 samples, 3.86%)</title><rect x="64.2" y="1475.0" width="45.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="67.2" y="1486.0">io/n..</text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (311 samples, 3.70%)</title><rect x="64.4" y="1459.0" width="43.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="67.4" y="1470.0">io/n..</text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (311 samples, 3.70%)</title><rect x="64.4" y="1443.0" width="43.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="67.4" y="1454.0">io/n..</text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (311 samples, 3.70%)</title><rect x="64.4" y="1427.0" width="43.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.4" y="1438.0">io/n..</text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (311 samples, 3.70%)</title><rect x="64.4" y="1411.0" width="43.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="67.4" y="1422.0">io/n..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (304 samples, 3.62%)</title><rect x="65.4" y="1395.0" width="42.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="68.4" y="1406.0">java..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (300 samples, 3.57%)</title><rect x="65.9" y="1379.0" width="42.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="68.9" y="1390.0">java..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (300 samples, 3.57%)</title><rect x="65.9" y="1363.0" width="42.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.9" y="1374.0">java..</text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (297 samples, 3.54%)</title><rect x="66.3" y="1347.0" width="41.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="69.3" y="1358.0">Jav..</text>
</g>
<g>
<title>JVM_FillInStackTrace (296 samples, 3.52%)</title><rect x="66.3" y="1331.0" width="41.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="69.3" y="1342.0">JVM..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (8 samples, 0.10%)</title><rect x="66.9" y="1315.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="69.9" y="1326.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (3 samples, 0.04%)</title><rect x="68.0" y="1315.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="71.0" y="1326.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (280 samples, 3.33%)</title><rect x="68.6" y="1315.0" width="39.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="71.6" y="1326.0">jav..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.06%)</title><rect x="68.6" y="1299.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="71.6" y="1310.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.04%)</title><rect x="69.7" y="1299.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="72.7" y="1310.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (9 samples, 0.11%)</title><rect x="70.1" y="1299.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="73.1" y="1310.0"></text>
</g>
<g>
<title>Method::bcp_from(unsigned char*) const (2 samples, 0.02%)</title><rect x="71.4" y="1299.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="74.4" y="1310.0"></text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (4 samples, 0.05%)</title><rect x="71.7" y="1299.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="74.7" y="1310.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.04%)</title><rect x="72.5" y="1299.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="75.5" y="1310.0"></text>
</g>
<g>
<title>frame::interpreter_frame_method() const (2 samples, 0.02%)</title><rect x="73.1" y="1299.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="76.1" y="1310.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (4 samples, 0.05%)</title><rect x="73.4" y="1299.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="76.4" y="1310.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (241 samples, 2.87%)</title><rect x="74.1" y="1299.0" width="33.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="77.1" y="1310.0">ja..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (7 samples, 0.08%)</title><rect x="89.9" y="1283.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="92.9" y="1294.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (39 samples, 0.46%)</title><rect x="91.1" y="1283.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="94.1" y="1294.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (21 samples, 0.25%)</title><rect x="91.4" y="1267.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="94.4" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (12 samples, 0.14%)</title><rect x="92.5" y="1251.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="95.5" y="1262.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (8 samples, 0.10%)</title><rect x="92.6" y="1235.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="95.6" y="1246.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.02%)</title><rect x="92.6" y="1219.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="95.6" y="1230.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (2 samples, 0.02%)</title><rect x="92.9" y="1219.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="95.9" y="1230.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.04%)</title><rect x="93.3" y="1219.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="96.3" y="1230.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.02%)</title><rect x="93.7" y="1235.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="96.7" y="1246.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (16 samples, 0.19%)</title><rect x="94.3" y="1267.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="97.3" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (11 samples, 0.13%)</title><rect x="94.9" y="1251.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="97.9" y="1262.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (9 samples, 0.11%)</title><rect x="95.0" y="1235.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="98.0" y="1246.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (6 samples, 0.07%)</title><rect x="95.0" y="1219.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="98.0" y="1230.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (8 samples, 0.10%)</title><rect x="96.6" y="1283.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="99.6" y="1294.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.05%)</title><rect x="96.7" y="1267.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="99.7" y="1278.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.04%)</title><rect x="97.3" y="1267.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="100.3" y="1278.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (4 samples, 0.05%)</title><rect x="97.7" y="1283.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="100.7" y="1294.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.02%)</title><rect x="98.2" y="1283.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="101.2" y="1294.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (3 samples, 0.04%)</title><rect x="98.5" y="1283.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="101.5" y="1294.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (64 samples, 0.76%)</title><rect x="98.9" y="1283.0" width="9.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="101.9" y="1294.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (59 samples, 0.70%)</title><rect x="99.6" y="1267.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="102.6" y="1278.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (4 samples, 0.05%)</title><rect x="100.6" y="1251.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="103.6" y="1262.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (10 samples, 0.12%)</title><rect x="101.2" y="1251.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="104.2" y="1262.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (35 samples, 0.42%)</title><rect x="102.6" y="1251.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="105.6" y="1262.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (3 samples, 0.04%)</title><rect x="107.5" y="1251.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="110.5" y="1262.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.forEachByte (12 samples, 0.14%)</title><rect x="108.1" y="1459.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="111.1" y="1470.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.forEachByte (11 samples, 0.13%)</title><rect x="108.2" y="1443.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.2" y="1454.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.forEachByteAsc0 (11 samples, 0.13%)</title><rect x="108.2" y="1427.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="111.2" y="1438.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf._getByte (11 samples, 0.13%)</title><rect x="108.2" y="1411.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="111.2" y="1422.0"></text>
</g>
<g>
<title>io/netty/buffer/UnsafeByteBufUtil.getByte (11 samples, 0.13%)</title><rect x="108.2" y="1395.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.2" y="1406.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.getByte (11 samples, 0.13%)</title><rect x="108.2" y="1379.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="111.2" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.getByte (11 samples, 0.13%)</title><rect x="108.2" y="1363.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="111.2" y="1374.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (11 samples, 0.13%)</title><rect x="108.2" y="1347.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.2" y="1358.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectDecoder.splitHeader (6 samples, 0.07%)</title><rect x="109.9" y="1491.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="112.9" y="1502.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectDecoder.findNonWhitespace (6 samples, 0.07%)</title><rect x="109.9" y="1475.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="112.9" y="1486.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpUtil.isTransferEncodingChunked (3 samples, 0.04%)</title><rect x="110.7" y="1491.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="113.7" y="1502.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpHeaders.containsValue (3 samples, 0.04%)</title><rect x="110.7" y="1475.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="113.7" y="1486.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.valueCharSequenceIterator (3 samples, 0.04%)</title><rect x="110.7" y="1459.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="113.7" y="1470.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.valueIterator (3 samples, 0.04%)</title><rect x="110.7" y="1443.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="113.7" y="1454.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders$ValueIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="110.7" y="1427.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="113.7" y="1438.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString$1.hashCode (2 samples, 0.02%)</title><rect x="110.9" y="1411.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="113.9" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString$1.hashCode (2 samples, 0.02%)</title><rect x="110.9" y="1395.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.9" y="1406.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString.hashCode (2 samples, 0.02%)</title><rect x="110.9" y="1379.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.9" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.hashCodeAscii (2 samples, 0.02%)</title><rect x="110.9" y="1363.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.9" y="1374.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectDecoder.resetNow (3 samples, 0.04%)</title><rect x="111.2" y="1507.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="114.2" y="1518.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectDecoder.splitInitialLine (9 samples, 0.11%)</title><rect x="111.6" y="1507.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="114.6" y="1518.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectDecoder.findNonSPLenient (2 samples, 0.02%)</title><rect x="111.7" y="1491.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="114.7" y="1502.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectDecoder.findSPLenient (2 samples, 0.02%)</title><rect x="112.0" y="1491.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="115.0" y="1502.0"></text>
</g>
<g>
<title>io/netty/util/internal/AppendableCharSequence.subStringUnsafe (4 samples, 0.05%)</title><rect x="112.3" y="1491.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="115.3" y="1502.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="112.4" y="1475.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="115.4" y="1486.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.02%)</title><rect x="112.6" y="1459.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="115.6" y="1470.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpRequestDecoder.createMessage (7 samples, 0.08%)</title><rect x="112.9" y="1507.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="115.9" y="1518.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpRequest.&lt;init&gt; (5 samples, 0.06%)</title><rect x="112.9" y="1491.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="115.9" y="1502.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpMessage.&lt;init&gt; (5 samples, 0.06%)</title><rect x="112.9" y="1475.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="115.9" y="1486.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.&lt;init&gt; (4 samples, 0.05%)</title><rect x="113.0" y="1459.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.0" y="1470.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.&lt;init&gt; (4 samples, 0.05%)</title><rect x="113.0" y="1443.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="116.0" y="1454.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeadersImpl.&lt;init&gt; (2 samples, 0.02%)</title><rect x="113.0" y="1427.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="116.0" y="1438.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.&lt;init&gt; (2 samples, 0.02%)</title><rect x="113.0" y="1411.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="116.0" y="1422.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.&lt;init&gt; (2 samples, 0.02%)</title><rect x="113.0" y="1395.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.0" y="1406.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpMethod.valueOf (2 samples, 0.02%)</title><rect x="113.6" y="1491.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="116.6" y="1502.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpMethod$EnumNameMap.get (2 samples, 0.02%)</title><rect x="113.6" y="1475.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="116.6" y="1486.0"></text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.fireChannelRead (1,254 samples, 14.93%)</title><rect x="113.8" y="1555.0" width="176.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.8" y="1566.0">io/netty/handler/codec/..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (1,254 samples, 14.93%)</title><rect x="113.8" y="1539.0" width="176.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="116.8" y="1550.0">io/netty/channel/Abstra..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1,251 samples, 14.90%)</title><rect x="114.0" y="1523.0" width="175.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="117.0" y="1534.0">io/netty/channel/Abstra..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1,248 samples, 14.86%)</title><rect x="114.0" y="1507.0" width="175.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="117.0" y="1518.0">io/netty/channel/Abstra..</text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler.channelRead (1,245 samples, 14.82%)</title><rect x="114.4" y="1491.0" width="174.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.4" y="1502.0">io/netty/channel/Combi..</text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.channelRead (1,243 samples, 14.80%)</title><rect x="114.7" y="1475.0" width="174.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.7" y="1486.0">io/netty/handler/codec..</text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead (1,242 samples, 14.79%)</title><rect x="114.8" y="1459.0" width="174.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="117.8" y="1470.0">io/netty/channel/Combi..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (1,242 samples, 14.79%)</title><rect x="114.8" y="1443.0" width="174.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="117.8" y="1454.0">io/netty/channel/Abstr..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1,239 samples, 14.75%)</title><rect x="114.8" y="1427.0" width="174.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="117.8" y="1438.0">io/netty/channel/Abstr..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1,238 samples, 14.74%)</title><rect x="114.8" y="1411.0" width="174.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="117.8" y="1422.0">io/netty/channel/Abstr..</text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageDecoder.channelRead (1,238 samples, 14.74%)</title><rect x="114.8" y="1395.0" width="174.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.8" y="1406.0">io/netty/handler/codec..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (1,059 samples, 12.61%)</title><rect x="115.0" y="1379.0" width="148.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="118.0" y="1390.0">io/netty/channel/Ab..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1,059 samples, 12.61%)</title><rect x="115.0" y="1363.0" width="148.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="118.0" y="1374.0">io/netty/channel/Ab..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.executor (2 samples, 0.02%)</title><rect x="115.0" y="1347.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="118.0" y="1358.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (938 samples, 11.17%)</title><rect x="115.2" y="1347.0" width="131.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="118.2" y="1358.0">io/netty/channel..</text>
</g>
<g>
<title>io/netty/channel/SimpleChannelInboundHandler.channelRead (938 samples, 11.17%)</title><rect x="115.2" y="1331.0" width="131.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="118.2" y="1342.0">io/netty/channel..</text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.release (101 samples, 1.20%)</title><rect x="115.5" y="1315.0" width="14.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="118.5" y="1326.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator$AggregatedFullHttpMessage.release (99 samples, 1.18%)</title><rect x="115.8" y="1299.0" width="13.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="118.8" y="1310.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareCompositeByteBuf.release (99 samples, 1.18%)</title><rect x="115.8" y="1283.0" width="13.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="118.8" y="1294.0"></text>
</g>
<g>
<title>io/netty/buffer/SimpleLeakAwareCompositeByteBuf.release (9 samples, 0.11%)</title><rect x="115.9" y="1267.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="118.9" y="1278.0"></text>
</g>
<g>
<title>io/netty/buffer/SimpleLeakAwareCompositeByteBuf.closeLeak (9 samples, 0.11%)</title><rect x="115.9" y="1251.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="118.9" y="1262.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.close (9 samples, 0.11%)</title><rect x="115.9" y="1235.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="118.9" y="1246.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.close (8 samples, 0.10%)</title><rect x="115.9" y="1219.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="118.9" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$SetFromMap.remove (8 samples, 0.10%)</title><rect x="115.9" y="1203.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="118.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.remove (8 samples, 0.10%)</title><rect x="115.9" y="1187.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="118.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.replaceNode (8 samples, 0.10%)</title><rect x="115.9" y="1171.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="118.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.addCount (5 samples, 0.06%)</title><rect x="116.4" y="1155.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="119.4" y="1166.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (89 samples, 1.06%)</title><rect x="117.2" y="1267.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="120.2" y="1278.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (89 samples, 1.06%)</title><rect x="117.2" y="1251.0" width="12.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="120.2" y="1262.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (89 samples, 1.06%)</title><rect x="117.2" y="1235.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="120.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (89 samples, 1.06%)</title><rect x="117.2" y="1219.0" width="12.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="120.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (87 samples, 1.04%)</title><rect x="117.5" y="1203.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="120.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (87 samples, 1.04%)</title><rect x="117.5" y="1187.0" width="12.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="120.5" y="1198.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (87 samples, 1.04%)</title><rect x="117.5" y="1171.0" width="12.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="120.5" y="1182.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (86 samples, 1.02%)</title><rect x="117.5" y="1155.0" width="12.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="120.5" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.02%)</title><rect x="117.8" y="1139.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="120.8" y="1150.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (82 samples, 0.98%)</title><rect x="118.1" y="1139.0" width="11.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="121.1" y="1150.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.04%)</title><rect x="118.2" y="1123.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="121.2" y="1134.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (3 samples, 0.04%)</title><rect x="118.9" y="1123.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="121.9" y="1134.0"></text>
</g>
<g>
<title>Method::bcp_from(unsigned char*) const (2 samples, 0.02%)</title><rect x="119.3" y="1123.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="122.3" y="1134.0"></text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (2 samples, 0.02%)</title><rect x="119.6" y="1123.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="122.6" y="1134.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (65 samples, 0.77%)</title><rect x="120.3" y="1123.0" width="9.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="123.3" y="1134.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (11 samples, 0.13%)</title><rect x="124.2" y="1107.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="127.2" y="1118.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (6 samples, 0.07%)</title><rect x="124.5" y="1091.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="127.5" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.07%)</title><rect x="124.5" y="1075.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="127.5" y="1086.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="124.5" y="1059.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="127.5" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.05%)</title><rect x="124.8" y="1059.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="127.8" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.04%)</title><rect x="125.4" y="1091.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="128.4" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="125.4" y="1075.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="128.4" y="1086.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="125.4" y="1059.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="128.4" y="1070.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (8 samples, 0.10%)</title><rect x="125.8" y="1107.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="128.8" y="1118.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (4 samples, 0.05%)</title><rect x="125.9" y="1091.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="128.9" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="126.1" y="1075.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="129.1" y="1086.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="126.1" y="1059.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="129.1" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.04%)</title><rect x="126.5" y="1091.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="129.5" y="1102.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (4 samples, 0.05%)</title><rect x="126.9" y="1107.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="129.9" y="1118.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.04%)</title><rect x="126.9" y="1091.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="129.9" y="1102.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (3 samples, 0.04%)</title><rect x="127.5" y="1107.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="130.5" y="1118.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (10 samples, 0.12%)</title><rect x="127.9" y="1107.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="130.9" y="1118.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (9 samples, 0.11%)</title><rect x="128.0" y="1091.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="131.0" y="1102.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.04%)</title><rect x="128.2" y="1075.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="131.2" y="1086.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (5 samples, 0.06%)</title><rect x="128.6" y="1075.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="131.6" y="1086.0"></text>
</g>
<g>
<title>io/netty/util/internal/TypeParameterMatcher$ReflectiveMatcher.match (2 samples, 0.02%)</title><rect x="129.7" y="1315.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="132.7" y="1326.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/NettyRequests.channelRead0 (833 samples, 9.92%)</title><rect x="130.0" y="1315.0" width="117.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="133.0" y="1326.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/NettyRequests.channelRead0 (833 samples, 9.92%)</title><rect x="130.0" y="1299.0" width="117.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="133.0" y="1310.0">ru/mail/polis/..</text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator$AggregatedFullHttpRequest.uri (2 samples, 0.02%)</title><rect x="130.1" y="1283.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="133.1" y="1294.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/NettyRequests.entityHandler (829 samples, 9.87%)</title><rect x="130.6" y="1283.0" width="116.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="133.6" y="1294.0">ru/mail/polis/..</text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator$AggregatedFullHttpRequest.method (2 samples, 0.02%)</title><rect x="131.1" y="1267.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="134.1" y="1278.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/QueryStringDecoder.&lt;init&gt; (2 samples, 0.02%)</title><rect x="131.4" y="1267.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="134.4" y="1278.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/QueryStringDecoder.&lt;init&gt; (2 samples, 0.02%)</title><rect x="131.4" y="1251.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="134.4" y="1262.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/QueryStringDecoder.&lt;init&gt; (2 samples, 0.02%)</title><rect x="131.4" y="1235.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="134.4" y="1246.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/QueryStringDecoder.&lt;init&gt; (2 samples, 0.02%)</title><rect x="131.4" y="1219.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="134.4" y="1230.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/QueryStringDecoder.&lt;init&gt; (2 samples, 0.02%)</title><rect x="131.4" y="1203.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="134.4" y="1214.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/QueryStringDecoder.parameters (19 samples, 0.23%)</title><rect x="131.7" y="1267.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.7" y="1278.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/QueryStringDecoder.decodeParams (17 samples, 0.20%)</title><rect x="131.8" y="1251.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="134.8" y="1262.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/QueryStringDecoder.addParam (16 samples, 0.19%)</title><rect x="131.8" y="1235.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="134.8" y="1246.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/QueryStringDecoder.decodeComponent (6 samples, 0.07%)</title><rect x="131.8" y="1219.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="134.8" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.07%)</title><rect x="131.8" y="1203.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="134.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.05%)</title><rect x="132.1" y="1187.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="135.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="132.1" y="1171.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="135.1" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.06%)</title><rect x="132.8" y="1219.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="135.8" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.06%)</title><rect x="132.8" y="1203.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="135.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.02%)</title><rect x="133.1" y="1187.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="136.1" y="1198.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (4 samples, 0.05%)</title><rect x="133.5" y="1219.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="136.5" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.04%)</title><rect x="133.5" y="1203.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="136.5" y="1214.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="133.6" y="1187.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="136.6" y="1198.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (2 samples, 0.02%)</title><rect x="134.6" y="1267.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="137.6" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.02%)</title><rect x="134.6" y="1251.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="137.6" y="1262.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/NettyRequests.getRequest (791 samples, 9.42%)</title><rect x="134.9" y="1267.0" width="111.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="137.9" y="1278.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasNettyRequests.multiGet (791 samples, 9.42%)</title><rect x="134.9" y="1251.0" width="111.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="137.9" y="1262.0">ru/mail/polis..</text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.02%)</title><rect x="136.3" y="1235.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="139.3" y="1246.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (7 samples, 0.08%)</title><rect x="137.0" y="1235.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="140.0" y="1246.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (6 samples, 0.07%)</title><rect x="137.2" y="1219.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="140.2" y="1230.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="137.6" y="1203.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="140.6" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (4 samples, 0.05%)</title><rect x="138.3" y="1235.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="141.3" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.04%)</title><rect x="138.4" y="1219.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="141.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (14 samples, 0.17%)</title><rect x="139.0" y="1235.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="142.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (12 samples, 0.14%)</title><rect x="139.3" y="1219.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="142.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (10 samples, 0.12%)</title><rect x="139.5" y="1203.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="142.5" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasNettyRequests$$Lambda$152/120584240.apply (10 samples, 0.12%)</title><rect x="139.5" y="1187.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="142.5" y="1198.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasNettyRequests.lambda$multiGet$0 (10 samples, 0.12%)</title><rect x="139.5" y="1171.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="142.5" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasNettyRequests.processResponses (10 samples, 0.12%)</title><rect x="139.5" y="1155.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="142.5" y="1166.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.add (2 samples, 0.02%)</title><rect x="139.5" y="1139.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="142.5" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.getValueAsBytes (3 samples, 0.04%)</title><rect x="139.8" y="1139.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="142.8" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.02%)</title><rect x="139.8" y="1123.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="142.8" y="1134.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.merge (3 samples, 0.04%)</title><rect x="140.3" y="1139.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.3" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (2 samples, 0.02%)</title><rect x="140.4" y="1123.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="143.4" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (2 samples, 0.02%)</title><rect x="140.4" y="1107.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="143.4" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.02%)</title><rect x="140.4" y="1091.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="143.4" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.02%)</title><rect x="140.4" y="1075.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="143.4" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils.responseBuilder (2 samples, 0.02%)</title><rect x="140.7" y="1139.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="143.7" y="1150.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Topology.getReplicas (3 samples, 0.04%)</title><rect x="141.4" y="1235.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.4" y="1246.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.02%)</title><rect x="141.5" y="1219.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="144.5" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.02%)</title><rect x="141.5" y="1203.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="144.5" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils.atLeastAsync (24 samples, 0.29%)</title><rect x="141.8" y="1235.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="144.8" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/436840847.linkToTargetMethod (3 samples, 0.04%)</title><rect x="142.5" y="1219.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="145.5" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1033811031.invokeStatic (3 samples, 0.04%)</title><rect x="142.5" y="1203.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="145.5" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils$$Lambda$141/721267879.get$Lambda (3 samples, 0.04%)</title><rect x="142.5" y="1187.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="145.5" y="1198.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (14 samples, 0.17%)</title><rect x="142.9" y="1219.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="145.9" y="1230.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.02%)</title><rect x="142.9" y="1203.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="145.9" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils$$Lambda$141/721267879.accept (12 samples, 0.14%)</title><rect x="143.2" y="1203.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="146.2" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils.lambda$atLeastAsync$9 (12 samples, 0.14%)</title><rect x="143.2" y="1187.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="146.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenCompleteAsync (12 samples, 0.14%)</title><rect x="143.2" y="1171.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="146.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 0.14%)</title><rect x="143.2" y="1155.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="146.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (10 samples, 0.12%)</title><rect x="143.3" y="1139.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="146.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (10 samples, 0.12%)</title><rect x="143.3" y="1123.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="146.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.11%)</title><rect x="143.5" y="1107.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="146.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.11%)</title><rect x="143.5" y="1091.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="146.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.11%)</title><rect x="143.5" y="1075.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="146.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.11%)</title><rect x="143.5" y="1059.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.5" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.11%)</title><rect x="143.5" y="1043.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="146.5" y="1054.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.04%)</title><rect x="143.5" y="1027.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="146.5" y="1038.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 0.07%)</title><rect x="143.9" y="1027.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="146.9" y="1038.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.05%)</title><rect x="144.2" y="1011.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="147.2" y="1022.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.05%)</title><rect x="144.2" y="995.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="147.2" y="1006.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.05%)</title><rect x="144.2" y="979.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="147.2" y="990.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.05%)</title><rect x="144.2" y="963.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="147.2" y="974.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.04%)</title><rect x="144.2" y="947.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="147.2" y="958.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.02%)</title><rect x="144.3" y="931.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="147.3" y="942.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.02%)</title><rect x="144.3" y="915.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="147.3" y="926.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.02%)</title><rect x="144.3" y="899.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="147.3" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils.getProxyResponse (215 samples, 2.56%)</title><rect x="145.2" y="1235.0" width="30.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="148.2" y="1246.0">ru..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientFacade.sendAsync (140 samples, 1.67%)</title><rect x="145.3" y="1219.0" width="19.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="148.3" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (139 samples, 1.66%)</title><rect x="145.5" y="1203.0" width="19.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="148.5" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (139 samples, 1.66%)</title><rect x="145.5" y="1187.0" width="19.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.5" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (139 samples, 1.66%)</title><rect x="145.5" y="1171.0" width="19.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenCompleteAsync (2 samples, 0.02%)</title><rect x="145.7" y="1155.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="148.7" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.reference (4 samples, 0.05%)</title><rect x="146.0" y="1155.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.0" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.&lt;init&gt; (88 samples, 1.05%)</title><rect x="146.6" y="1155.0" width="12.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.02%)</title><rect x="147.0" y="1139.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="150.0" y="1150.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (12 samples, 0.14%)</title><rect x="147.3" y="1139.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="150.3" y="1150.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (4 samples, 0.05%)</title><rect x="147.4" y="1123.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="150.4" y="1134.0"></text>
</g>
<g>
<title>java/util/Collection.stream (3 samples, 0.04%)</title><rect x="148.0" y="1123.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="151.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (2 samples, 0.02%)</title><rect x="148.1" y="1107.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="151.1" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (4 samples, 0.05%)</title><rect x="148.4" y="1123.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="151.4" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.05%)</title><rect x="148.4" y="1107.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="151.4" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (3 samples, 0.04%)</title><rect x="148.5" y="1091.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="151.5" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.04%)</title><rect x="148.5" y="1075.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="151.5" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.04%)</title><rect x="148.5" y="1059.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="151.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (2 samples, 0.02%)</title><rect x="148.7" y="1043.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="151.7" y="1054.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (13 samples, 0.15%)</title><rect x="149.0" y="1139.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="152.0" y="1150.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (12 samples, 0.14%)</title><rect x="149.0" y="1123.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="152.0" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.forEach (11 samples, 0.13%)</title><rect x="149.1" y="1107.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.1" y="1118.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (11 samples, 0.13%)</title><rect x="149.1" y="1091.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="152.1" y="1102.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$106/848120636.accept (11 samples, 0.13%)</title><rect x="149.1" y="1075.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="152.1" y="1086.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (11 samples, 0.13%)</title><rect x="149.1" y="1059.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="152.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (9 samples, 0.11%)</title><rect x="149.1" y="1043.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="152.1" y="1054.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$107/1814310740.accept (9 samples, 0.11%)</title><rect x="149.1" y="1027.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="152.1" y="1038.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (8 samples, 0.10%)</title><rect x="149.2" y="1011.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="152.2" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$29/566034357.test (7 samples, 0.08%)</title><rect x="149.4" y="995.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="152.4" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$2 (6 samples, 0.07%)</title><rect x="149.5" y="979.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.5" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$28/99347477.test (2 samples, 0.02%)</title><rect x="149.8" y="963.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="152.8" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$1 (2 samples, 0.02%)</title><rect x="149.8" y="947.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="152.8" y="958.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.isValidName (2 samples, 0.02%)</title><rect x="150.1" y="963.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="153.1" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.retrieveProxy (54 samples, 0.64%)</title><rect x="151.2" y="1139.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="154.2" y="1150.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector.select (53 samples, 0.63%)</title><rect x="151.4" y="1123.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="154.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (2 samples, 0.02%)</title><rect x="152.1" y="1107.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="155.1" y="1118.0"></text>
</g>
<g>
<title>java/util/Locale.getDefault (2 samples, 0.02%)</title><rect x="152.1" y="1091.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="155.1" y="1102.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (45 samples, 0.54%)</title><rect x="152.3" y="1107.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="155.3" y="1118.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (26 samples, 0.31%)</title><rect x="152.8" y="1091.0" width="3.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="155.8" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (4 samples, 0.05%)</title><rect x="153.2" y="1075.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="156.2" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.0] (4 samples, 0.05%)</title><rect x="153.2" y="1059.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="156.2" y="1070.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (5 samples, 0.06%)</title><rect x="154.0" y="1075.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="157.0" y="1086.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.02%)</title><rect x="154.3" y="1059.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="157.3" y="1070.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (2 samples, 0.02%)</title><rect x="154.3" y="1043.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="157.3" y="1054.0"></text>
</g>
<g>
<title>vframeStream::vframeStream(JavaThread*, bool) (4 samples, 0.05%)</title><rect x="154.9" y="1075.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="157.9" y="1086.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (4 samples, 0.05%)</title><rect x="154.9" y="1059.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="157.9" y="1070.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.02%)</title><rect x="155.1" y="1043.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="158.1" y="1054.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (7 samples, 0.08%)</title><rect x="155.4" y="1075.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="158.4" y="1086.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.04%)</title><rect x="156.0" y="1059.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="159.0" y="1070.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (3 samples, 0.04%)</title><rect x="156.0" y="1043.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="159.0" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.04%)</title><rect x="156.0" y="1027.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="159.0" y="1038.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.02%)</title><rect x="156.6" y="1091.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="159.6" y="1102.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector$4.run (12 samples, 0.14%)</title><rect x="157.0" y="1091.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="160.0" y="1102.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector$4.run (12 samples, 0.14%)</title><rect x="157.0" y="1075.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="160.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.04%)</title><rect x="157.4" y="1059.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="160.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.04%)</title><rect x="157.4" y="1043.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="160.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.02%)</title><rect x="157.5" y="1027.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="160.5" y="1038.0"></text>
</g>
<g>
<title>sun/net/NetProperties.get (4 samples, 0.05%)</title><rect x="158.1" y="1059.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/System.getProperty (2 samples, 0.02%)</title><rect x="158.2" y="1043.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="161.2" y="1054.0"></text>
</g>
<g>
<title>java/util/Properties.getProperty (2 samples, 0.02%)</title><rect x="158.2" y="1027.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="161.2" y="1038.0"></text>
</g>
<g>
<title>java/util/Properties.getProperty (2 samples, 0.02%)</title><rect x="158.2" y="1011.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="161.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.02%)</title><rect x="158.2" y="995.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="161.2" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.&lt;init&gt; (29 samples, 0.35%)</title><rect x="158.9" y="1155.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="161.9" y="1166.0"></text>
</g>
<g>
<title>java/util/Optional.map (6 samples, 0.07%)</title><rect x="159.9" y="1139.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="162.9" y="1150.0"></text>
</g>
<g>
<title>java/util/Optional.ofNullable (3 samples, 0.04%)</title><rect x="160.1" y="1123.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="163.1" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$115/1907575600.apply (2 samples, 0.02%)</title><rect x="160.5" y="1123.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.5" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.&lt;init&gt; (7 samples, 0.08%)</title><rect x="160.8" y="1139.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.8" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.filterChain (8 samples, 0.10%)</title><rect x="161.9" y="1139.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="164.9" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/FilterFactory.getFilterChain (8 samples, 0.10%)</title><rect x="161.9" y="1123.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="164.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.05%)</title><rect x="162.0" y="1107.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="165.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.checkAccess (2 samples, 0.02%)</title><rect x="162.0" y="1091.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.verifyAccess (2 samples, 0.02%)</title><rect x="162.0" y="1075.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="165.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.slowVerifyAccess (2 samples, 0.02%)</title><rect x="162.0" y="1059.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="165.0" y="1070.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.next (2 samples, 0.02%)</title><rect x="162.7" y="1107.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="165.7" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsync (14 samples, 0.17%)</title><rect x="163.0" y="1155.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (4 samples, 0.05%)</title><rect x="163.3" y="1139.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.04%)</title><rect x="163.4" y="1123.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="166.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (3 samples, 0.04%)</title><rect x="163.4" y="1107.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.02%)</title><rect x="163.6" y="1091.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="166.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.02%)</title><rect x="163.6" y="1075.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="166.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.02%)</title><rect x="163.6" y="1059.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="166.6" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsync0 (5 samples, 0.06%)</title><rect x="163.9" y="1139.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="166.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.04%)</title><rect x="163.9" y="1123.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="166.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.04%)</title><rect x="163.9" y="1107.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="166.9" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$125/2047461627.get$Lambda (2 samples, 0.02%)</title><rect x="164.0" y="1091.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="167.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (2 samples, 0.02%)</title><rect x="164.3" y="1123.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="167.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (2 samples, 0.02%)</title><rect x="164.3" y="1107.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="167.3" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.&lt;init&gt; (3 samples, 0.04%)</title><rect x="164.6" y="1139.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="167.6" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.GET (2 samples, 0.02%)</title><rect x="165.0" y="1219.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="168.0" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.build (21 samples, 0.25%)</title><rect x="165.3" y="1219.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="168.3" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ImmutableHttpRequest.&lt;init&gt; (20 samples, 0.24%)</title><rect x="165.4" y="1203.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="168.4" y="1214.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (17 samples, 0.20%)</title><rect x="165.7" y="1187.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="168.7" y="1198.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (17 samples, 0.20%)</title><rect x="165.7" y="1171.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="168.7" y="1182.0"></text>
</g>
<g>
<title>java/util/AbstractMap.isEmpty (5 samples, 0.06%)</title><rect x="165.8" y="1155.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="168.8" y="1166.0"></text>
</g>
<g>
<title>java/util/TreeMap.size (5 samples, 0.06%)</title><rect x="165.8" y="1139.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="168.8" y="1150.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.06%)</title><rect x="165.8" y="1123.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="168.8" y="1134.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (11 samples, 0.13%)</title><rect x="166.5" y="1155.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="169.5" y="1166.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$106/848120636.accept (11 samples, 0.13%)</title><rect x="166.5" y="1139.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="169.5" y="1150.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (11 samples, 0.13%)</title><rect x="166.5" y="1123.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="169.5" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (9 samples, 0.11%)</title><rect x="166.7" y="1107.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="169.7" y="1118.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$107/1814310740.accept (9 samples, 0.11%)</title><rect x="166.7" y="1091.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="169.7" y="1102.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (9 samples, 0.11%)</title><rect x="166.7" y="1075.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="169.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.trim (2 samples, 0.02%)</title><rect x="166.8" y="1059.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="169.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (2 samples, 0.02%)</title><rect x="166.8" y="1043.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="169.8" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$28/99347477.test (6 samples, 0.07%)</title><rect x="167.1" y="1059.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="170.1" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$1 (6 samples, 0.07%)</title><rect x="167.1" y="1043.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="170.1" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (6 samples, 0.07%)</title><rect x="167.1" y="1027.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="170.1" y="1038.0"></text>
</g>
<g>
<title>java/util/TreeSet.contains (6 samples, 0.07%)</title><rect x="167.1" y="1011.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="170.1" y="1022.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (6 samples, 0.07%)</title><rect x="167.1" y="995.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="170.1" y="1006.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (6 samples, 0.07%)</title><rect x="167.1" y="979.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="170.1" y="990.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (6 samples, 0.07%)</title><rect x="167.1" y="963.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="170.1" y="974.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (5 samples, 0.06%)</title><rect x="167.2" y="947.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="170.2" y="958.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (5 samples, 0.06%)</title><rect x="167.2" y="931.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="170.2" y="942.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (5 samples, 0.06%)</title><rect x="167.2" y="915.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="170.2" y="926.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.02%)</title><rect x="167.5" y="899.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="170.5" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils.requestBuilder (51 samples, 0.61%)</title><rect x="168.2" y="1219.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="171.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.02%)</title><rect x="168.2" y="1203.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="171.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (2 samples, 0.02%)</title><rect x="168.2" y="1187.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="171.2" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453041767.invoke (2 samples, 0.02%)</title><rect x="168.2" y="1171.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="171.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.02%)</title><rect x="168.2" y="1155.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.2" y="1166.0"></text>
</g>
<g>
<title>java/net/URI.create (27 samples, 0.32%)</title><rect x="168.5" y="1203.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="171.5" y="1214.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (27 samples, 0.32%)</title><rect x="168.5" y="1187.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.5" y="1198.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (27 samples, 0.32%)</title><rect x="168.5" y="1171.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="171.5" y="1182.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (23 samples, 0.27%)</title><rect x="169.1" y="1155.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="172.1" y="1166.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (3 samples, 0.04%)</title><rect x="169.1" y="1139.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="172.1" y="1150.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (3 samples, 0.04%)</title><rect x="169.1" y="1123.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="172.1" y="1134.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (19 samples, 0.23%)</title><rect x="169.5" y="1139.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="172.5" y="1150.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (16 samples, 0.19%)</title><rect x="169.9" y="1123.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="172.9" y="1134.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHostname (5 samples, 0.06%)</title><rect x="170.2" y="1107.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.2" y="1118.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (3 samples, 0.04%)</title><rect x="170.5" y="1091.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.5" y="1102.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseIPv4Address (4 samples, 0.05%)</title><rect x="170.9" y="1107.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="173.9" y="1118.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (5 samples, 0.06%)</title><rect x="171.4" y="1107.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="174.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="171.9" y="1091.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="174.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="171.9" y="1075.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="174.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="171.9" y="1059.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="174.9" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.header (18 samples, 0.21%)</title><rect x="172.4" y="1203.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="175.4" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.header (18 samples, 0.21%)</title><rect x="172.4" y="1187.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="175.4" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.checkNameAndValue (13 samples, 0.15%)</title><rect x="172.4" y="1171.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.4" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$28/99347477.test (5 samples, 0.06%)</title><rect x="173.0" y="1155.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="176.0" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$1 (5 samples, 0.06%)</title><rect x="173.0" y="1139.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.0" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (4 samples, 0.05%)</title><rect x="173.1" y="1123.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="176.1" y="1134.0"></text>
</g>
<g>
<title>java/util/TreeSet.contains (3 samples, 0.04%)</title><rect x="173.3" y="1107.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="176.3" y="1118.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (3 samples, 0.04%)</title><rect x="173.3" y="1091.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="176.3" y="1102.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (3 samples, 0.04%)</title><rect x="173.3" y="1075.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="176.3" y="1086.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (3 samples, 0.04%)</title><rect x="173.3" y="1059.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="176.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.02%)</title><rect x="173.4" y="1043.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="176.4" y="1054.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.isValidName (4 samples, 0.05%)</title><rect x="173.7" y="1155.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="176.7" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.addHeader (5 samples, 0.06%)</title><rect x="174.3" y="1171.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="177.3" y="1182.0"></text>
</g>
<g>
<title>java/util/Map.computeIfAbsent (5 samples, 0.06%)</title><rect x="174.3" y="1155.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="177.3" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder$$Lambda$104/1088609243.apply (2 samples, 0.02%)</title><rect x="174.7" y="1139.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="177.7" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.uri (3 samples, 0.04%)</title><rect x="175.0" y="1203.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.0" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.uri (3 samples, 0.04%)</title><rect x="175.0" y="1187.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="178.0" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.checkURI (2 samples, 0.02%)</title><rect x="175.1" y="1171.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="178.1" y="1182.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils.getTimestampResponse (50 samples, 0.60%)</title><rect x="175.4" y="1235.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.4" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.02%)</title><rect x="175.4" y="1219.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="178.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.02%)</title><rect x="175.4" y="1203.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="178.4" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils$$Lambda$101/526355395.get$Lambda (2 samples, 0.02%)</title><rect x="175.4" y="1187.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.supplyAsync (48 samples, 0.57%)</title><rect x="175.7" y="1219.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.asyncSupplyStage (47 samples, 0.56%)</title><rect x="175.8" y="1203.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="178.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (46 samples, 0.55%)</title><rect x="175.9" y="1187.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="178.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (43 samples, 0.51%)</title><rect x="176.2" y="1171.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="179.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.02%)</title><rect x="176.2" y="1155.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="179.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.04%)</title><rect x="176.5" y="1155.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="179.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.02%)</title><rect x="176.6" y="1139.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="179.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (38 samples, 0.45%)</title><rect x="176.9" y="1155.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="179.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (37 samples, 0.44%)</title><rect x="177.1" y="1139.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="180.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (36 samples, 0.43%)</title><rect x="177.2" y="1123.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="180.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (36 samples, 0.43%)</title><rect x="177.2" y="1107.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="180.2" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (36 samples, 0.43%)</title><rect x="177.2" y="1091.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="180.2" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.02%)</title><rect x="177.2" y="1075.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="180.2" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_signal (34 samples, 0.40%)</title><rect x="177.5" y="1075.0" width="4.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="180.5" y="1086.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (32 samples, 0.38%)</title><rect x="177.8" y="1059.0" width="4.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="180.8" y="1070.0"></text>
</g>
<g>
<title>do_syscall_64 (32 samples, 0.38%)</title><rect x="177.8" y="1043.0" width="4.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="180.8" y="1054.0"></text>
</g>
<g>
<title>__x64_sys_futex (32 samples, 0.38%)</title><rect x="177.8" y="1027.0" width="4.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="180.8" y="1038.0"></text>
</g>
<g>
<title>do_futex (32 samples, 0.38%)</title><rect x="177.8" y="1011.0" width="4.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="180.8" y="1022.0"></text>
</g>
<g>
<title>futex_wake (32 samples, 0.38%)</title><rect x="177.8" y="995.0" width="4.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="180.8" y="1006.0"></text>
</g>
<g>
<title>wake_up_q (30 samples, 0.36%)</title><rect x="178.0" y="979.0" width="4.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="181.0" y="990.0"></text>
</g>
<g>
<title>try_to_wake_up (30 samples, 0.36%)</title><rect x="178.0" y="963.0" width="4.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="181.0" y="974.0"></text>
</g>
<g>
<title>__lock_text_start (30 samples, 0.36%)</title><rect x="178.0" y="947.0" width="4.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="181.0" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils.isForwarded (2 samples, 0.02%)</title><rect x="182.4" y="1235.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="185.4" y="1246.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.contains (2 samples, 0.02%)</title><rect x="182.4" y="1219.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.4" y="1230.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.contains (2 samples, 0.02%)</title><rect x="182.4" y="1203.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="185.4" y="1214.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.contains (2 samples, 0.02%)</title><rect x="182.4" y="1187.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.4" y="1198.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.get (2 samples, 0.02%)</title><rect x="182.4" y="1171.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="185.4" y="1182.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString$1.hashCode (2 samples, 0.02%)</title><rect x="182.4" y="1155.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="185.4" y="1166.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString$1.hashCode (2 samples, 0.02%)</title><rect x="182.4" y="1139.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.4" y="1150.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString.hashCode (2 samples, 0.02%)</title><rect x="182.4" y="1123.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.4" y="1134.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.hashCodeAscii (2 samples, 0.02%)</title><rect x="182.4" y="1107.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.4" y="1118.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils.respond (451 samples, 5.37%)</title><rect x="182.7" y="1235.0" width="63.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="185.7" y="1246.0">ru/mail..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (20 samples, 0.24%)</title><rect x="184.1" y="1219.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="187.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (20 samples, 0.24%)</title><rect x="184.1" y="1203.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="187.1" y="1214.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils$$Lambda$153/1911805998.get$Lambda (18 samples, 0.21%)</title><rect x="184.4" y="1187.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.4" y="1198.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils$$Lambda$153/1911805998.&lt;init&gt; (10 samples, 0.12%)</title><rect x="185.5" y="1171.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="188.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (421 samples, 5.01%)</title><rect x="186.9" y="1219.0" width="59.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="189.9" y="1230.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (421 samples, 5.01%)</title><rect x="186.9" y="1203.0" width="59.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="189.9" y="1214.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.&lt;init&gt; (2 samples, 0.02%)</title><rect x="186.9" y="1187.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.&lt;init&gt; (2 samples, 0.02%)</title><rect x="186.9" y="1171.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="189.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (418 samples, 4.98%)</title><rect x="187.2" y="1187.0" width="58.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="190.2" y="1198.0">java/u..</text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils$$Lambda$153/1911805998.accept (418 samples, 4.98%)</title><rect x="187.2" y="1171.0" width="58.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="190.2" y="1182.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils.lambda$respond$10 (418 samples, 4.98%)</title><rect x="187.2" y="1155.0" width="58.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="190.2" y="1166.0">ru/mai..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (416 samples, 4.95%)</title><rect x="187.3" y="1139.0" width="58.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="190.3" y="1150.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (415 samples, 4.94%)</title><rect x="187.5" y="1123.0" width="58.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="190.5" y="1134.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (415 samples, 4.94%)</title><rect x="187.5" y="1107.0" width="58.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="190.5" y="1118.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (415 samples, 4.94%)</title><rect x="187.5" y="1091.0" width="58.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.5" y="1102.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (415 samples, 4.94%)</title><rect x="187.5" y="1075.0" width="58.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="190.5" y="1086.0">io/net..</text>
</g>
<g>
<title>io/netty/handler/stream/ChunkedWriteHandler.flush (415 samples, 4.94%)</title><rect x="187.5" y="1059.0" width="58.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="190.5" y="1070.0">io/net..</text>
</g>
<g>
<title>io/netty/handler/stream/ChunkedWriteHandler.doFlush (415 samples, 4.94%)</title><rect x="187.5" y="1043.0" width="58.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="190.5" y="1054.0">io/net..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.flush (79 samples, 0.94%)</title><rect x="187.5" y="1027.0" width="11.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="190.5" y="1038.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush (79 samples, 0.94%)</title><rect x="187.5" y="1011.0" width="11.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="190.5" y="1022.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (79 samples, 0.94%)</title><rect x="187.5" y="995.0" width="11.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="190.5" y="1006.0"></text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler.flush (79 samples, 0.94%)</title><rect x="187.5" y="979.0" width="11.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="190.5" y="990.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundHandlerAdapter.flush (79 samples, 0.94%)</title><rect x="187.5" y="963.0" width="11.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="190.5" y="974.0"></text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.flush (79 samples, 0.94%)</title><rect x="187.5" y="947.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.5" y="958.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.flush (79 samples, 0.94%)</title><rect x="187.5" y="931.0" width="11.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="190.5" y="942.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush (79 samples, 0.94%)</title><rect x="187.5" y="915.0" width="11.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.5" y="926.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (79 samples, 0.94%)</title><rect x="187.5" y="899.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="190.5" y="910.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.flush (79 samples, 0.94%)</title><rect x="187.5" y="883.0" width="11.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="190.5" y="894.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush (79 samples, 0.94%)</title><rect x="187.5" y="867.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.5" y="878.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel$AbstractNioUnsafe.flush0 (79 samples, 0.94%)</title><rect x="187.5" y="851.0" width="11.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="190.5" y="862.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush0 (79 samples, 0.94%)</title><rect x="187.5" y="835.0" width="11.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="190.5" y="846.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.doWrite (79 samples, 0.94%)</title><rect x="187.5" y="819.0" width="11.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="190.5" y="830.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.nioBuffers (34 samples, 0.40%)</title><rect x="187.6" y="803.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="190.6" y="814.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.internalNioBuffer (18 samples, 0.21%)</title><rect x="187.9" y="787.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="190.9" y="798.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (18 samples, 0.21%)</title><rect x="187.9" y="771.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="190.9" y="782.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (18 samples, 0.21%)</title><rect x="187.9" y="755.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="190.9" y="766.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (18 samples, 0.21%)</title><rect x="187.9" y="739.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.9" y="750.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (18 samples, 0.21%)</title><rect x="187.9" y="723.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="190.9" y="734.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (18 samples, 0.21%)</title><rect x="187.9" y="707.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="190.9" y="718.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (17 samples, 0.20%)</title><rect x="188.0" y="691.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.0" y="702.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (17 samples, 0.20%)</title><rect x="188.0" y="675.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.0" y="686.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (17 samples, 0.20%)</title><rect x="188.0" y="659.0" width="2.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="191.0" y="670.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (17 samples, 0.20%)</title><rect x="188.0" y="643.0" width="2.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="191.0" y="654.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (17 samples, 0.20%)</title><rect x="188.0" y="627.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="191.0" y="638.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (15 samples, 0.18%)</title><rect x="188.2" y="611.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="191.2" y="622.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (2 samples, 0.02%)</title><rect x="189.0" y="595.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="192.0" y="606.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (2 samples, 0.02%)</title><rect x="189.3" y="595.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="192.3" y="606.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.05%)</title><rect x="189.7" y="595.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="192.7" y="606.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (2 samples, 0.02%)</title><rect x="190.0" y="579.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="193.0" y="590.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.nioBufferCount (14 samples, 0.17%)</title><rect x="190.4" y="787.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="193.4" y="798.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (14 samples, 0.17%)</title><rect x="190.4" y="771.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.4" y="782.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (14 samples, 0.17%)</title><rect x="190.4" y="755.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="193.4" y="766.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (14 samples, 0.17%)</title><rect x="190.4" y="739.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.4" y="750.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (14 samples, 0.17%)</title><rect x="190.4" y="723.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="193.4" y="734.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (14 samples, 0.17%)</title><rect x="190.4" y="707.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="193.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (14 samples, 0.17%)</title><rect x="190.4" y="691.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="193.4" y="702.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (14 samples, 0.17%)</title><rect x="190.4" y="675.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.4" y="686.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (14 samples, 0.17%)</title><rect x="190.4" y="659.0" width="2.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="193.4" y="670.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (14 samples, 0.17%)</title><rect x="190.4" y="643.0" width="2.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="193.4" y="654.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (14 samples, 0.17%)</title><rect x="190.4" y="627.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="193.4" y="638.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (11 samples, 0.13%)</title><rect x="190.8" y="611.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="193.8" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.05%)</title><rect x="191.8" y="595.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="194.8" y="606.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (3 samples, 0.04%)</title><rect x="192.0" y="579.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="195.0" y="590.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.04%)</title><rect x="192.0" y="563.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="195.0" y="574.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.removeBytes (26 samples, 0.31%)</title><rect x="192.4" y="803.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="195.4" y="814.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.remove (26 samples, 0.31%)</title><rect x="192.4" y="787.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="195.4" y="798.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.safeRelease (25 samples, 0.30%)</title><rect x="192.5" y="771.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.5" y="782.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.release (25 samples, 0.30%)</title><rect x="192.5" y="755.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="195.5" y="766.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.release (25 samples, 0.30%)</title><rect x="192.5" y="739.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.5" y="750.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (24 samples, 0.29%)</title><rect x="192.7" y="723.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.7" y="734.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (24 samples, 0.29%)</title><rect x="192.7" y="707.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="195.7" y="718.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (24 samples, 0.29%)</title><rect x="192.7" y="691.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.7" y="702.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (24 samples, 0.29%)</title><rect x="192.7" y="675.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.7" y="686.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (24 samples, 0.29%)</title><rect x="192.7" y="659.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="195.7" y="670.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (24 samples, 0.29%)</title><rect x="192.7" y="643.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="195.7" y="654.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (24 samples, 0.29%)</title><rect x="192.7" y="627.0" width="3.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="195.7" y="638.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (24 samples, 0.29%)</title><rect x="192.7" y="611.0" width="3.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="195.7" y="622.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (24 samples, 0.29%)</title><rect x="192.7" y="595.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="195.7" y="606.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.04%)</title><rect x="192.7" y="579.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="195.7" y="590.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (21 samples, 0.25%)</title><rect x="193.1" y="579.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="196.1" y="590.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (2 samples, 0.02%)</title><rect x="194.5" y="563.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="197.5" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.02%)</title><rect x="194.5" y="547.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="197.5" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="194.5" y="531.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="197.5" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="194.5" y="515.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="197.5" y="526.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (9 samples, 0.11%)</title><rect x="194.8" y="563.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="197.8" y="574.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (6 samples, 0.07%)</title><rect x="195.2" y="547.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="198.2" y="558.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (5 samples, 0.06%)</title><rect x="195.3" y="531.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="198.3" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (18 samples, 0.21%)</title><rect x="196.0" y="803.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.0" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (18 samples, 0.21%)</title><rect x="196.0" y="787.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="199.0" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (18 samples, 0.21%)</title><rect x="196.0" y="771.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.0" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (18 samples, 0.21%)</title><rect x="196.0" y="755.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="199.0" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (18 samples, 0.21%)</title><rect x="196.0" y="739.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="199.0" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (18 samples, 0.21%)</title><rect x="196.0" y="723.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="199.0" y="734.0"></text>
</g>
<g>
<title>__write (18 samples, 0.21%)</title><rect x="196.0" y="707.0" width="2.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="199.0" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (17 samples, 0.20%)</title><rect x="196.2" y="691.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="199.2" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (17 samples, 0.20%)</title><rect x="196.2" y="675.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="199.2" y="686.0"></text>
</g>
<g>
<title>__x64_sys_write (17 samples, 0.20%)</title><rect x="196.2" y="659.0" width="2.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="199.2" y="670.0"></text>
</g>
<g>
<title>ksys_write (17 samples, 0.20%)</title><rect x="196.2" y="643.0" width="2.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="199.2" y="654.0"></text>
</g>
<g>
<title>vfs_write (17 samples, 0.20%)</title><rect x="196.2" y="627.0" width="2.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="199.2" y="638.0"></text>
</g>
<g>
<title>__vfs_write (17 samples, 0.20%)</title><rect x="196.2" y="611.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="199.2" y="622.0"></text>
</g>
<g>
<title>new_sync_write (17 samples, 0.20%)</title><rect x="196.2" y="595.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="199.2" y="606.0"></text>
</g>
<g>
<title>sock_write_iter (16 samples, 0.19%)</title><rect x="196.3" y="579.0" width="2.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="199.3" y="590.0"></text>
</g>
<g>
<title>sock_sendmsg (16 samples, 0.19%)</title><rect x="196.3" y="563.0" width="2.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="199.3" y="574.0"></text>
</g>
<g>
<title>inet6_sendmsg (16 samples, 0.19%)</title><rect x="196.3" y="547.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="199.3" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg (16 samples, 0.19%)</title><rect x="196.3" y="531.0" width="2.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="199.3" y="542.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (14 samples, 0.17%)</title><rect x="196.6" y="515.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="199.6" y="526.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (2 samples, 0.02%)</title><rect x="196.6" y="499.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="199.6" y="510.0"></text>
</g>
<g>
<title>__alloc_skb (2 samples, 0.02%)</title><rect x="196.6" y="483.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="199.6" y="494.0"></text>
</g>
<g>
<title>tcp_push (10 samples, 0.12%)</title><rect x="197.0" y="499.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="200.0" y="510.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (10 samples, 0.12%)</title><rect x="197.0" y="483.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="200.0" y="494.0"></text>
</g>
<g>
<title>tcp_write_xmit (10 samples, 0.12%)</title><rect x="197.0" y="467.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="200.0" y="478.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (9 samples, 0.11%)</title><rect x="197.0" y="451.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="200.0" y="462.0"></text>
</g>
<g>
<title>ip_queue_xmit (9 samples, 0.11%)</title><rect x="197.0" y="435.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="200.0" y="446.0"></text>
</g>
<g>
<title>__ip_queue_xmit (9 samples, 0.11%)</title><rect x="197.0" y="419.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="200.0" y="430.0"></text>
</g>
<g>
<title>ip_local_out (8 samples, 0.10%)</title><rect x="197.2" y="403.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="200.2" y="414.0"></text>
</g>
<g>
<title>ip_output (8 samples, 0.10%)</title><rect x="197.2" y="387.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="200.2" y="398.0"></text>
</g>
<g>
<title>ip_finish_output (8 samples, 0.10%)</title><rect x="197.2" y="371.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="200.2" y="382.0"></text>
</g>
<g>
<title>__ip_finish_output (8 samples, 0.10%)</title><rect x="197.2" y="355.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="200.2" y="366.0"></text>
</g>
<g>
<title>ip_finish_output2 (7 samples, 0.08%)</title><rect x="197.3" y="339.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="200.3" y="350.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (5 samples, 0.06%)</title><rect x="197.4" y="323.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="200.4" y="334.0"></text>
</g>
<g>
<title>do_softirq.part.0 (5 samples, 0.06%)</title><rect x="197.4" y="307.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="200.4" y="318.0"></text>
</g>
<g>
<title>do_softirq_own_stack (5 samples, 0.06%)</title><rect x="197.4" y="291.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="200.4" y="302.0"></text>
</g>
<g>
<title>__softirqentry_text_start (5 samples, 0.06%)</title><rect x="197.4" y="275.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="200.4" y="286.0"></text>
</g>
<g>
<title>net_rx_action (5 samples, 0.06%)</title><rect x="197.4" y="259.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="200.4" y="270.0"></text>
</g>
<g>
<title>process_backlog (5 samples, 0.06%)</title><rect x="197.4" y="243.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="200.4" y="254.0"></text>
</g>
<g>
<title>__netif_receive_skb (5 samples, 0.06%)</title><rect x="197.4" y="227.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="200.4" y="238.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (5 samples, 0.06%)</title><rect x="197.4" y="211.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="200.4" y="222.0"></text>
</g>
<g>
<title>ip_rcv (5 samples, 0.06%)</title><rect x="197.4" y="195.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="200.4" y="206.0"></text>
</g>
<g>
<title>ip_rcv_finish (5 samples, 0.06%)</title><rect x="197.4" y="179.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="200.4" y="190.0"></text>
</g>
<g>
<title>ip_local_deliver (5 samples, 0.06%)</title><rect x="197.4" y="163.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="200.4" y="174.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (5 samples, 0.06%)</title><rect x="197.4" y="147.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="200.4" y="158.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (5 samples, 0.06%)</title><rect x="197.4" y="131.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="200.4" y="142.0"></text>
</g>
<g>
<title>tcp_v4_rcv (5 samples, 0.06%)</title><rect x="197.4" y="115.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="200.4" y="126.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (5 samples, 0.06%)</title><rect x="197.4" y="99.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="200.4" y="110.0"></text>
</g>
<g>
<title>tcp_rcv_established (3 samples, 0.04%)</title><rect x="197.7" y="83.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="200.7" y="94.0"></text>
</g>
<g>
<title>__tcp_ack_snd_check (2 samples, 0.02%)</title><rect x="197.7" y="67.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="200.7" y="78.0"></text>
</g>
<g>
<title>tcp_send_ack (2 samples, 0.02%)</title><rect x="197.7" y="51.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="200.7" y="62.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (2 samples, 0.02%)</title><rect x="197.7" y="35.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="200.7" y="46.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (336 samples, 4.00%)</title><rect x="198.6" y="1027.0" width="47.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.6" y="1038.0">io/n..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (336 samples, 4.00%)</title><rect x="198.6" y="1011.0" width="47.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.6" y="1022.0">io/n..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (336 samples, 4.00%)</title><rect x="198.6" y="995.0" width="47.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="201.6" y="1006.0">io/n..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (336 samples, 4.00%)</title><rect x="198.6" y="979.0" width="47.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="201.6" y="990.0">io/n..</text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler.write (336 samples, 4.00%)</title><rect x="198.6" y="963.0" width="47.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.6" y="974.0">io/n..</text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageEncoder.write (336 samples, 4.00%)</title><rect x="198.6" y="947.0" width="47.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="201.6" y="958.0">io/n..</text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.write (14 samples, 0.17%)</title><rect x="198.6" y="931.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.6" y="942.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (14 samples, 0.17%)</title><rect x="198.6" y="915.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="201.6" y="926.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (14 samples, 0.17%)</title><rect x="198.6" y="899.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="201.6" y="910.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (2 samples, 0.02%)</title><rect x="198.6" y="883.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="201.6" y="894.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (2 samples, 0.02%)</title><rect x="198.6" y="867.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="201.6" y="878.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.write (2 samples, 0.02%)</title><rect x="198.6" y="851.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="201.6" y="862.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.write (2 samples, 0.02%)</title><rect x="198.6" y="835.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.6" y="846.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel.filterOutboundMessage (2 samples, 0.02%)</title><rect x="198.6" y="819.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.6" y="830.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.touch (12 samples, 0.14%)</title><rect x="198.8" y="883.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="201.8" y="894.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.touch (12 samples, 0.14%)</title><rect x="198.8" y="867.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="201.8" y="878.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.touch (12 samples, 0.14%)</title><rect x="198.8" y="851.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.8" y="862.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.touch (12 samples, 0.14%)</title><rect x="198.8" y="835.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="201.8" y="846.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (12 samples, 0.14%)</title><rect x="198.8" y="819.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="201.8" y="830.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (12 samples, 0.14%)</title><rect x="198.8" y="803.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="201.8" y="814.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (12 samples, 0.14%)</title><rect x="198.8" y="787.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="201.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (11 samples, 0.13%)</title><rect x="199.0" y="771.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (11 samples, 0.13%)</title><rect x="199.0" y="755.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="202.0" y="766.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (11 samples, 0.13%)</title><rect x="199.0" y="739.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="202.0" y="750.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (11 samples, 0.13%)</title><rect x="199.0" y="723.0" width="1.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="202.0" y="734.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (11 samples, 0.13%)</title><rect x="199.0" y="707.0" width="1.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="202.0" y="718.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (11 samples, 0.13%)</title><rect x="199.0" y="691.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="202.0" y="702.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (9 samples, 0.11%)</title><rect x="199.3" y="675.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="202.3" y="686.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (2 samples, 0.02%)</title><rect x="199.8" y="659.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="202.8" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.02%)</title><rect x="200.3" y="659.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="203.3" y="670.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectEncoder.encode (322 samples, 3.83%)</title><rect x="200.5" y="931.0" width="45.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.5" y="942.0">io/n..</text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.buffer (26 samples, 0.31%)</title><rect x="200.7" y="915.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.7" y="926.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (26 samples, 0.31%)</title><rect x="200.7" y="899.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.7" y="910.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (26 samples, 0.31%)</title><rect x="200.7" y="883.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.7" y="894.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBufAllocator.newDirectBuffer (26 samples, 0.31%)</title><rect x="200.7" y="867.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.7" y="878.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.toLeakAwareBuffer (25 samples, 0.30%)</title><rect x="200.7" y="851.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.7" y="862.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track (24 samples, 0.29%)</title><rect x="200.8" y="835.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="203.8" y="846.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track0 (24 samples, 0.29%)</title><rect x="200.8" y="819.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="203.8" y="830.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.&lt;init&gt; (24 samples, 0.29%)</title><rect x="200.8" y="803.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.8" y="814.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (24 samples, 0.29%)</title><rect x="200.8" y="787.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (24 samples, 0.29%)</title><rect x="200.8" y="771.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="203.8" y="782.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (24 samples, 0.29%)</title><rect x="200.8" y="755.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.8" y="766.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (24 samples, 0.29%)</title><rect x="200.8" y="739.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.8" y="750.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (24 samples, 0.29%)</title><rect x="200.8" y="723.0" width="3.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="203.8" y="734.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (24 samples, 0.29%)</title><rect x="200.8" y="707.0" width="3.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="203.8" y="718.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (24 samples, 0.29%)</title><rect x="200.8" y="691.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="203.8" y="702.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (23 samples, 0.27%)</title><rect x="201.0" y="675.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="204.0" y="686.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.02%)</title><rect x="202.8" y="659.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="205.8" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (6 samples, 0.07%)</title><rect x="203.2" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="206.2" y="670.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (4 samples, 0.05%)</title><rect x="203.5" y="643.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="206.5" y="654.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.02%)</title><rect x="203.5" y="627.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="206.5" y="638.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.02%)</title><rect x="203.8" y="627.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="206.8" y="638.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.writeBytes (12 samples, 0.14%)</title><rect x="204.3" y="915.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="207.3" y="926.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (9 samples, 0.11%)</title><rect x="204.3" y="899.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="207.3" y="910.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (9 samples, 0.11%)</title><rect x="204.3" y="883.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="207.3" y="894.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (9 samples, 0.11%)</title><rect x="204.3" y="867.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="207.3" y="878.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (9 samples, 0.11%)</title><rect x="204.3" y="851.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.3" y="862.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (9 samples, 0.11%)</title><rect x="204.3" y="835.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="207.3" y="846.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (9 samples, 0.11%)</title><rect x="204.3" y="819.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="207.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (9 samples, 0.11%)</title><rect x="204.3" y="803.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="207.3" y="814.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (8 samples, 0.10%)</title><rect x="204.5" y="787.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="207.5" y="798.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (8 samples, 0.10%)</title><rect x="204.5" y="771.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="207.5" y="782.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (8 samples, 0.10%)</title><rect x="204.5" y="755.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="207.5" y="766.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (8 samples, 0.10%)</title><rect x="204.5" y="739.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="207.5" y="750.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.writeBytes (3 samples, 0.04%)</title><rect x="205.6" y="899.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.6" y="910.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (3 samples, 0.04%)</title><rect x="205.6" y="883.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="208.6" y="894.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (3 samples, 0.04%)</title><rect x="205.6" y="867.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.6" y="878.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (3 samples, 0.04%)</title><rect x="205.6" y="851.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="208.6" y="862.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.setBytes (3 samples, 0.04%)</title><rect x="205.6" y="835.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.6" y="846.0"></text>
</g>
<g>
<title>io/netty/buffer/UnsafeByteBufUtil.setBytes (3 samples, 0.04%)</title><rect x="205.6" y="819.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.6" y="830.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.copyMemory (2 samples, 0.02%)</title><rect x="205.7" y="803.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.7" y="814.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.copyMemory (2 samples, 0.02%)</title><rect x="205.7" y="787.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="208.7" y="798.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (2 samples, 0.02%)</title><rect x="205.7" y="771.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="208.7" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.02%)</title><rect x="205.7" y="755.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.7" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.02%)</title><rect x="205.7" y="739.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.7" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.02%)</title><rect x="205.7" y="723.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="208.7" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.02%)</title><rect x="205.7" y="707.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.7" y="718.0"></text>
</g>
<g>
<title>io/netty/buffer/ByteBufUtil.writeShortBE (12 samples, 0.14%)</title><rect x="206.0" y="915.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="209.0" y="926.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.writeShort (12 samples, 0.14%)</title><rect x="206.0" y="899.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="209.0" y="910.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (11 samples, 0.13%)</title><rect x="206.0" y="883.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="209.0" y="894.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (11 samples, 0.13%)</title><rect x="206.0" y="867.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.0" y="878.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (11 samples, 0.13%)</title><rect x="206.0" y="851.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="209.0" y="862.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (11 samples, 0.13%)</title><rect x="206.0" y="835.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.0" y="846.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (11 samples, 0.13%)</title><rect x="206.0" y="819.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.0" y="830.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (11 samples, 0.13%)</title><rect x="206.0" y="803.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="209.0" y="814.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (11 samples, 0.13%)</title><rect x="206.0" y="787.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="209.0" y="798.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (10 samples, 0.12%)</title><rect x="206.2" y="771.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="209.2" y="782.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (10 samples, 0.12%)</title><rect x="206.2" y="755.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="209.2" y="766.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (10 samples, 0.12%)</title><rect x="206.2" y="739.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="209.2" y="750.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (10 samples, 0.12%)</title><rect x="206.2" y="723.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="209.2" y="734.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.04%)</title><rect x="207.1" y="707.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="210.1" y="718.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (3 samples, 0.04%)</title><rect x="207.1" y="691.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="210.1" y="702.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.02%)</title><rect x="207.3" y="675.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="210.3" y="686.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectEncoder.encodeHeaders (210 samples, 2.50%)</title><rect x="207.8" y="915.0" width="29.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="210.8" y="926.0">io..</text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpHeadersEncoder.encoderHeader (210 samples, 2.50%)</title><rect x="207.8" y="899.0" width="29.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.8" y="910.0">io..</text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.ensureWritable (33 samples, 0.39%)</title><rect x="207.8" y="883.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="210.8" y="894.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (33 samples, 0.39%)</title><rect x="207.8" y="867.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.8" y="878.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (33 samples, 0.39%)</title><rect x="207.8" y="851.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="210.8" y="862.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (33 samples, 0.39%)</title><rect x="207.8" y="835.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.8" y="846.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (33 samples, 0.39%)</title><rect x="207.8" y="819.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.8" y="830.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (33 samples, 0.39%)</title><rect x="207.8" y="803.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="210.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (33 samples, 0.39%)</title><rect x="207.8" y="787.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="210.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (33 samples, 0.39%)</title><rect x="207.8" y="771.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="210.8" y="782.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (33 samples, 0.39%)</title><rect x="207.8" y="755.0" width="4.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="210.8" y="766.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (33 samples, 0.39%)</title><rect x="207.8" y="739.0" width="4.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="210.8" y="750.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (33 samples, 0.39%)</title><rect x="207.8" y="723.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="210.8" y="734.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (2 samples, 0.02%)</title><rect x="207.8" y="707.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="210.8" y="718.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (31 samples, 0.37%)</title><rect x="208.1" y="707.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="211.1" y="718.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (2 samples, 0.02%)</title><rect x="210.8" y="691.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="213.8" y="702.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (2 samples, 0.02%)</title><rect x="211.2" y="691.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="214.2" y="702.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (7 samples, 0.08%)</title><rect x="211.5" y="691.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="214.5" y="702.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (3 samples, 0.04%)</title><rect x="212.1" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="215.1" y="686.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="212.1" y="659.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="215.1" y="670.0"></text>
</g>
<g>
<title>io/netty/buffer/ByteBufUtil.setShortBE (82 samples, 0.98%)</title><rect x="212.5" y="883.0" width="11.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="215.5" y="894.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.setShort (82 samples, 0.98%)</title><rect x="212.5" y="867.0" width="11.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="215.5" y="878.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (82 samples, 0.98%)</title><rect x="212.5" y="851.0" width="11.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.5" y="862.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (82 samples, 0.98%)</title><rect x="212.5" y="835.0" width="11.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="215.5" y="846.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (82 samples, 0.98%)</title><rect x="212.5" y="819.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.5" y="830.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (82 samples, 0.98%)</title><rect x="212.5" y="803.0" width="11.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (80 samples, 0.95%)</title><rect x="212.8" y="787.0" width="11.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="215.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (80 samples, 0.95%)</title><rect x="212.8" y="771.0" width="11.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.8" y="782.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (80 samples, 0.95%)</title><rect x="212.8" y="755.0" width="11.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="215.8" y="766.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (80 samples, 0.95%)</title><rect x="212.8" y="739.0" width="11.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="215.8" y="750.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (79 samples, 0.94%)</title><rect x="212.8" y="723.0" width="11.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="215.8" y="734.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (78 samples, 0.93%)</title><rect x="212.9" y="707.0" width="11.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="215.9" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.04%)</title><rect x="212.9" y="691.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="215.9" y="702.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (2 samples, 0.02%)</title><rect x="213.6" y="691.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="216.6" y="702.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (69 samples, 0.82%)</title><rect x="214.2" y="691.0" width="9.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="217.2" y="702.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (8 samples, 0.10%)</title><rect x="219.4" y="675.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="222.4" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.07%)</title><rect x="219.6" y="659.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="222.6" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.07%)</title><rect x="219.6" y="643.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="222.6" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.06%)</title><rect x="219.6" y="627.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="222.6" y="638.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.04%)</title><rect x="219.6" y="611.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="222.6" y="622.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (7 samples, 0.08%)</title><rect x="220.5" y="675.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="223.5" y="686.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (4 samples, 0.05%)</title><rect x="220.8" y="659.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="223.8" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.05%)</title><rect x="220.8" y="643.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="223.8" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.05%)</title><rect x="220.8" y="627.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="223.8" y="638.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.04%)</title><rect x="220.9" y="611.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="223.9" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (13 samples, 0.15%)</title><rect x="222.0" y="675.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="225.0" y="686.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (11 samples, 0.13%)</title><rect x="222.3" y="659.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="225.3" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.05%)</title><rect x="222.6" y="643.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="225.6" y="654.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.05%)</title><rect x="223.2" y="643.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="226.2" y="654.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpHeadersEncoder.writeAscii (94 samples, 1.12%)</title><rect x="224.0" y="883.0" width="13.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.0" y="894.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.setCharSequence (41 samples, 0.49%)</title><rect x="224.0" y="867.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.0" y="878.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (41 samples, 0.49%)</title><rect x="224.0" y="851.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.0" y="862.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (41 samples, 0.49%)</title><rect x="224.0" y="835.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="227.0" y="846.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (41 samples, 0.49%)</title><rect x="224.0" y="819.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.0" y="830.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (41 samples, 0.49%)</title><rect x="224.0" y="803.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.0" y="814.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (39 samples, 0.46%)</title><rect x="224.3" y="787.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (39 samples, 0.46%)</title><rect x="224.3" y="771.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.3" y="782.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (39 samples, 0.46%)</title><rect x="224.3" y="755.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="227.3" y="766.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (38 samples, 0.45%)</title><rect x="224.4" y="739.0" width="5.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="227.4" y="750.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (38 samples, 0.45%)</title><rect x="224.4" y="723.0" width="5.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="227.4" y="734.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (37 samples, 0.44%)</title><rect x="224.6" y="707.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="227.6" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.04%)</title><rect x="224.6" y="691.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="227.6" y="702.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (32 samples, 0.38%)</title><rect x="225.3" y="691.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="228.3" y="702.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (4 samples, 0.05%)</title><rect x="227.6" y="675.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="230.6" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.02%)</title><rect x="227.9" y="659.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="230.9" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="227.9" y="643.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="230.9" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="227.9" y="627.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="230.9" y="638.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (2 samples, 0.02%)</title><rect x="228.2" y="675.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="231.2" y="686.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (2 samples, 0.02%)</title><rect x="228.2" y="659.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="231.2" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="228.2" y="643.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="231.2" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="228.2" y="627.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="231.2" y="638.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.02%)</title><rect x="228.2" y="611.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="231.2" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (9 samples, 0.11%)</title><rect x="228.5" y="675.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="231.5" y="686.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (8 samples, 0.10%)</title><rect x="228.6" y="659.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="231.6" y="670.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.05%)</title><rect x="229.2" y="643.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="232.2" y="654.0"></text>
</g>
<g>
<title>io/netty/buffer/ByteBufUtil.copy (53 samples, 0.63%)</title><rect x="229.8" y="867.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.8" y="878.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.setBytes (53 samples, 0.63%)</title><rect x="229.8" y="851.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="232.8" y="862.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (52 samples, 0.62%)</title><rect x="229.8" y="835.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.8" y="846.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (51 samples, 0.61%)</title><rect x="229.8" y="819.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.8" y="830.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (51 samples, 0.61%)</title><rect x="229.8" y="803.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.8" y="814.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (51 samples, 0.61%)</title><rect x="229.8" y="787.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (51 samples, 0.61%)</title><rect x="229.8" y="771.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="232.8" y="782.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (51 samples, 0.61%)</title><rect x="229.8" y="755.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.8" y="766.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (51 samples, 0.61%)</title><rect x="229.8" y="739.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.8" y="750.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (50 samples, 0.60%)</title><rect x="229.9" y="723.0" width="7.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="232.9" y="734.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (50 samples, 0.60%)</title><rect x="229.9" y="707.0" width="7.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="232.9" y="718.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (49 samples, 0.58%)</title><rect x="230.0" y="691.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="233.0" y="702.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.05%)</title><rect x="230.0" y="675.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="233.0" y="686.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (3 samples, 0.04%)</title><rect x="230.6" y="675.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="233.6" y="686.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (41 samples, 0.49%)</title><rect x="231.0" y="675.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="234.0" y="686.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (4 samples, 0.05%)</title><rect x="234.4" y="659.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="237.4" y="670.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (2 samples, 0.02%)</title><rect x="234.5" y="643.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="237.5" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="234.5" y="627.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="237.5" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="234.5" y="611.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="237.5" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (8 samples, 0.10%)</title><rect x="235.7" y="659.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="238.7" y="670.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (3 samples, 0.04%)</title><rect x="236.4" y="643.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="239.4" y="654.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.02%)</title><rect x="236.5" y="627.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="239.5" y="638.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpResponseEncoder.encodeInitialLine (59 samples, 0.70%)</title><rect x="237.3" y="915.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.3" y="926.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpResponseEncoder.encodeInitialLine (59 samples, 0.70%)</title><rect x="237.3" y="899.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.3" y="910.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.writeByte (13 samples, 0.15%)</title><rect x="237.3" y="883.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.3" y="894.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (12 samples, 0.14%)</title><rect x="237.3" y="867.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.3" y="878.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (12 samples, 0.14%)</title><rect x="237.3" y="851.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="240.3" y="862.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (12 samples, 0.14%)</title><rect x="237.3" y="835.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.3" y="846.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (12 samples, 0.14%)</title><rect x="237.3" y="819.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.3" y="830.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (12 samples, 0.14%)</title><rect x="237.3" y="803.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.3" y="814.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (12 samples, 0.14%)</title><rect x="237.3" y="787.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (12 samples, 0.14%)</title><rect x="237.3" y="771.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.3" y="782.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (12 samples, 0.14%)</title><rect x="237.3" y="755.0" width="1.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="240.3" y="766.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (12 samples, 0.14%)</title><rect x="237.3" y="739.0" width="1.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="240.3" y="750.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (12 samples, 0.14%)</title><rect x="237.3" y="723.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="240.3" y="734.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (12 samples, 0.14%)</title><rect x="237.3" y="707.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="240.3" y="718.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.05%)</title><rect x="238.5" y="691.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="241.5" y="702.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (3 samples, 0.04%)</title><rect x="238.6" y="675.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="241.6" y="686.0"></text>
</g>
<g>
<title>io/netty/buffer/ByteBufUtil.writeShortBE (11 samples, 0.13%)</title><rect x="239.2" y="883.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.2" y="894.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.writeShort (11 samples, 0.13%)</title><rect x="239.2" y="867.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.2" y="878.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (11 samples, 0.13%)</title><rect x="239.2" y="851.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.2" y="862.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (11 samples, 0.13%)</title><rect x="239.2" y="835.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.2" y="846.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (11 samples, 0.13%)</title><rect x="239.2" y="819.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.2" y="830.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (11 samples, 0.13%)</title><rect x="239.2" y="803.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="242.2" y="814.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (11 samples, 0.13%)</title><rect x="239.2" y="787.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.2" y="798.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (11 samples, 0.13%)</title><rect x="239.2" y="771.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="242.2" y="782.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (11 samples, 0.13%)</title><rect x="239.2" y="755.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="242.2" y="766.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (11 samples, 0.13%)</title><rect x="239.2" y="739.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="242.2" y="750.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (11 samples, 0.13%)</title><rect x="239.2" y="723.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="242.2" y="734.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (11 samples, 0.13%)</title><rect x="239.2" y="707.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="242.2" y="718.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (11 samples, 0.13%)</title><rect x="239.2" y="691.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="242.2" y="702.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.02%)</title><rect x="240.0" y="675.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="243.0" y="686.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpResponseStatus.encode (20 samples, 0.24%)</title><rect x="240.7" y="883.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="243.7" y="894.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.writeBytes (19 samples, 0.23%)</title><rect x="240.9" y="867.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.9" y="878.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (19 samples, 0.23%)</title><rect x="240.9" y="851.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.9" y="862.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (19 samples, 0.23%)</title><rect x="240.9" y="835.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="243.9" y="846.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (19 samples, 0.23%)</title><rect x="240.9" y="819.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.9" y="830.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (19 samples, 0.23%)</title><rect x="240.9" y="803.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="243.9" y="814.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (19 samples, 0.23%)</title><rect x="240.9" y="787.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="243.9" y="798.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (19 samples, 0.23%)</title><rect x="240.9" y="771.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="243.9" y="782.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (19 samples, 0.23%)</title><rect x="240.9" y="755.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.9" y="766.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (19 samples, 0.23%)</title><rect x="240.9" y="739.0" width="2.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="243.9" y="750.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (19 samples, 0.23%)</title><rect x="240.9" y="723.0" width="2.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="243.9" y="734.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (19 samples, 0.23%)</title><rect x="240.9" y="707.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="243.9" y="718.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (17 samples, 0.20%)</title><rect x="241.1" y="691.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="244.1" y="702.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.05%)</title><rect x="243.0" y="675.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="246.0" y="686.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (4 samples, 0.05%)</title><rect x="243.0" y="659.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="246.0" y="670.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.02%)</title><rect x="243.0" y="643.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="246.0" y="654.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.02%)</title><rect x="243.2" y="643.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="246.2" y="654.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpVersion.encode (15 samples, 0.18%)</title><rect x="243.5" y="883.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.5" y="894.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.writeBytes (15 samples, 0.18%)</title><rect x="243.5" y="867.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="246.5" y="878.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (15 samples, 0.18%)</title><rect x="243.5" y="851.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.5" y="862.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (15 samples, 0.18%)</title><rect x="243.5" y="835.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="246.5" y="846.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (15 samples, 0.18%)</title><rect x="243.5" y="819.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="246.5" y="830.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (15 samples, 0.18%)</title><rect x="243.5" y="803.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (15 samples, 0.18%)</title><rect x="243.5" y="787.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="246.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (14 samples, 0.17%)</title><rect x="243.7" y="771.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.7" y="782.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (14 samples, 0.17%)</title><rect x="243.7" y="755.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.7" y="766.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (14 samples, 0.17%)</title><rect x="243.7" y="739.0" width="1.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="246.7" y="750.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (14 samples, 0.17%)</title><rect x="243.7" y="723.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="246.7" y="734.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (14 samples, 0.17%)</title><rect x="243.7" y="707.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="246.7" y="718.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (14 samples, 0.17%)</title><rect x="243.7" y="691.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="246.7" y="702.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (8 samples, 0.10%)</title><rect x="244.5" y="675.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="247.5" y="686.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (7 samples, 0.08%)</title><rect x="244.7" y="659.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="247.7" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.04%)</title><rect x="244.9" y="643.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="247.9" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Replicas.replicaNettyFactor (7 samples, 0.08%)</title><rect x="246.1" y="1267.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.1" y="1278.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Replicas.parser (7 samples, 0.08%)</title><rect x="246.1" y="1251.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.split (6 samples, 0.07%)</title><rect x="246.2" y="1235.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.split (6 samples, 0.07%)</title><rect x="246.2" y="1219.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.2" y="1230.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_array_post_entry(HeapWord*, unsigned long) (2 samples, 0.02%)</title><rect x="246.5" y="1203.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="249.5" y="1214.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.touch (119 samples, 1.42%)</title><rect x="247.0" y="1347.0" width="16.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="250.0" y="1358.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.touch (119 samples, 1.42%)</title><rect x="247.0" y="1331.0" width="16.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.0" y="1342.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator$AggregatedFullHttpRequest.touch (118 samples, 1.41%)</title><rect x="247.2" y="1315.0" width="16.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.2" y="1326.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator$AggregatedFullHttpRequest.touch (116 samples, 1.38%)</title><rect x="247.5" y="1299.0" width="16.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.5" y="1310.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator$AggregatedFullHttpMessage.touch (116 samples, 1.38%)</title><rect x="247.5" y="1283.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.5" y="1294.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareCompositeByteBuf.touch (116 samples, 1.38%)</title><rect x="247.5" y="1267.0" width="16.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="250.5" y="1278.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareCompositeByteBuf.touch (116 samples, 1.38%)</title><rect x="247.5" y="1251.0" width="16.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="250.5" y="1262.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (116 samples, 1.38%)</title><rect x="247.5" y="1235.0" width="16.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.5" y="1246.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (115 samples, 1.37%)</title><rect x="247.6" y="1219.0" width="16.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.6" y="1230.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (115 samples, 1.37%)</title><rect x="247.6" y="1203.0" width="16.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.6" y="1214.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.toHintString (2 samples, 0.02%)</title><rect x="247.6" y="1187.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (113 samples, 1.35%)</title><rect x="247.9" y="1187.0" width="15.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="250.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (112 samples, 1.33%)</title><rect x="248.0" y="1171.0" width="15.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (112 samples, 1.33%)</title><rect x="248.0" y="1155.0" width="15.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.0" y="1166.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (112 samples, 1.33%)</title><rect x="248.0" y="1139.0" width="15.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="251.0" y="1150.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (112 samples, 1.33%)</title><rect x="248.0" y="1123.0" width="15.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="251.0" y="1134.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (111 samples, 1.32%)</title><rect x="248.2" y="1107.0" width="15.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="251.2" y="1118.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.06%)</title><rect x="248.2" y="1091.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="251.2" y="1102.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (7 samples, 0.08%)</title><rect x="249.4" y="1091.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="252.4" y="1102.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (2 samples, 0.02%)</title><rect x="250.8" y="1091.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="253.8" y="1102.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (90 samples, 1.07%)</title><rect x="251.1" y="1091.0" width="12.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="254.1" y="1102.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.02%)</title><rect x="257.0" y="1075.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="260.0" y="1086.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;574518ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 574518ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (3 samples, 0.04%)</title><rect x="257.3" y="1075.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="260.3" y="1086.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (5 samples, 0.06%)</title><rect x="257.7" y="1075.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="260.7" y="1086.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (3 samples, 0.04%)</title><rect x="257.7" y="1059.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="260.7" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="257.7" y="1043.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="260.7" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="257.7" y="1027.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="260.7" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.02%)</title><rect x="258.1" y="1059.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="261.1" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="258.1" y="1043.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="261.1" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="258.1" y="1027.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="261.1" y="1038.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.02%)</title><rect x="258.1" y="1011.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="261.1" y="1022.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (8 samples, 0.10%)</title><rect x="258.4" y="1075.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="261.4" y="1086.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (2 samples, 0.02%)</title><rect x="258.8" y="1059.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="261.8" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.04%)</title><rect x="259.1" y="1059.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="262.1" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="259.1" y="1043.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="262.1" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="259.1" y="1027.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="262.1" y="1038.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.02%)</title><rect x="259.3" y="1011.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="262.3" y="1022.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (26 samples, 0.31%)</title><rect x="260.1" y="1075.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="263.1" y="1086.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (20 samples, 0.24%)</title><rect x="261.0" y="1059.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="264.0" y="1070.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.04%)</title><rect x="261.4" y="1043.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="264.4" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (12 samples, 0.14%)</title><rect x="261.8" y="1043.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="264.8" y="1054.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.02%)</title><rect x="263.5" y="1043.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="266.5" y="1054.0"></text>
</g>
<g>
<title>io/netty/handler/codec/CodecOutputList.newInstance (2 samples, 0.02%)</title><rect x="263.8" y="1379.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="266.8" y="1390.0"></text>
</g>
<g>
<title>io/netty/handler/codec/CodecOutputList.recycle (2 samples, 0.02%)</title><rect x="264.0" y="1379.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.0" y="1390.0"></text>
</g>
<g>
<title>io/netty/handler/codec/MessageAggregator.acceptInboundMessage (2 samples, 0.02%)</title><rect x="264.3" y="1379.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="267.3" y="1390.0"></text>
</g>
<g>
<title>io/netty/handler/codec/MessageAggregator.decode (169 samples, 2.01%)</title><rect x="264.6" y="1379.0" width="23.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.6" y="1390.0">i..</text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.compositeBuffer (127 samples, 1.51%)</title><rect x="265.4" y="1363.0" width="17.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.4" y="1374.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.compositeDirectBuffer (127 samples, 1.51%)</title><rect x="265.4" y="1347.0" width="17.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.4" y="1358.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.toLeakAwareBuffer (122 samples, 1.45%)</title><rect x="265.6" y="1331.0" width="17.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.6" y="1342.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareCompositeByteBuf.&lt;init&gt; (2 samples, 0.02%)</title><rect x="265.6" y="1315.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.6" y="1326.0"></text>
</g>
<g>
<title>io/netty/buffer/SimpleLeakAwareCompositeByteBuf.&lt;init&gt; (2 samples, 0.02%)</title><rect x="265.6" y="1299.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.6" y="1310.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track (120 samples, 1.43%)</title><rect x="265.9" y="1315.0" width="16.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.9" y="1326.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track0 (120 samples, 1.43%)</title><rect x="265.9" y="1299.0" width="16.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.9" y="1310.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.&lt;init&gt; (120 samples, 1.43%)</title><rect x="265.9" y="1283.0" width="16.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="268.9" y="1294.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (104 samples, 1.24%)</title><rect x="265.9" y="1267.0" width="14.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="268.9" y="1278.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (104 samples, 1.24%)</title><rect x="265.9" y="1251.0" width="14.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (104 samples, 1.24%)</title><rect x="265.9" y="1235.0" width="14.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.9" y="1246.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (103 samples, 1.23%)</title><rect x="266.0" y="1219.0" width="14.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.0" y="1230.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (101 samples, 1.20%)</title><rect x="266.3" y="1203.0" width="14.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="269.3" y="1214.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (100 samples, 1.19%)</title><rect x="266.4" y="1187.0" width="14.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="269.4" y="1198.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (97 samples, 1.16%)</title><rect x="266.7" y="1171.0" width="13.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="269.7" y="1182.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.04%)</title><rect x="266.7" y="1155.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="269.7" y="1166.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.02%)</title><rect x="267.1" y="1155.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="270.1" y="1166.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (4 samples, 0.05%)</title><rect x="267.6" y="1155.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="270.6" y="1166.0"></text>
</g>
<g>
<title>frame::interpreter_frame_bcp() const (2 samples, 0.02%)</title><rect x="268.3" y="1155.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="271.3" y="1166.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (82 samples, 0.98%)</title><rect x="268.7" y="1155.0" width="11.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="271.7" y="1166.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.02%)</title><rect x="275.0" y="1139.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="278.0" y="1150.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;574518ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 574518ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.02%)</title><rect x="275.3" y="1139.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="278.3" y="1150.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (8 samples, 0.10%)</title><rect x="275.6" y="1139.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="278.6" y="1150.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (4 samples, 0.05%)</title><rect x="275.7" y="1123.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="278.7" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="276.0" y="1107.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="279.0" y="1118.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.04%)</title><rect x="276.3" y="1123.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="279.3" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="276.3" y="1107.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="279.3" y="1118.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="276.3" y="1091.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="279.3" y="1102.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.02%)</title><rect x="276.3" y="1075.0" width="0.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="279.3" y="1086.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (6 samples, 0.07%)</title><rect x="276.7" y="1139.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="279.7" y="1150.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (3 samples, 0.04%)</title><rect x="276.7" y="1123.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="279.7" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="276.7" y="1107.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="279.7" y="1118.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="276.7" y="1091.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="279.7" y="1102.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.04%)</title><rect x="277.1" y="1123.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="280.1" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="277.1" y="1107.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="280.1" y="1118.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="277.1" y="1091.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="280.1" y="1102.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.02%)</title><rect x="277.2" y="1075.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="280.2" y="1086.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (18 samples, 0.21%)</title><rect x="277.7" y="1139.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="280.7" y="1150.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (14 samples, 0.17%)</title><rect x="278.2" y="1123.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="281.2" y="1134.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (8 samples, 0.10%)</title><rect x="278.8" y="1107.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="281.8" y="1118.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.02%)</title><rect x="279.9" y="1107.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="282.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/System.identityHashCode (8 samples, 0.10%)</title><rect x="280.5" y="1267.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.5" y="1278.0"></text>
</g>
<g>
<title>JVM_IHashCode (6 samples, 0.07%)</title><rect x="280.6" y="1251.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="283.6" y="1262.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (2 samples, 0.02%)</title><rect x="280.9" y="1235.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="283.9" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$SetFromMap.add (7 samples, 0.08%)</title><rect x="281.7" y="1267.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.put (7 samples, 0.08%)</title><rect x="281.7" y="1251.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="284.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putVal (7 samples, 0.08%)</title><rect x="281.7" y="1235.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (4 samples, 0.05%)</title><rect x="281.9" y="1219.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.9" y="1230.0"></text>
</g>
<g>
<title>JVM_IHashCode (3 samples, 0.04%)</title><rect x="282.0" y="1203.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="285.0" y="1214.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (2 samples, 0.02%)</title><rect x="282.0" y="1187.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="285.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Node.&lt;init&gt; (2 samples, 0.02%)</title><rect x="282.4" y="1219.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.4" y="1230.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf.&lt;init&gt; (4 samples, 0.05%)</title><rect x="282.7" y="1331.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="285.7" y="1342.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf.&lt;init&gt; (2 samples, 0.02%)</title><rect x="282.9" y="1315.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.9" y="1326.0"></text>
</g>
<g>
<title>io/netty/handler/codec/MessageAggregator.finishAggregation0 (6 samples, 0.07%)</title><rect x="283.4" y="1363.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.4" y="1374.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator.finishAggregation (6 samples, 0.07%)</title><rect x="283.4" y="1347.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.4" y="1358.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator.finishAggregation (5 samples, 0.06%)</title><rect x="283.6" y="1331.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.6" y="1342.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.set (2 samples, 0.02%)</title><rect x="283.6" y="1315.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="286.6" y="1326.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpUtil.isContentLengthSet (3 samples, 0.04%)</title><rect x="283.9" y="1315.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.9" y="1326.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.contains (3 samples, 0.04%)</title><rect x="283.9" y="1299.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="286.9" y="1310.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.contains (3 samples, 0.04%)</title><rect x="283.9" y="1283.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="286.9" y="1294.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.get (3 samples, 0.04%)</title><rect x="283.9" y="1267.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="286.9" y="1278.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString$1.hashCode (3 samples, 0.04%)</title><rect x="283.9" y="1251.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="286.9" y="1262.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString$1.hashCode (3 samples, 0.04%)</title><rect x="283.9" y="1235.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="286.9" y="1246.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString.hashCode (3 samples, 0.04%)</title><rect x="283.9" y="1219.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="286.9" y="1230.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.hashCodeAscii (3 samples, 0.04%)</title><rect x="283.9" y="1203.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.9" y="1214.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.hashCodeAsciiSanitizeInt (2 samples, 0.02%)</title><rect x="284.0" y="1187.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.02%)</title><rect x="284.0" y="1171.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="287.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.02%)</title><rect x="284.0" y="1155.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.0" y="1166.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator.aggregate (2 samples, 0.02%)</title><rect x="284.3" y="1363.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="287.3" y="1374.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator.aggregate (2 samples, 0.02%)</title><rect x="284.3" y="1347.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.3" y="1358.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator$AggregatedFullHttpMessage.setTrailingHeaders (2 samples, 0.02%)</title><rect x="284.3" y="1331.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="287.3" y="1342.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.02%)</title><rect x="284.3" y="1315.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="287.3" y="1326.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator.beginAggregation (7 samples, 0.08%)</title><rect x="284.6" y="1363.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="287.6" y="1374.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator.beginAggregation (7 samples, 0.08%)</title><rect x="284.6" y="1347.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="287.6" y="1358.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpUtil.setTransferEncodingChunked (6 samples, 0.07%)</title><rect x="284.7" y="1331.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.7" y="1342.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.getAll (4 samples, 0.05%)</title><rect x="284.7" y="1315.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="287.7" y="1326.0"></text>
</g>
<g>
<title>io/netty/handler/codec/HeadersUtils.getAllAsString (2 samples, 0.02%)</title><rect x="285.0" y="1299.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.0" y="1310.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (2 samples, 0.02%)</title><rect x="285.3" y="1315.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.3" y="1326.0"></text>
</g>
<g>
<title>io/netty/handler/codec/HeadersUtils$1.size (2 samples, 0.02%)</title><rect x="285.3" y="1299.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.3" y="1310.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator.isContentLengthInvalid (11 samples, 0.13%)</title><rect x="285.5" y="1363.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.5" y="1374.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator.isContentLengthInvalid (10 samples, 0.12%)</title><rect x="285.7" y="1347.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="288.7" y="1358.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpUtil.getContentLength (10 samples, 0.12%)</title><rect x="285.7" y="1331.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.7" y="1342.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.get (2 samples, 0.02%)</title><rect x="286.0" y="1315.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.0" y="1326.0"></text>
</g>
<g>
<title>io/netty/handler/codec/HeadersUtils.getAsString (2 samples, 0.02%)</title><rect x="286.0" y="1299.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="289.0" y="1310.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.get (2 samples, 0.02%)</title><rect x="286.0" y="1283.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.0" y="1294.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString$1.hashCode (2 samples, 0.02%)</title><rect x="286.0" y="1267.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.0" y="1278.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString$1.hashCode (2 samples, 0.02%)</title><rect x="286.0" y="1251.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.0" y="1262.0"></text>
</g>
<g>
<title>io/netty/util/AsciiString.hashCode (2 samples, 0.02%)</title><rect x="286.0" y="1235.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.0" y="1246.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.hashCodeAscii (2 samples, 0.02%)</title><rect x="286.0" y="1219.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (5 samples, 0.06%)</title><rect x="286.4" y="1315.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (5 samples, 0.06%)</title><rect x="286.4" y="1299.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.04%)</title><rect x="286.5" y="1283.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="289.5" y="1294.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.04%)</title><rect x="286.5" y="1267.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="289.5" y="1278.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (2 samples, 0.02%)</title><rect x="286.7" y="1251.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.7" y="1262.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator.newContinueResponse (9 samples, 0.11%)</title><rect x="287.1" y="1363.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="290.1" y="1374.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator.newContinueResponse (8 samples, 0.10%)</title><rect x="287.2" y="1347.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.2" y="1358.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectAggregator.continueResponse (8 samples, 0.10%)</title><rect x="287.2" y="1331.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.2" y="1342.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpUtil.is100ContinueExpected (4 samples, 0.05%)</title><rect x="287.2" y="1315.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.2" y="1326.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.contains (3 samples, 0.04%)</title><rect x="287.2" y="1299.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.2" y="1310.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.contains (2 samples, 0.02%)</title><rect x="287.4" y="1283.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.4" y="1294.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpUtil.isUnsupportedExpectation (4 samples, 0.05%)</title><rect x="287.8" y="1315.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.8" y="1326.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpUtil.isExpectHeaderValid (3 samples, 0.04%)</title><rect x="287.9" y="1299.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.9" y="1310.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpVersion.compareTo (2 samples, 0.02%)</title><rect x="288.1" y="1283.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="291.1" y="1294.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.release (3 samples, 0.04%)</title><rect x="288.3" y="1379.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="291.3" y="1390.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.02%)</title><rect x="289.1" y="1427.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="292.1" y="1438.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.touch (3 samples, 0.04%)</title><rect x="289.3" y="1507.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.3" y="1518.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.touch (52 samples, 0.62%)</title><rect x="290.3" y="1587.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="293.3" y="1598.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.touch (52 samples, 0.62%)</title><rect x="290.3" y="1571.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.3" y="1582.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.touch (52 samples, 0.62%)</title><rect x="290.3" y="1555.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="293.3" y="1566.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.touch (52 samples, 0.62%)</title><rect x="290.3" y="1539.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="293.3" y="1550.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (52 samples, 0.62%)</title><rect x="290.3" y="1523.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.3" y="1534.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (52 samples, 0.62%)</title><rect x="290.3" y="1507.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="293.3" y="1518.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (52 samples, 0.62%)</title><rect x="290.3" y="1491.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="293.3" y="1502.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (51 samples, 0.61%)</title><rect x="290.5" y="1475.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="293.5" y="1486.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (50 samples, 0.60%)</title><rect x="290.6" y="1459.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.6" y="1470.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (50 samples, 0.60%)</title><rect x="290.6" y="1443.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.6" y="1454.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (49 samples, 0.58%)</title><rect x="290.7" y="1427.0" width="6.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="293.7" y="1438.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (49 samples, 0.58%)</title><rect x="290.7" y="1411.0" width="6.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="293.7" y="1422.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (47 samples, 0.56%)</title><rect x="291.0" y="1395.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="294.0" y="1406.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.02%)</title><rect x="291.2" y="1379.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="294.2" y="1390.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (2 samples, 0.02%)</title><rect x="291.4" y="1379.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="294.4" y="1390.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (39 samples, 0.46%)</title><rect x="292.1" y="1379.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="295.1" y="1390.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (2 samples, 0.02%)</title><rect x="295.1" y="1363.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="298.1" y="1374.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (2 samples, 0.02%)</title><rect x="295.1" y="1347.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="298.1" y="1358.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (3 samples, 0.04%)</title><rect x="295.4" y="1363.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="298.4" y="1374.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (13 samples, 0.15%)</title><rect x="295.8" y="1363.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="298.8" y="1374.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (10 samples, 0.12%)</title><rect x="296.2" y="1347.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="299.2" y="1358.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.05%)</title><rect x="296.9" y="1331.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="299.9" y="1342.0"></text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.channelRead (2 samples, 0.02%)</title><rect x="297.6" y="1603.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="300.6" y="1614.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.touch (70 samples, 0.83%)</title><rect x="298.0" y="1651.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="301.0" y="1662.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.touch (68 samples, 0.81%)</title><rect x="298.2" y="1635.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="301.2" y="1646.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.touch (65 samples, 0.77%)</title><rect x="298.2" y="1619.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.2" y="1630.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.touch (65 samples, 0.77%)</title><rect x="298.2" y="1603.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="301.2" y="1614.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (64 samples, 0.76%)</title><rect x="298.3" y="1587.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.3" y="1598.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (63 samples, 0.75%)</title><rect x="298.5" y="1571.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.5" y="1582.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (63 samples, 0.75%)</title><rect x="298.5" y="1555.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.5" y="1566.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.toHintString (3 samples, 0.04%)</title><rect x="298.7" y="1539.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.7" y="1550.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.02%)</title><rect x="299.2" y="1539.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="302.2" y="1550.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (56 samples, 0.67%)</title><rect x="299.4" y="1539.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.4" y="1550.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (55 samples, 0.65%)</title><rect x="299.6" y="1523.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.6" y="1534.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (55 samples, 0.65%)</title><rect x="299.6" y="1507.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.6" y="1518.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (51 samples, 0.61%)</title><rect x="300.2" y="1491.0" width="7.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="303.2" y="1502.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (51 samples, 0.61%)</title><rect x="300.2" y="1475.0" width="7.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="303.2" y="1486.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.02%)</title><rect x="300.4" y="1459.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="303.4" y="1470.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (47 samples, 0.56%)</title><rect x="300.7" y="1459.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="303.7" y="1470.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (3 samples, 0.04%)</title><rect x="301.0" y="1443.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="304.0" y="1454.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.02%)</title><rect x="301.6" y="1443.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="304.6" y="1454.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (38 samples, 0.45%)</title><rect x="302.0" y="1443.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="305.0" y="1454.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (8 samples, 0.10%)</title><rect x="304.8" y="1427.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="307.8" y="1438.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.02%)</title><rect x="304.9" y="1411.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="307.9" y="1422.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (3 samples, 0.04%)</title><rect x="305.2" y="1411.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="308.2" y="1422.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="305.2" y="1395.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="308.2" y="1406.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="305.2" y="1379.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="308.2" y="1390.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.02%)</title><rect x="305.6" y="1411.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="308.6" y="1422.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="305.6" y="1395.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="308.6" y="1406.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="305.6" y="1379.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="308.6" y="1390.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (6 samples, 0.07%)</title><rect x="306.5" y="1427.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="309.5" y="1438.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (5 samples, 0.06%)</title><rect x="306.6" y="1411.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="309.6" y="1422.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (5 samples, 0.06%)</title><rect x="306.6" y="1395.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="309.6" y="1406.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.02%)</title><rect x="307.5" y="1619.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="310.5" y="1630.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.fireChannelReadComplete (40 samples, 0.48%)</title><rect x="307.9" y="1683.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.9" y="1694.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (40 samples, 0.48%)</title><rect x="307.9" y="1667.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.9" y="1678.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (40 samples, 0.48%)</title><rect x="307.9" y="1651.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="310.9" y="1662.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.channelReadComplete (39 samples, 0.46%)</title><rect x="307.9" y="1635.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.9" y="1646.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelReadComplete (26 samples, 0.31%)</title><rect x="307.9" y="1619.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.9" y="1630.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (25 samples, 0.30%)</title><rect x="307.9" y="1603.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="310.9" y="1614.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (24 samples, 0.29%)</title><rect x="308.0" y="1587.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.0" y="1598.0"></text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.channelReadComplete (22 samples, 0.26%)</title><rect x="308.2" y="1571.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.2" y="1582.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelReadComplete (16 samples, 0.19%)</title><rect x="308.2" y="1555.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.2" y="1566.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (15 samples, 0.18%)</title><rect x="308.2" y="1539.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="311.2" y="1550.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (15 samples, 0.18%)</title><rect x="308.2" y="1523.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.2" y="1534.0"></text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler.channelReadComplete (15 samples, 0.18%)</title><rect x="308.2" y="1507.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="311.2" y="1518.0"></text>
</g>
<g>
<title>io/netty/handler/codec/ByteToMessageDecoder.channelReadComplete (15 samples, 0.18%)</title><rect x="308.2" y="1491.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.2" y="1502.0"></text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelReadComplete (11 samples, 0.13%)</title><rect x="308.4" y="1475.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.4" y="1486.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelReadComplete (11 samples, 0.13%)</title><rect x="308.4" y="1459.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.4" y="1470.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (11 samples, 0.13%)</title><rect x="308.4" y="1443.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="311.4" y="1454.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (11 samples, 0.13%)</title><rect x="308.4" y="1427.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="311.4" y="1438.0"></text>
</g>
<g>
<title>io/netty/handler/codec/MessageAggregator.channelReadComplete (11 samples, 0.13%)</title><rect x="308.4" y="1411.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.4" y="1422.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelReadComplete (11 samples, 0.13%)</title><rect x="308.4" y="1395.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.4" y="1406.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (10 samples, 0.12%)</title><rect x="308.6" y="1379.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.6" y="1390.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelReadComplete (10 samples, 0.12%)</title><rect x="308.6" y="1363.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.6" y="1374.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelHandlerContext.handler (2 samples, 0.02%)</title><rect x="308.7" y="1347.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.7" y="1358.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/NettyRequests.channelReadComplete (7 samples, 0.08%)</title><rect x="309.0" y="1347.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.0" y="1358.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.flush (7 samples, 0.08%)</title><rect x="309.0" y="1331.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="312.0" y="1342.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush (7 samples, 0.08%)</title><rect x="309.0" y="1315.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="312.0" y="1326.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (7 samples, 0.08%)</title><rect x="309.0" y="1299.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="312.0" y="1310.0"></text>
</g>
<g>
<title>io/netty/handler/stream/ChunkedWriteHandler.flush (7 samples, 0.08%)</title><rect x="309.0" y="1283.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.0" y="1294.0"></text>
</g>
<g>
<title>io/netty/handler/stream/ChunkedWriteHandler.doFlush (7 samples, 0.08%)</title><rect x="309.0" y="1267.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.0" y="1278.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.flush (5 samples, 0.06%)</title><rect x="309.0" y="1251.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.0" y="1262.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush (5 samples, 0.06%)</title><rect x="309.0" y="1235.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="312.0" y="1246.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (5 samples, 0.06%)</title><rect x="309.0" y="1219.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.0" y="1230.0"></text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler.flush (5 samples, 0.06%)</title><rect x="309.0" y="1203.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="312.0" y="1214.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundHandlerAdapter.flush (5 samples, 0.06%)</title><rect x="309.0" y="1187.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="312.0" y="1198.0"></text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.flush (5 samples, 0.06%)</title><rect x="309.0" y="1171.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="312.0" y="1182.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.flush (5 samples, 0.06%)</title><rect x="309.0" y="1155.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="312.0" y="1166.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush (4 samples, 0.05%)</title><rect x="309.1" y="1139.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.1" y="1150.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (4 samples, 0.05%)</title><rect x="309.1" y="1123.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.1" y="1134.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.flush (2 samples, 0.02%)</title><rect x="309.4" y="1107.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.4" y="1118.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush (2 samples, 0.02%)</title><rect x="309.4" y="1091.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.4" y="1102.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (2 samples, 0.02%)</title><rect x="309.7" y="1251.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="312.7" y="1262.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (2 samples, 0.02%)</title><rect x="309.7" y="1235.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.7" y="1246.0"></text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelReadComplete (6 samples, 0.07%)</title><rect x="310.4" y="1555.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.4" y="1566.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelReadComplete (6 samples, 0.07%)</title><rect x="310.4" y="1539.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.4" y="1550.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.findContextInbound (5 samples, 0.06%)</title><rect x="310.4" y="1523.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="313.4" y="1534.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.executor (2 samples, 0.02%)</title><rect x="310.4" y="1507.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="313.4" y="1518.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.skipContext (3 samples, 0.04%)</title><rect x="310.7" y="1507.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.7" y="1518.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.executor (3 samples, 0.04%)</title><rect x="310.7" y="1491.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.7" y="1502.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel.eventLoop (3 samples, 0.04%)</title><rect x="310.7" y="1475.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="313.7" y="1486.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel.eventLoop (3 samples, 0.04%)</title><rect x="310.7" y="1459.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.7" y="1470.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.readIfIsAutoRead (13 samples, 0.15%)</title><rect x="311.5" y="1619.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="314.5" y="1630.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.read (8 samples, 0.10%)</title><rect x="311.7" y="1603.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="314.7" y="1614.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.read (8 samples, 0.10%)</title><rect x="311.7" y="1587.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="314.7" y="1598.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.read (7 samples, 0.08%)</title><rect x="311.8" y="1571.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.8" y="1582.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeRead (6 samples, 0.07%)</title><rect x="312.0" y="1555.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.0" y="1566.0"></text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler.read (6 samples, 0.07%)</title><rect x="312.0" y="1539.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="315.0" y="1550.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundHandlerAdapter.read (6 samples, 0.07%)</title><rect x="312.0" y="1523.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="315.0" y="1534.0"></text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.read (6 samples, 0.07%)</title><rect x="312.0" y="1507.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="315.0" y="1518.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.read (6 samples, 0.07%)</title><rect x="312.0" y="1491.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="315.0" y="1502.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.findContextOutbound (3 samples, 0.04%)</title><rect x="312.0" y="1475.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="315.0" y="1486.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.skipContext (2 samples, 0.02%)</title><rect x="312.1" y="1459.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="315.1" y="1470.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeRead (3 samples, 0.04%)</title><rect x="312.4" y="1475.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="315.4" y="1486.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.read (2 samples, 0.02%)</title><rect x="312.5" y="1459.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="315.5" y="1470.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.beginRead (2 samples, 0.02%)</title><rect x="312.5" y="1443.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.5" y="1454.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelConfig.isAutoRead (2 samples, 0.02%)</title><rect x="312.8" y="1603.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="315.8" y="1614.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultMaxMessagesRecvByteBufAllocator$MaxMessageHandle.allocate (124 samples, 1.48%)</title><rect x="313.5" y="1683.0" width="17.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.5" y="1694.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.ioBuffer (123 samples, 1.46%)</title><rect x="313.6" y="1667.0" width="17.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="316.6" y="1678.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (123 samples, 1.46%)</title><rect x="313.6" y="1651.0" width="17.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="316.6" y="1662.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (123 samples, 1.46%)</title><rect x="313.6" y="1635.0" width="17.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="316.6" y="1646.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBufAllocator.newDirectBuffer (123 samples, 1.46%)</title><rect x="313.6" y="1619.0" width="17.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="316.6" y="1630.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.toLeakAwareBuffer (107 samples, 1.27%)</title><rect x="313.6" y="1603.0" width="15.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="316.6" y="1614.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track (106 samples, 1.26%)</title><rect x="313.8" y="1587.0" width="14.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="316.8" y="1598.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track0 (106 samples, 1.26%)</title><rect x="313.8" y="1571.0" width="14.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="316.8" y="1582.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.&lt;init&gt; (105 samples, 1.25%)</title><rect x="313.9" y="1555.0" width="14.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="316.9" y="1566.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (86 samples, 1.02%)</title><rect x="313.9" y="1539.0" width="12.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="316.9" y="1550.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (86 samples, 1.02%)</title><rect x="313.9" y="1523.0" width="12.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="316.9" y="1534.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (86 samples, 1.02%)</title><rect x="313.9" y="1507.0" width="12.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.9" y="1518.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (85 samples, 1.01%)</title><rect x="314.1" y="1491.0" width="11.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="317.1" y="1502.0"></text>
</g>
<g>
<title>/usr/lib/jvm/java-11-openjdk-amd64/lib/libjava.so (2 samples, 0.02%)</title><rect x="314.3" y="1475.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="317.3" y="1486.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (81 samples, 0.96%)</title><rect x="314.6" y="1475.0" width="11.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="317.6" y="1486.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (80 samples, 0.95%)</title><rect x="314.6" y="1459.0" width="11.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="317.6" y="1470.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (79 samples, 0.94%)</title><rect x="314.8" y="1443.0" width="11.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="317.8" y="1454.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (8 samples, 0.10%)</title><rect x="314.8" y="1427.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="317.8" y="1438.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (3 samples, 0.04%)</title><rect x="316.2" y="1427.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="319.2" y="1438.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (61 samples, 0.73%)</title><rect x="317.3" y="1427.0" width="8.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="320.3" y="1438.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (3 samples, 0.04%)</title><rect x="320.0" y="1411.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="323.0" y="1422.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (17 samples, 0.20%)</title><rect x="320.7" y="1411.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="323.7" y="1422.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (10 samples, 0.12%)</title><rect x="321.1" y="1395.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="324.1" y="1406.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.07%)</title><rect x="321.7" y="1379.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="324.7" y="1390.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.07%)</title><rect x="321.7" y="1363.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="324.7" y="1374.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.02%)</title><rect x="321.9" y="1347.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="324.9" y="1358.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.05%)</title><rect x="322.5" y="1395.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="325.5" y="1406.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.05%)</title><rect x="322.5" y="1379.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="325.5" y="1390.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.05%)</title><rect x="322.5" y="1363.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="325.5" y="1374.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.04%)</title><rect x="322.6" y="1347.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="325.6" y="1358.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.02%)</title><rect x="323.2" y="1411.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="326.2" y="1422.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (2 samples, 0.02%)</title><rect x="323.8" y="1411.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="326.8" y="1422.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (13 samples, 0.15%)</title><rect x="324.0" y="1411.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="327.0" y="1422.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (12 samples, 0.14%)</title><rect x="324.2" y="1395.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="327.2" y="1406.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.04%)</title><rect x="324.5" y="1379.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="327.5" y="1390.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (6 samples, 0.07%)</title><rect x="324.9" y="1379.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="327.9" y="1390.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (2 samples, 0.02%)</title><rect x="326.0" y="1539.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="329.0" y="1550.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (2 samples, 0.02%)</title><rect x="326.0" y="1523.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="329.0" y="1534.0"></text>
</g>
<g>
<title>java/util/Collections$SetFromMap.add (17 samples, 0.20%)</title><rect x="326.3" y="1539.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="329.3" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.put (17 samples, 0.20%)</title><rect x="326.3" y="1523.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="329.3" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putVal (17 samples, 0.20%)</title><rect x="326.3" y="1507.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="329.3" y="1518.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (12 samples, 0.14%)</title><rect x="326.3" y="1491.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="329.3" y="1502.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.02%)</title><rect x="326.4" y="1475.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="329.4" y="1486.0"></text>
</g>
<g>
<title>JVM_IHashCode (8 samples, 0.10%)</title><rect x="326.7" y="1475.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="329.7" y="1486.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (4 samples, 0.05%)</title><rect x="327.0" y="1459.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="330.0" y="1470.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (2 samples, 0.02%)</title><rect x="327.3" y="1443.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="330.3" y="1454.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.02%)</title><rect x="327.6" y="1459.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="330.6" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Node.&lt;init&gt; (2 samples, 0.02%)</title><rect x="328.0" y="1491.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="331.0" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.addCount (2 samples, 0.02%)</title><rect x="328.3" y="1491.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="331.3" y="1502.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (16 samples, 0.19%)</title><rect x="328.7" y="1603.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="331.7" y="1614.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (15 samples, 0.18%)</title><rect x="328.8" y="1587.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="331.8" y="1598.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.tcacheAllocateSmall (15 samples, 0.18%)</title><rect x="328.8" y="1571.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="331.8" y="1582.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocateSmall (15 samples, 0.18%)</title><rect x="328.8" y="1555.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="331.8" y="1566.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocate (14 samples, 0.17%)</title><rect x="328.8" y="1539.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="331.8" y="1550.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.allocate (14 samples, 0.17%)</title><rect x="328.8" y="1523.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.8" y="1534.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache$Entry.recycle (2 samples, 0.02%)</title><rect x="329.1" y="1507.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="332.1" y="1518.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$DefaultHandle.recycle (2 samples, 0.02%)</title><rect x="329.1" y="1491.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="332.1" y="1502.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.push (2 samples, 0.02%)</title><rect x="329.1" y="1475.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="332.1" y="1486.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$SubPageMemoryRegionCache.initBuf (8 samples, 0.10%)</title><rect x="329.4" y="1507.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="332.4" y="1518.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBufWithSubpage (8 samples, 0.10%)</title><rect x="329.4" y="1491.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="332.4" y="1502.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.init (6 samples, 0.07%)</title><rect x="329.7" y="1475.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="332.7" y="1486.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.initMemoryAddress (6 samples, 0.07%)</title><rect x="329.7" y="1459.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="332.7" y="1470.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.directBufferAddress (6 samples, 0.07%)</title><rect x="329.7" y="1443.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="332.7" y="1454.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.directBufferAddress (6 samples, 0.07%)</title><rect x="329.7" y="1427.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="332.7" y="1438.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.getLong (6 samples, 0.07%)</title><rect x="329.7" y="1411.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="332.7" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscArrayQueue.poll (2 samples, 0.02%)</title><rect x="330.5" y="1507.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="333.5" y="1518.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/util/UnsafeRefArrayAccess.lvRefElement (2 samples, 0.02%)</title><rect x="330.5" y="1491.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="333.5" y="1502.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getObjectVolatile (2 samples, 0.02%)</title><rect x="330.5" y="1475.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="333.5" y="1486.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultMaxMessagesRecvByteBufAllocator$MaxMessageHandle.continueReading (2 samples, 0.02%)</title><rect x="330.9" y="1683.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="333.9" y="1694.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe.handleReadException (2 samples, 0.02%)</title><rect x="331.5" y="1683.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="334.5" y="1694.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.fireExceptionCaught (2 samples, 0.02%)</title><rect x="331.5" y="1667.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="334.5" y="1678.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeExceptionCaught (2 samples, 0.02%)</title><rect x="331.5" y="1651.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.5" y="1662.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeExceptionCaught (2 samples, 0.02%)</title><rect x="331.5" y="1635.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="334.5" y="1646.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.exceptionCaught (2 samples, 0.02%)</title><rect x="331.5" y="1619.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="334.5" y="1630.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireExceptionCaught (2 samples, 0.02%)</title><rect x="331.5" y="1603.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="334.5" y="1614.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeExceptionCaught (2 samples, 0.02%)</title><rect x="331.5" y="1587.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="334.5" y="1598.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeExceptionCaught (2 samples, 0.02%)</title><rect x="331.5" y="1571.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="334.5" y="1582.0"></text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler.exceptionCaught (2 samples, 0.02%)</title><rect x="331.5" y="1555.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="334.5" y="1566.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelInboundHandlerAdapter.exceptionCaught (2 samples, 0.02%)</title><rect x="331.5" y="1539.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="334.5" y="1550.0"></text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler$1.fireExceptionCaught (2 samples, 0.02%)</title><rect x="331.5" y="1523.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="334.5" y="1534.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelHandlerAdapter.exceptionCaught (2 samples, 0.02%)</title><rect x="331.5" y="1507.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.5" y="1518.0"></text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireExceptionCaught (2 samples, 0.02%)</title><rect x="331.5" y="1491.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="334.5" y="1502.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireExceptionCaught (2 samples, 0.02%)</title><rect x="331.5" y="1475.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="334.5" y="1486.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeExceptionCaught (2 samples, 0.02%)</title><rect x="331.5" y="1459.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="334.5" y="1470.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeExceptionCaught (2 samples, 0.02%)</title><rect x="331.5" y="1443.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="334.5" y="1454.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$TailContext.exceptionCaught (2 samples, 0.02%)</title><rect x="331.5" y="1427.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.5" y="1438.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.onUnhandledInboundException (2 samples, 0.02%)</title><rect x="331.5" y="1411.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="334.5" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/internal/logging/LocationAwareSlf4JLogger.warn (2 samples, 0.02%)</title><rect x="331.5" y="1395.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="334.5" y="1406.0"></text>
</g>
<g>
<title>io/netty/util/internal/logging/LocationAwareSlf4JLogger.log (2 samples, 0.02%)</title><rect x="331.5" y="1379.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="334.5" y="1390.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.log (2 samples, 0.02%)</title><rect x="331.5" y="1363.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="334.5" y="1374.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (2 samples, 0.02%)</title><rect x="331.5" y="1347.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.5" y="1358.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (2 samples, 0.02%)</title><rect x="331.5" y="1331.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="334.5" y="1342.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel.shouldBreakReadReady (6 samples, 0.07%)</title><rect x="331.8" y="1683.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="334.8" y="1694.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.isInputShutdown0 (6 samples, 0.07%)</title><rect x="331.8" y="1667.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.8" y="1678.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.isInputShutdown (6 samples, 0.07%)</title><rect x="331.8" y="1651.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="334.8" y="1662.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.isInputShutdown (2 samples, 0.02%)</title><rect x="331.9" y="1635.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="334.9" y="1646.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.socket (3 samples, 0.04%)</title><rect x="332.2" y="1635.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="335.2" y="1646.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.doReadBytes (143 samples, 1.70%)</title><rect x="332.6" y="1683.0" width="20.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="335.6" y="1694.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.writeBytes (141 samples, 1.68%)</title><rect x="332.6" y="1667.0" width="19.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="335.6" y="1678.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (51 samples, 0.61%)</title><rect x="332.6" y="1651.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="335.6" y="1662.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (50 samples, 0.60%)</title><rect x="332.8" y="1635.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="335.8" y="1646.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (50 samples, 0.60%)</title><rect x="332.8" y="1619.0" width="7.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="335.8" y="1630.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (50 samples, 0.60%)</title><rect x="332.8" y="1603.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="335.8" y="1614.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (49 samples, 0.58%)</title><rect x="332.9" y="1587.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="335.9" y="1598.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (48 samples, 0.57%)</title><rect x="333.0" y="1571.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="336.0" y="1582.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (48 samples, 0.57%)</title><rect x="333.0" y="1555.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="336.0" y="1566.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (47 samples, 0.56%)</title><rect x="333.2" y="1539.0" width="6.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="336.2" y="1550.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (47 samples, 0.56%)</title><rect x="333.2" y="1523.0" width="6.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="336.2" y="1534.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (45 samples, 0.54%)</title><rect x="333.5" y="1507.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="336.5" y="1518.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (40 samples, 0.48%)</title><rect x="334.2" y="1491.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="337.2" y="1502.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (5 samples, 0.06%)</title><rect x="336.7" y="1475.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="339.7" y="1486.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.05%)</title><rect x="336.8" y="1459.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="339.8" y="1470.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.05%)</title><rect x="336.8" y="1443.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="339.8" y="1454.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="336.8" y="1427.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="339.8" y="1438.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.04%)</title><rect x="336.8" y="1411.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="339.8" y="1422.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.02%)</title><rect x="337.4" y="1475.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="340.4" y="1486.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.02%)</title><rect x="337.4" y="1459.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="340.4" y="1470.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (15 samples, 0.18%)</title><rect x="337.7" y="1475.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="340.7" y="1486.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (13 samples, 0.15%)</title><rect x="337.9" y="1459.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="340.9" y="1470.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (8 samples, 0.10%)</title><rect x="338.7" y="1443.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="341.7" y="1454.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.writeBytes (90 samples, 1.07%)</title><rect x="339.8" y="1651.0" width="12.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="342.8" y="1662.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (90 samples, 1.07%)</title><rect x="339.8" y="1635.0" width="12.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="342.8" y="1646.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.setBytes (87 samples, 1.04%)</title><rect x="340.2" y="1619.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="343.2" y="1630.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.internalNioBuffer (5 samples, 0.06%)</title><rect x="340.2" y="1603.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="343.2" y="1614.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.checkIndex (3 samples, 0.04%)</title><rect x="340.2" y="1587.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="343.2" y="1598.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.checkIndex0 (2 samples, 0.02%)</title><rect x="340.2" y="1571.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="343.2" y="1582.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf._internalNioBuffer (2 samples, 0.02%)</title><rect x="340.6" y="1587.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="343.6" y="1598.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.internalNioBuffer (2 samples, 0.02%)</title><rect x="340.6" y="1571.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="343.6" y="1582.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (82 samples, 0.98%)</title><rect x="340.9" y="1603.0" width="11.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="343.9" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.05%)</title><rect x="341.0" y="1587.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="344.0" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.05%)</title><rect x="341.0" y="1571.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="344.0" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.02%)</title><rect x="341.2" y="1555.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="344.2" y="1566.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (77 samples, 0.92%)</title><rect x="341.6" y="1587.0" width="10.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="344.6" y="1598.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (77 samples, 0.92%)</title><rect x="341.6" y="1571.0" width="10.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="344.6" y="1582.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (74 samples, 0.88%)</title><rect x="341.6" y="1555.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="344.6" y="1566.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (74 samples, 0.88%)</title><rect x="341.6" y="1539.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="344.6" y="1550.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (74 samples, 0.88%)</title><rect x="341.6" y="1523.0" width="10.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="344.6" y="1534.0"></text>
</g>
<g>
<title>read (72 samples, 0.86%)</title><rect x="341.9" y="1507.0" width="10.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="344.9" y="1518.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (70 samples, 0.83%)</title><rect x="342.2" y="1491.0" width="9.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="345.2" y="1502.0"></text>
</g>
<g>
<title>do_syscall_64 (70 samples, 0.83%)</title><rect x="342.2" y="1475.0" width="9.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="345.2" y="1486.0"></text>
</g>
<g>
<title>__x64_sys_read (66 samples, 0.79%)</title><rect x="342.6" y="1459.0" width="9.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="345.6" y="1470.0"></text>
</g>
<g>
<title>ksys_read (66 samples, 0.79%)</title><rect x="342.6" y="1443.0" width="9.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="345.6" y="1454.0"></text>
</g>
<g>
<title>__fdget_pos (4 samples, 0.05%)</title><rect x="342.6" y="1427.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="345.6" y="1438.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.05%)</title><rect x="342.6" y="1411.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="345.6" y="1422.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.05%)</title><rect x="342.6" y="1395.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="345.6" y="1406.0"></text>
</g>
<g>
<title>vfs_read (61 samples, 0.73%)</title><rect x="343.3" y="1427.0" width="8.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="346.3" y="1438.0"></text>
</g>
<g>
<title>__vfs_read (54 samples, 0.64%)</title><rect x="343.4" y="1411.0" width="7.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="346.4" y="1422.0"></text>
</g>
<g>
<title>new_sync_read (54 samples, 0.64%)</title><rect x="343.4" y="1395.0" width="7.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="346.4" y="1406.0"></text>
</g>
<g>
<title>sock_read_iter (53 samples, 0.63%)</title><rect x="343.6" y="1379.0" width="7.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="346.6" y="1390.0"></text>
</g>
<g>
<title>sock_recvmsg (51 samples, 0.61%)</title><rect x="343.9" y="1363.0" width="7.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="346.9" y="1374.0"></text>
</g>
<g>
<title>inet6_recvmsg (47 samples, 0.56%)</title><rect x="344.1" y="1347.0" width="6.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="347.1" y="1358.0"></text>
</g>
<g>
<title>tcp_recvmsg (47 samples, 0.56%)</title><rect x="344.1" y="1331.0" width="6.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="347.1" y="1342.0"></text>
</g>
<g>
<title>__kfree_skb (9 samples, 0.11%)</title><rect x="345.0" y="1315.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="348.0" y="1326.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.02%)</title><rect x="345.0" y="1299.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="348.0" y="1310.0"></text>
</g>
<g>
<title>skb_release_all (7 samples, 0.08%)</title><rect x="345.3" y="1299.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="348.3" y="1310.0"></text>
</g>
<g>
<title>skb_release_data (6 samples, 0.07%)</title><rect x="345.3" y="1283.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="348.3" y="1294.0"></text>
</g>
<g>
<title>skb_free_head (5 samples, 0.06%)</title><rect x="345.4" y="1267.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="348.4" y="1278.0"></text>
</g>
<g>
<title>kfree (5 samples, 0.06%)</title><rect x="345.4" y="1251.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="348.4" y="1262.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.02%)</title><rect x="345.8" y="1235.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="348.8" y="1246.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.02%)</title><rect x="346.2" y="1315.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="349.2" y="1326.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.02%)</title><rect x="346.5" y="1315.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="349.5" y="1326.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (4 samples, 0.05%)</title><rect x="346.8" y="1315.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="349.8" y="1326.0"></text>
</g>
<g>
<title>__skb_datagram_iter (4 samples, 0.05%)</title><rect x="346.8" y="1299.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="349.8" y="1310.0"></text>
</g>
<g>
<title>simple_copy_to_iter (3 samples, 0.04%)</title><rect x="346.9" y="1283.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="349.9" y="1294.0"></text>
</g>
<g>
<title>__check_object_size (2 samples, 0.02%)</title><rect x="346.9" y="1267.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="349.9" y="1278.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (24 samples, 0.29%)</title><rect x="347.4" y="1315.0" width="3.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="350.4" y="1326.0"></text>
</g>
<g>
<title>tcp_send_ack (23 samples, 0.27%)</title><rect x="347.5" y="1299.0" width="3.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="350.5" y="1310.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (23 samples, 0.27%)</title><rect x="347.5" y="1283.0" width="3.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="350.5" y="1294.0"></text>
</g>
<g>
<title>__alloc_skb (3 samples, 0.04%)</title><rect x="347.5" y="1267.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="350.5" y="1278.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (2 samples, 0.02%)</title><rect x="347.5" y="1251.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="350.5" y="1262.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (20 samples, 0.24%)</title><rect x="347.9" y="1267.0" width="2.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="350.9" y="1278.0"></text>
</g>
<g>
<title>ip_queue_xmit (20 samples, 0.24%)</title><rect x="347.9" y="1251.0" width="2.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="350.9" y="1262.0"></text>
</g>
<g>
<title>__ip_queue_xmit (20 samples, 0.24%)</title><rect x="347.9" y="1235.0" width="2.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="350.9" y="1246.0"></text>
</g>
<g>
<title>ip_local_out (20 samples, 0.24%)</title><rect x="347.9" y="1219.0" width="2.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="350.9" y="1230.0"></text>
</g>
<g>
<title>ip_output (20 samples, 0.24%)</title><rect x="347.9" y="1203.0" width="2.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="350.9" y="1214.0"></text>
</g>
<g>
<title>ip_finish_output (19 samples, 0.23%)</title><rect x="348.1" y="1187.0" width="2.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="351.1" y="1198.0"></text>
</g>
<g>
<title>__ip_finish_output (19 samples, 0.23%)</title><rect x="348.1" y="1171.0" width="2.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="351.1" y="1182.0"></text>
</g>
<g>
<title>ip_finish_output2 (19 samples, 0.23%)</title><rect x="348.1" y="1155.0" width="2.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="351.1" y="1166.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (15 samples, 0.18%)</title><rect x="348.1" y="1139.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="351.1" y="1150.0"></text>
</g>
<g>
<title>do_softirq.part.0 (13 samples, 0.15%)</title><rect x="348.3" y="1123.0" width="1.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="351.3" y="1134.0"></text>
</g>
<g>
<title>do_softirq_own_stack (12 samples, 0.14%)</title><rect x="348.5" y="1107.0" width="1.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="351.5" y="1118.0"></text>
</g>
<g>
<title>__softirqentry_text_start (12 samples, 0.14%)</title><rect x="348.5" y="1091.0" width="1.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="351.5" y="1102.0"></text>
</g>
<g>
<title>net_rx_action (11 samples, 0.13%)</title><rect x="348.6" y="1075.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="351.6" y="1086.0"></text>
</g>
<g>
<title>process_backlog (11 samples, 0.13%)</title><rect x="348.6" y="1059.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="351.6" y="1070.0"></text>
</g>
<g>
<title>__netif_receive_skb (11 samples, 0.13%)</title><rect x="348.6" y="1043.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="351.6" y="1054.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (11 samples, 0.13%)</title><rect x="348.6" y="1027.0" width="1.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="351.6" y="1038.0"></text>
</g>
<g>
<title>ip_rcv (11 samples, 0.13%)</title><rect x="348.6" y="1011.0" width="1.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="351.6" y="1022.0"></text>
</g>
<g>
<title>ip_rcv_finish (11 samples, 0.13%)</title><rect x="348.6" y="995.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="351.6" y="1006.0"></text>
</g>
<g>
<title>ip_local_deliver (11 samples, 0.13%)</title><rect x="348.6" y="979.0" width="1.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="351.6" y="990.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (11 samples, 0.13%)</title><rect x="348.6" y="963.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="351.6" y="974.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (11 samples, 0.13%)</title><rect x="348.6" y="947.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="351.6" y="958.0"></text>
</g>
<g>
<title>tcp_v4_rcv (11 samples, 0.13%)</title><rect x="348.6" y="931.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="351.6" y="942.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (10 samples, 0.12%)</title><rect x="348.8" y="915.0" width="1.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="351.8" y="926.0"></text>
</g>
<g>
<title>tcp_rcv_established (10 samples, 0.12%)</title><rect x="348.8" y="899.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="351.8" y="910.0"></text>
</g>
<g>
<title>tcp_ack (7 samples, 0.08%)</title><rect x="348.9" y="883.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="351.9" y="894.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (4 samples, 0.05%)</title><rect x="349.2" y="867.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="352.2" y="878.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.02%)</title><rect x="349.2" y="851.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="352.2" y="862.0"></text>
</g>
<g>
<title>dev_queue_xmit (4 samples, 0.05%)</title><rect x="350.2" y="1139.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="353.2" y="1150.0"></text>
</g>
<g>
<title>__dev_queue_xmit (4 samples, 0.05%)</title><rect x="350.2" y="1123.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="353.2" y="1134.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (2 samples, 0.02%)</title><rect x="350.3" y="1107.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="353.3" y="1118.0"></text>
</g>
<g>
<title>loopback_xmit (2 samples, 0.02%)</title><rect x="350.3" y="1091.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="353.3" y="1102.0"></text>
</g>
<g>
<title>security_socket_recvmsg (2 samples, 0.02%)</title><rect x="350.7" y="1347.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="353.7" y="1358.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (2 samples, 0.02%)</title><rect x="350.7" y="1331.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="353.7" y="1342.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.02%)</title><rect x="350.7" y="1315.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="353.7" y="1326.0"></text>
</g>
<g>
<title>rw_verify_area (6 samples, 0.07%)</title><rect x="351.0" y="1411.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="354.0" y="1422.0"></text>
</g>
<g>
<title>security_file_permission (5 samples, 0.06%)</title><rect x="351.2" y="1395.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="354.2" y="1406.0"></text>
</g>
<g>
<title>__fsnotify_parent (2 samples, 0.02%)</title><rect x="351.3" y="1379.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="354.3" y="1390.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.02%)</title><rect x="352.0" y="1555.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="355.0" y="1566.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioMessageChannel$NioMessageUnsafe.read (4 samples, 0.05%)</title><rect x="352.8" y="1699.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="355.8" y="1710.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioServerSocketChannel.doReadMessages (2 samples, 0.02%)</title><rect x="353.1" y="1683.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="356.1" y="1694.0"></text>
</g>
<g>
<title>io/netty/util/internal/SocketUtils.accept (2 samples, 0.02%)</title><rect x="353.1" y="1667.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="356.1" y="1678.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2 samples, 0.02%)</title><rect x="353.1" y="1651.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="356.1" y="1662.0"></text>
</g>
<g>
<title>io/netty/util/internal/SocketUtils$5.run (2 samples, 0.02%)</title><rect x="353.1" y="1635.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="356.1" y="1646.0"></text>
</g>
<g>
<title>io/netty/util/internal/SocketUtils$5.run (2 samples, 0.02%)</title><rect x="353.1" y="1619.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="356.1" y="1630.0"></text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept (2 samples, 0.02%)</title><rect x="353.1" y="1603.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="356.1" y="1614.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.select (121 samples, 1.44%)</title><rect x="353.4" y="1747.0" width="17.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.4" y="1758.0"></text>
</g>
<g>
<title>io/netty/channel/nio/SelectedSelectionKeySetSelector.select (120 samples, 1.43%)</title><rect x="353.5" y="1731.0" width="16.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="356.5" y="1742.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (119 samples, 1.42%)</title><rect x="353.7" y="1715.0" width="16.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="356.7" y="1726.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (119 samples, 1.42%)</title><rect x="353.7" y="1699.0" width="16.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="356.7" y="1710.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (118 samples, 1.41%)</title><rect x="353.8" y="1683.0" width="16.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="356.8" y="1694.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (58 samples, 0.69%)</title><rect x="353.8" y="1667.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="356.8" y="1678.0"></text>
</g>
<g>
<title>epoll_wait (47 samples, 0.56%)</title><rect x="355.4" y="1651.0" width="6.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="358.4" y="1662.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (38 samples, 0.45%)</title><rect x="356.6" y="1635.0" width="5.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="359.6" y="1646.0"></text>
</g>
<g>
<title>do_syscall_64 (37 samples, 0.44%)</title><rect x="356.8" y="1619.0" width="5.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="359.8" y="1630.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (34 samples, 0.40%)</title><rect x="356.9" y="1603.0" width="4.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="359.9" y="1614.0"></text>
</g>
<g>
<title>do_epoll_wait (34 samples, 0.40%)</title><rect x="356.9" y="1587.0" width="4.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="359.9" y="1598.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.02%)</title><rect x="356.9" y="1571.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="359.9" y="1582.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.02%)</title><rect x="356.9" y="1555.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="359.9" y="1566.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.02%)</title><rect x="356.9" y="1539.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="359.9" y="1550.0"></text>
</g>
<g>
<title>ep_poll (30 samples, 0.36%)</title><rect x="357.2" y="1571.0" width="4.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="360.2" y="1582.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (24 samples, 0.29%)</title><rect x="357.6" y="1555.0" width="3.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="360.6" y="1566.0"></text>
</g>
<g>
<title>ep_send_events_proc (17 samples, 0.20%)</title><rect x="358.5" y="1539.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="361.5" y="1550.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (16 samples, 0.19%)</title><rect x="358.6" y="1523.0" width="2.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="361.6" y="1534.0"></text>
</g>
<g>
<title>sock_poll (11 samples, 0.13%)</title><rect x="359.3" y="1507.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="362.3" y="1518.0"></text>
</g>
<g>
<title>tcp_poll (4 samples, 0.05%)</title><rect x="360.0" y="1491.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="363.0" y="1502.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.02%)</title><rect x="360.6" y="1491.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="363.6" y="1502.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (2 samples, 0.02%)</title><rect x="361.1" y="1555.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="364.1" y="1566.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (2 samples, 0.02%)</title><rect x="361.1" y="1539.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="364.1" y="1550.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.02%)</title><rect x="361.1" y="1523.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="364.1" y="1534.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.02%)</title><rect x="361.1" y="1507.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="364.1" y="1518.0"></text>
</g>
<g>
<title>fput_many (2 samples, 0.02%)</title><rect x="361.4" y="1571.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="364.4" y="1582.0"></text>
</g>
<g>
<title>do_epoll_wait (2 samples, 0.02%)</title><rect x="361.7" y="1603.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="364.7" y="1614.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (45 samples, 0.54%)</title><rect x="362.0" y="1667.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="365.0" y="1678.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.08%)</title><rect x="362.0" y="1651.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="365.0" y="1662.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.07%)</title><rect x="362.1" y="1635.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="365.1" y="1646.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.clearInterrupt (34 samples, 0.40%)</title><rect x="363.0" y="1651.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="366.0" y="1662.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (33 samples, 0.39%)</title><rect x="363.1" y="1635.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.1" y="1646.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.02%)</title><rect x="363.4" y="1619.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="366.4" y="1630.0"></text>
</g>
<g>
<title>read (29 samples, 0.35%)</title><rect x="363.7" y="1619.0" width="4.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="366.7" y="1630.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (25 samples, 0.30%)</title><rect x="364.2" y="1603.0" width="3.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="367.2" y="1614.0"></text>
</g>
<g>
<title>do_syscall_64 (25 samples, 0.30%)</title><rect x="364.2" y="1587.0" width="3.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="367.2" y="1598.0"></text>
</g>
<g>
<title>__x64_sys_read (24 samples, 0.29%)</title><rect x="364.4" y="1571.0" width="3.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="367.4" y="1582.0"></text>
</g>
<g>
<title>ksys_read (24 samples, 0.29%)</title><rect x="364.4" y="1555.0" width="3.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="367.4" y="1566.0"></text>
</g>
<g>
<title>__fdget_pos (2 samples, 0.02%)</title><rect x="364.4" y="1539.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="367.4" y="1550.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.02%)</title><rect x="364.4" y="1523.0" width="0.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="367.4" y="1534.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.02%)</title><rect x="364.4" y="1507.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="367.4" y="1518.0"></text>
</g>
<g>
<title>vfs_read (22 samples, 0.26%)</title><rect x="364.6" y="1539.0" width="3.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="367.6" y="1550.0"></text>
</g>
<g>
<title>__vfs_read (16 samples, 0.19%)</title><rect x="364.6" y="1523.0" width="2.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="367.6" y="1534.0"></text>
</g>
<g>
<title>new_sync_read (16 samples, 0.19%)</title><rect x="364.6" y="1507.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="367.6" y="1518.0"></text>
</g>
<g>
<title>anon_pipe_buf_release (2 samples, 0.02%)</title><rect x="364.8" y="1491.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="367.8" y="1502.0"></text>
</g>
<g>
<title>pipe_read (12 samples, 0.14%)</title><rect x="365.2" y="1491.0" width="1.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="368.2" y="1502.0"></text>
</g>
<g>
<title>__wake_up_sync_key (5 samples, 0.06%)</title><rect x="365.5" y="1475.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="368.5" y="1486.0"></text>
</g>
<g>
<title>__wake_up_common_lock (5 samples, 0.06%)</title><rect x="365.5" y="1459.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="368.5" y="1470.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.06%)</title><rect x="365.5" y="1443.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="368.5" y="1454.0"></text>
</g>
<g>
<title>copy_page_to_iter (2 samples, 0.02%)</title><rect x="366.2" y="1475.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="369.2" y="1486.0"></text>
</g>
<g>
<title>copy_user_generic_string (2 samples, 0.02%)</title><rect x="366.2" y="1459.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="369.2" y="1470.0"></text>
</g>
<g>
<title>touch_atime (3 samples, 0.04%)</title><rect x="366.5" y="1475.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="369.5" y="1486.0"></text>
</g>
<g>
<title>rw_verify_area (6 samples, 0.07%)</title><rect x="366.9" y="1523.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="369.9" y="1534.0"></text>
</g>
<g>
<title>security_file_permission (5 samples, 0.06%)</title><rect x="367.0" y="1507.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="370.0" y="1518.0"></text>
</g>
<g>
<title>apparmor_file_permission (2 samples, 0.02%)</title><rect x="367.3" y="1491.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="370.3" y="1502.0"></text>
</g>
<g>
<title>common_file_perm (2 samples, 0.02%)</title><rect x="367.3" y="1475.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="370.3" y="1486.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.05%)</title><rect x="367.7" y="1651.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="370.7" y="1662.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (4 samples, 0.05%)</title><rect x="368.4" y="1667.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="371.4" y="1678.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (4 samples, 0.05%)</title><rect x="368.4" y="1651.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="371.4" y="1662.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.04%)</title><rect x="368.6" y="1635.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="371.6" y="1646.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.04%)</title><rect x="368.6" y="1619.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="371.6" y="1630.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.04%)</title><rect x="368.6" y="1603.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="371.6" y="1614.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (2 samples, 0.02%)</title><rect x="369.0" y="1667.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="372.0" y="1678.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (2 samples, 0.02%)</title><rect x="369.0" y="1651.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="372.0" y="1662.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.02%)</title><rect x="369.0" y="1635.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="372.0" y="1646.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.02%)</title><rect x="369.0" y="1619.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="372.0" y="1630.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.02%)</title><rect x="369.0" y="1603.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="372.0" y="1614.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (8 samples, 0.10%)</title><rect x="369.3" y="1667.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="372.3" y="1678.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.04%)</title><rect x="370.0" y="1651.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.0" y="1662.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.04%)</title><rect x="370.0" y="1635.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="373.0" y="1646.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/AbstractScheduledEventExecutor.nextScheduledTaskDeadlineNanos (3 samples, 0.04%)</title><rect x="370.5" y="1747.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="373.5" y="1758.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/AbstractScheduledEventExecutor.peekScheduledTask (2 samples, 0.02%)</title><rect x="370.7" y="1731.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="373.7" y="1742.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.runAllTasks (2,209 samples, 26.30%)</title><rect x="371.1" y="1747.0" width="310.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="374.1" y="1758.0">io/netty/util/concurrent/SingleThreadEvent..</text>
</g>
<g>
<title>io/netty/channel/SingleThreadEventLoop.afterRunningAllTasks (6 samples, 0.07%)</title><rect x="371.4" y="1731.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="374.4" y="1742.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.runAllTasksFrom (5 samples, 0.06%)</title><rect x="371.5" y="1715.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="374.5" y="1726.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.pollTaskFrom (5 samples, 0.06%)</title><rect x="371.5" y="1699.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="374.5" y="1710.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscUnboundedArrayQueue.poll (3 samples, 0.04%)</title><rect x="371.8" y="1683.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="374.8" y="1694.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/BaseMpscLinkedArrayQueue.poll (3 samples, 0.04%)</title><rect x="371.8" y="1667.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="374.8" y="1678.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/AbstractEventExecutor.safeExecute (2,192 samples, 26.10%)</title><rect x="372.2" y="1731.0" width="308.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="375.2" y="1742.0">io/netty/util/concurrent/AbstractEventExe..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$WriteTask.run (2,191 samples, 26.09%)</title><rect x="372.4" y="1715.0" width="307.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="375.4" y="1726.0">io/netty/channel/AbstractChannelHandlerCo..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$WriteTask.decrementPendingOutboundBytes (7 samples, 0.08%)</title><rect x="372.4" y="1699.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="375.4" y="1710.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.decrementPendingOutboundBytes (5 samples, 0.06%)</title><rect x="372.7" y="1683.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="375.7" y="1694.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.decrementPendingOutboundBytes (2 samples, 0.02%)</title><rect x="372.8" y="1667.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="375.8" y="1678.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel.unsafe (2 samples, 0.02%)</title><rect x="373.1" y="1667.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="376.1" y="1678.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$WriteTask.recycle (3 samples, 0.04%)</title><rect x="373.4" y="1699.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="376.4" y="1710.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$DefaultHandle.recycle (3 samples, 0.04%)</title><rect x="373.4" y="1683.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="376.4" y="1694.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.push (2 samples, 0.02%)</title><rect x="373.5" y="1667.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="376.5" y="1678.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (2,181 samples, 25.97%)</title><rect x="373.8" y="1699.0" width="306.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="376.8" y="1710.0">io/netty/channel/AbstractChannelHandlerCo..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (2,175 samples, 25.90%)</title><rect x="373.8" y="1683.0" width="305.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="376.8" y="1694.0">io/netty/channel/AbstractChannelHandlerCo..</text>
</g>
<g>
<title>io/netty/handler/stream/ChunkedWriteHandler.flush (2,175 samples, 25.90%)</title><rect x="373.8" y="1667.0" width="305.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="376.8" y="1678.0">io/netty/handler/stream/ChunkedWriteHandl..</text>
</g>
<g>
<title>io/netty/handler/stream/ChunkedWriteHandler.doFlush (2,175 samples, 25.90%)</title><rect x="373.8" y="1651.0" width="305.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="376.8" y="1662.0">io/netty/handler/stream/ChunkedWriteHandl..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.flush (526 samples, 6.26%)</title><rect x="374.2" y="1635.0" width="73.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="377.2" y="1646.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush (526 samples, 6.26%)</title><rect x="374.2" y="1619.0" width="73.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="377.2" y="1630.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (526 samples, 6.26%)</title><rect x="374.2" y="1603.0" width="73.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="377.2" y="1614.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler.flush (526 samples, 6.26%)</title><rect x="374.2" y="1587.0" width="73.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="377.2" y="1598.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundHandlerAdapter.flush (526 samples, 6.26%)</title><rect x="374.2" y="1571.0" width="73.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="377.2" y="1582.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.flush (526 samples, 6.26%)</title><rect x="374.2" y="1555.0" width="73.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="377.2" y="1566.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.flush (526 samples, 6.26%)</title><rect x="374.2" y="1539.0" width="73.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="377.2" y="1550.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush (526 samples, 6.26%)</title><rect x="374.2" y="1523.0" width="73.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="377.2" y="1534.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (526 samples, 6.26%)</title><rect x="374.2" y="1507.0" width="73.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="377.2" y="1518.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.flush (526 samples, 6.26%)</title><rect x="374.2" y="1491.0" width="73.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="377.2" y="1502.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush (526 samples, 6.26%)</title><rect x="374.2" y="1475.0" width="73.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="377.2" y="1486.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel$AbstractNioUnsafe.flush0 (525 samples, 6.25%)</title><rect x="374.3" y="1459.0" width="73.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="377.3" y="1470.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush0 (524 samples, 6.24%)</title><rect x="374.3" y="1443.0" width="73.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="377.3" y="1454.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.doWrite (524 samples, 6.24%)</title><rect x="374.3" y="1427.0" width="73.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="377.3" y="1438.0">io/netty..</text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.nioBuffers (147 samples, 1.75%)</title><rect x="374.6" y="1411.0" width="20.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="377.6" y="1422.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.internalNioBuffer (56 samples, 0.67%)</title><rect x="375.2" y="1395.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="378.2" y="1406.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (54 samples, 0.64%)</title><rect x="375.2" y="1379.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="378.2" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (54 samples, 0.64%)</title><rect x="375.2" y="1363.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="378.2" y="1374.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (54 samples, 0.64%)</title><rect x="375.2" y="1347.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="378.2" y="1358.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (54 samples, 0.64%)</title><rect x="375.2" y="1331.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="378.2" y="1342.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (52 samples, 0.62%)</title><rect x="375.5" y="1315.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="378.5" y="1326.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (52 samples, 0.62%)</title><rect x="375.5" y="1299.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="378.5" y="1310.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (52 samples, 0.62%)</title><rect x="375.5" y="1283.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="378.5" y="1294.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (52 samples, 0.62%)</title><rect x="375.5" y="1267.0" width="7.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="378.5" y="1278.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (52 samples, 0.62%)</title><rect x="375.5" y="1251.0" width="7.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="378.5" y="1262.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.02%)</title><rect x="375.5" y="1235.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="378.5" y="1246.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (50 samples, 0.60%)</title><rect x="375.7" y="1235.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="378.7" y="1246.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.06%)</title><rect x="375.7" y="1219.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="378.7" y="1230.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (42 samples, 0.50%)</title><rect x="376.9" y="1219.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="379.9" y="1230.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.02%)</title><rect x="379.5" y="1203.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="382.5" y="1214.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (5 samples, 0.06%)</title><rect x="379.8" y="1203.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="382.8" y="1214.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (2 samples, 0.02%)</title><rect x="380.0" y="1187.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="383.0" y="1198.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.02%)</title><rect x="380.2" y="1187.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="383.2" y="1198.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (2 samples, 0.02%)</title><rect x="380.7" y="1203.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="383.7" y="1214.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (12 samples, 0.14%)</title><rect x="381.1" y="1203.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="384.1" y="1214.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (8 samples, 0.10%)</title><rect x="381.6" y="1187.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="384.6" y="1198.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (6 samples, 0.07%)</title><rect x="381.9" y="1171.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="384.9" y="1182.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.internalNioBuffer (2 samples, 0.02%)</title><rect x="382.8" y="1379.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="385.8" y="1390.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.internalNioBuffer (2 samples, 0.02%)</title><rect x="382.8" y="1363.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="385.8" y="1374.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.nioBufferCount (79 samples, 0.94%)</title><rect x="383.1" y="1395.0" width="11.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="386.1" y="1406.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (79 samples, 0.94%)</title><rect x="383.1" y="1379.0" width="11.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="386.1" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (79 samples, 0.94%)</title><rect x="383.1" y="1363.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="386.1" y="1374.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (79 samples, 0.94%)</title><rect x="383.1" y="1347.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="386.1" y="1358.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (79 samples, 0.94%)</title><rect x="383.1" y="1331.0" width="11.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="386.1" y="1342.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (79 samples, 0.94%)</title><rect x="383.1" y="1315.0" width="11.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="386.1" y="1326.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (78 samples, 0.93%)</title><rect x="383.2" y="1299.0" width="11.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="386.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (78 samples, 0.93%)</title><rect x="383.2" y="1283.0" width="11.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="386.2" y="1294.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (78 samples, 0.93%)</title><rect x="383.2" y="1267.0" width="11.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="386.2" y="1278.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (78 samples, 0.93%)</title><rect x="383.2" y="1251.0" width="11.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="386.2" y="1262.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (76 samples, 0.90%)</title><rect x="383.5" y="1235.0" width="10.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="386.5" y="1246.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.04%)</title><rect x="383.5" y="1219.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="386.5" y="1230.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (3 samples, 0.04%)</title><rect x="384.0" y="1219.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="387.0" y="1230.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (65 samples, 0.77%)</title><rect x="385.0" y="1219.0" width="9.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="388.0" y="1230.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (4 samples, 0.05%)</title><rect x="389.8" y="1203.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="392.8" y="1214.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (9 samples, 0.11%)</title><rect x="390.4" y="1203.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="393.4" y="1214.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (4 samples, 0.05%)</title><rect x="390.8" y="1187.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="393.8" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="390.9" y="1171.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="393.9" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="390.9" y="1155.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="393.9" y="1166.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.02%)</title><rect x="391.3" y="1187.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="394.3" y="1198.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (17 samples, 0.20%)</title><rect x="391.8" y="1203.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="394.8" y="1214.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (12 samples, 0.14%)</title><rect x="392.5" y="1187.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="395.5" y="1198.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="392.5" y="1171.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="395.5" y="1182.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (8 samples, 0.10%)</title><rect x="392.7" y="1171.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="395.7" y="1182.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.02%)</title><rect x="393.9" y="1171.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="396.9" y="1182.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocal.get (2 samples, 0.02%)</title><rect x="394.4" y="1395.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="397.4" y="1406.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.indexedVariable (2 samples, 0.02%)</title><rect x="394.4" y="1379.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="397.4" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.get (4 samples, 0.05%)</title><rect x="394.7" y="1395.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="397.7" y="1406.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.fastGet (2 samples, 0.02%)</title><rect x="395.0" y="1379.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="398.0" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocalThread.setThreadLocalMap (2 samples, 0.02%)</title><rect x="395.0" y="1363.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.0" y="1374.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.removeBytes (121 samples, 1.44%)</title><rect x="395.3" y="1411.0" width="17.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="398.3" y="1422.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.clearNioBuffers (3 samples, 0.04%)</title><rect x="395.7" y="1395.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="398.7" y="1406.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocal.get (2 samples, 0.02%)</title><rect x="395.7" y="1379.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="398.7" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.get (2 samples, 0.02%)</title><rect x="395.7" y="1363.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="398.7" y="1374.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.fastGet (2 samples, 0.02%)</title><rect x="395.7" y="1347.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="398.7" y="1358.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.&lt;init&gt; (2 samples, 0.02%)</title><rect x="395.7" y="1331.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="398.7" y="1342.0"></text>
</g>
<g>
<title>io/netty/util/internal/UnpaddedInternalThreadLocalMap.&lt;init&gt; (2 samples, 0.02%)</title><rect x="395.7" y="1315.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="398.7" y="1326.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.remove (115 samples, 1.37%)</title><rect x="396.1" y="1395.0" width="16.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="399.1" y="1406.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.removeEntry (2 samples, 0.02%)</title><rect x="396.1" y="1379.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="399.1" y="1390.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.safeSuccess (5 samples, 0.06%)</title><rect x="396.4" y="1379.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="399.4" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/internal/PromiseNotificationUtil.trySuccess (4 samples, 0.05%)</title><rect x="396.5" y="1363.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="399.5" y="1374.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.trySuccess (3 samples, 0.04%)</title><rect x="396.7" y="1347.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="399.7" y="1358.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.setSuccess0 (2 samples, 0.02%)</title><rect x="396.8" y="1331.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="399.8" y="1342.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/DefaultPromise.setValue0 (2 samples, 0.02%)</title><rect x="396.8" y="1315.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="399.8" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet (2 samples, 0.02%)</title><rect x="396.8" y="1299.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="399.8" y="1310.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.safeRelease (108 samples, 1.29%)</title><rect x="397.1" y="1379.0" width="15.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="400.1" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.release (108 samples, 1.29%)</title><rect x="397.1" y="1363.0" width="15.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="400.1" y="1374.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.release (108 samples, 1.29%)</title><rect x="397.1" y="1347.0" width="15.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.1" y="1358.0"></text>
</g>
<g>
<title>io/netty/buffer/SimpleLeakAwareByteBuf.release (15 samples, 0.18%)</title><rect x="397.1" y="1331.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="400.1" y="1342.0"></text>
</g>
<g>
<title>io/netty/buffer/SimpleLeakAwareByteBuf.closeLeak (7 samples, 0.08%)</title><rect x="397.1" y="1315.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="400.1" y="1326.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.close (7 samples, 0.08%)</title><rect x="397.1" y="1299.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="400.1" y="1310.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.close (6 samples, 0.07%)</title><rect x="397.1" y="1283.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="400.1" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$SetFromMap.remove (6 samples, 0.07%)</title><rect x="397.1" y="1267.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="400.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.remove (5 samples, 0.06%)</title><rect x="397.2" y="1251.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="400.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.replaceNode (5 samples, 0.06%)</title><rect x="397.2" y="1235.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="400.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.addCount (4 samples, 0.05%)</title><rect x="397.4" y="1219.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="400.4" y="1230.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.release (8 samples, 0.10%)</title><rect x="398.1" y="1315.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="401.1" y="1326.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (7 samples, 0.08%)</title><rect x="398.1" y="1299.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="401.1" y="1310.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.handleRelease (7 samples, 0.08%)</title><rect x="398.1" y="1283.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="401.1" y="1294.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.deallocate (7 samples, 0.08%)</title><rect x="398.1" y="1267.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="401.1" y="1278.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.free (5 samples, 0.06%)</title><rect x="398.1" y="1251.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="401.1" y="1262.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.add (5 samples, 0.06%)</title><rect x="398.1" y="1235.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="401.1" y="1246.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.add (2 samples, 0.02%)</title><rect x="398.2" y="1219.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="401.2" y="1230.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.newEntry (2 samples, 0.02%)</title><rect x="398.2" y="1203.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="401.2" y="1214.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.cache (2 samples, 0.02%)</title><rect x="398.5" y="1219.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="401.5" y="1230.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.cacheForSmall (2 samples, 0.02%)</title><rect x="398.5" y="1203.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="401.5" y="1214.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.cache (2 samples, 0.02%)</title><rect x="398.5" y="1187.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="401.5" y="1198.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.recycle (2 samples, 0.02%)</title><rect x="398.8" y="1251.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="401.8" y="1262.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$DefaultHandle.recycle (2 samples, 0.02%)</title><rect x="398.8" y="1235.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="401.8" y="1246.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.push (2 samples, 0.02%)</title><rect x="398.8" y="1219.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="401.8" y="1230.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (93 samples, 1.11%)</title><rect x="399.2" y="1331.0" width="13.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="402.2" y="1342.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (93 samples, 1.11%)</title><rect x="399.2" y="1315.0" width="13.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="402.2" y="1326.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (93 samples, 1.11%)</title><rect x="399.2" y="1299.0" width="13.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="402.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (93 samples, 1.11%)</title><rect x="399.2" y="1283.0" width="13.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="402.2" y="1294.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (89 samples, 1.06%)</title><rect x="399.8" y="1267.0" width="12.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="402.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (89 samples, 1.06%)</title><rect x="399.8" y="1251.0" width="12.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="402.8" y="1262.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (89 samples, 1.06%)</title><rect x="399.8" y="1235.0" width="12.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="402.8" y="1246.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (89 samples, 1.06%)</title><rect x="399.8" y="1219.0" width="12.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="402.8" y="1230.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (89 samples, 1.06%)</title><rect x="399.8" y="1203.0" width="12.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="402.8" y="1214.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.02%)</title><rect x="399.9" y="1187.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="402.9" y="1198.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (5 samples, 0.06%)</title><rect x="400.2" y="1187.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="403.2" y="1198.0"></text>
</g>
<g>
<title>Method::bcp_from(unsigned char*) const (3 samples, 0.04%)</title><rect x="400.9" y="1187.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="403.9" y="1198.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (73 samples, 0.87%)</title><rect x="402.0" y="1187.0" width="10.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="405.0" y="1198.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (10 samples, 0.12%)</title><rect x="406.7" y="1171.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="409.7" y="1182.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (7 samples, 0.08%)</title><rect x="406.8" y="1155.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="409.8" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.07%)</title><rect x="406.9" y="1139.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="409.9" y="1150.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.05%)</title><rect x="406.9" y="1123.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="409.9" y="1134.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.02%)</title><rect x="407.2" y="1107.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="410.2" y="1118.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.02%)</title><rect x="407.8" y="1155.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="410.8" y="1166.0"></text>
</g>
<g>
<title>BacktraceBuilder::expand(Thread*) (2 samples, 0.02%)</title><rect x="408.1" y="1171.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="411.1" y="1182.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (2 samples, 0.02%)</title><rect x="408.1" y="1155.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="411.1" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="408.1" y="1139.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="411.1" y="1150.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (6 samples, 0.07%)</title><rect x="408.3" y="1171.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="411.3" y="1182.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.04%)</title><rect x="408.3" y="1155.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="411.3" y="1166.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.02%)</title><rect x="408.8" y="1155.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="411.8" y="1166.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (18 samples, 0.21%)</title><rect x="409.6" y="1171.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="412.6" y="1182.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (15 samples, 0.18%)</title><rect x="410.0" y="1155.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="413.0" y="1166.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="410.3" y="1139.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="413.3" y="1150.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (9 samples, 0.11%)</title><rect x="410.6" y="1139.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="413.6" y="1150.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.02%)</title><rect x="411.9" y="1139.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="414.9" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (254 samples, 3.02%)</title><rect x="412.3" y="1411.0" width="35.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="415.3" y="1422.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.06%)</title><rect x="412.3" y="1395.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="415.3" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.06%)</title><rect x="412.3" y="1379.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="415.3" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (4 samples, 0.05%)</title><rect x="412.3" y="1363.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="415.3" y="1374.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (249 samples, 2.96%)</title><rect x="413.0" y="1395.0" width="35.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="416.0" y="1406.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (249 samples, 2.96%)</title><rect x="413.0" y="1379.0" width="35.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="416.0" y="1390.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (249 samples, 2.96%)</title><rect x="413.0" y="1363.0" width="35.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="416.0" y="1374.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (246 samples, 2.93%)</title><rect x="413.4" y="1347.0" width="34.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="416.4" y="1358.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (246 samples, 2.93%)</title><rect x="413.4" y="1331.0" width="34.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="416.4" y="1342.0">su..</text>
</g>
<g>
<title>__write (242 samples, 2.88%)</title><rect x="413.8" y="1315.0" width="34.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="416.8" y="1326.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (239 samples, 2.85%)</title><rect x="414.2" y="1299.0" width="33.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="417.2" y="1310.0">en..</text>
</g>
<g>
<title>do_syscall_64 (239 samples, 2.85%)</title><rect x="414.2" y="1283.0" width="33.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="417.2" y="1294.0">do..</text>
</g>
<g>
<title>__x64_sys_write (235 samples, 2.80%)</title><rect x="414.5" y="1267.0" width="33.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="417.5" y="1278.0">__..</text>
</g>
<g>
<title>ksys_write (235 samples, 2.80%)</title><rect x="414.5" y="1251.0" width="33.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="417.5" y="1262.0">ks..</text>
</g>
<g>
<title>__fdget_pos (3 samples, 0.04%)</title><rect x="414.5" y="1235.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="417.5" y="1246.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.04%)</title><rect x="414.5" y="1219.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="417.5" y="1230.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.04%)</title><rect x="414.5" y="1203.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="417.5" y="1214.0"></text>
</g>
<g>
<title>__vfs_write (2 samples, 0.02%)</title><rect x="414.9" y="1235.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="417.9" y="1246.0"></text>
</g>
<g>
<title>vfs_write (229 samples, 2.73%)</title><rect x="415.4" y="1235.0" width="32.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="418.4" y="1246.0">vf..</text>
</g>
<g>
<title>__fsnotify_parent (2 samples, 0.02%)</title><rect x="415.8" y="1219.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="418.8" y="1230.0"></text>
</g>
<g>
<title>__vfs_write (220 samples, 2.62%)</title><rect x="416.1" y="1219.0" width="30.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="419.1" y="1230.0">__..</text>
</g>
<g>
<title>new_sync_write (219 samples, 2.61%)</title><rect x="416.2" y="1203.0" width="30.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="419.2" y="1214.0">ne..</text>
</g>
<g>
<title>sock_write_iter (218 samples, 2.60%)</title><rect x="416.4" y="1187.0" width="30.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="419.4" y="1198.0">so..</text>
</g>
<g>
<title>sock_sendmsg (218 samples, 2.60%)</title><rect x="416.4" y="1171.0" width="30.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="419.4" y="1182.0">so..</text>
</g>
<g>
<title>apparmor_socket_sendmsg (2 samples, 0.02%)</title><rect x="416.8" y="1155.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="419.8" y="1166.0"></text>
</g>
<g>
<title>inet6_sendmsg (206 samples, 2.45%)</title><rect x="417.1" y="1155.0" width="28.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="420.1" y="1166.0">in..</text>
</g>
<g>
<title>tcp_sendmsg (203 samples, 2.42%)</title><rect x="417.5" y="1139.0" width="28.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="420.5" y="1150.0">tc..</text>
</g>
<g>
<title>release_sock (11 samples, 0.13%)</title><rect x="417.9" y="1123.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="420.9" y="1134.0"></text>
</g>
<g>
<title>__release_sock (11 samples, 0.13%)</title><rect x="417.9" y="1107.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="420.9" y="1118.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (11 samples, 0.13%)</title><rect x="417.9" y="1091.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="420.9" y="1102.0"></text>
</g>
<g>
<title>tcp_rcv_established (11 samples, 0.13%)</title><rect x="417.9" y="1075.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="420.9" y="1086.0"></text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.04%)</title><rect x="418.0" y="1059.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="421.0" y="1070.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.02%)</title><rect x="418.2" y="1043.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="421.2" y="1054.0"></text>
</g>
<g>
<title>tcp_ack (7 samples, 0.08%)</title><rect x="418.5" y="1059.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="421.5" y="1070.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (3 samples, 0.04%)</title><rect x="418.9" y="1043.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="421.9" y="1054.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (3 samples, 0.04%)</title><rect x="419.6" y="1123.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="422.6" y="1134.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (185 samples, 2.20%)</title><rect x="420.0" y="1123.0" width="26.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="423.0" y="1134.0">t..</text>
</g>
<g>
<title>__check_object_size (2 samples, 0.02%)</title><rect x="420.3" y="1107.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="423.3" y="1118.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.02%)</title><rect x="420.3" y="1091.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="423.3" y="1102.0"></text>
</g>
<g>
<title>_copy_from_iter_full (4 samples, 0.05%)</title><rect x="420.6" y="1107.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="423.6" y="1118.0"></text>
</g>
<g>
<title>copy_user_generic_string (4 samples, 0.05%)</title><rect x="420.6" y="1091.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="423.6" y="1102.0"></text>
</g>
<g>
<title>sk_page_frag_refill (2 samples, 0.02%)</title><rect x="421.1" y="1107.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="424.1" y="1118.0"></text>
</g>
<g>
<title>skb_page_frag_refill (2 samples, 0.02%)</title><rect x="421.1" y="1091.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="424.1" y="1102.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (9 samples, 0.11%)</title><rect x="421.4" y="1107.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="424.4" y="1118.0"></text>
</g>
<g>
<title>__alloc_skb (8 samples, 0.10%)</title><rect x="421.4" y="1091.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="424.4" y="1102.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (3 samples, 0.04%)</title><rect x="421.7" y="1075.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="424.7" y="1086.0"></text>
</g>
<g>
<title>skb_entail (2 samples, 0.02%)</title><rect x="422.7" y="1107.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="425.7" y="1118.0"></text>
</g>
<g>
<title>tcp_push (161 samples, 1.92%)</title><rect x="423.1" y="1107.0" width="22.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="426.1" y="1118.0">t..</text>
</g>
<g>
<title>__tcp_push_pending_frames (161 samples, 1.92%)</title><rect x="423.1" y="1091.0" width="22.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="426.1" y="1102.0">_..</text>
</g>
<g>
<title>tcp_write_xmit (160 samples, 1.91%)</title><rect x="423.2" y="1075.0" width="22.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="426.2" y="1086.0">t..</text>
</g>
<g>
<title>__tcp_transmit_skb (142 samples, 1.69%)</title><rect x="423.2" y="1059.0" width="20.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="426.2" y="1070.0"></text>
</g>
<g>
<title>ip_queue_xmit (132 samples, 1.57%)</title><rect x="424.1" y="1043.0" width="18.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="427.1" y="1054.0"></text>
</g>
<g>
<title>__ip_queue_xmit (132 samples, 1.57%)</title><rect x="424.1" y="1027.0" width="18.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="427.1" y="1038.0"></text>
</g>
<g>
<title>ip_local_out (131 samples, 1.56%)</title><rect x="424.2" y="1011.0" width="18.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="427.2" y="1022.0"></text>
</g>
<g>
<title>ip_output (129 samples, 1.54%)</title><rect x="424.4" y="995.0" width="18.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="427.4" y="1006.0"></text>
</g>
<g>
<title>ip_finish_output (128 samples, 1.52%)</title><rect x="424.5" y="979.0" width="18.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="427.5" y="990.0"></text>
</g>
<g>
<title>__ip_finish_output (127 samples, 1.51%)</title><rect x="424.6" y="963.0" width="17.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="427.6" y="974.0"></text>
</g>
<g>
<title>ip_finish_output2 (125 samples, 1.49%)</title><rect x="424.9" y="947.0" width="17.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="427.9" y="958.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (112 samples, 1.33%)</title><rect x="425.8" y="931.0" width="15.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="428.8" y="942.0"></text>
</g>
<g>
<title>do_softirq.part.0 (111 samples, 1.32%)</title><rect x="425.9" y="915.0" width="15.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="428.9" y="926.0"></text>
</g>
<g>
<title>do_softirq_own_stack (109 samples, 1.30%)</title><rect x="426.2" y="899.0" width="15.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="429.2" y="910.0"></text>
</g>
<g>
<title>__softirqentry_text_start (109 samples, 1.30%)</title><rect x="426.2" y="883.0" width="15.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="429.2" y="894.0"></text>
</g>
<g>
<title>net_rx_action (107 samples, 1.27%)</title><rect x="426.5" y="867.0" width="15.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="429.5" y="878.0"></text>
</g>
<g>
<title>process_backlog (101 samples, 1.20%)</title><rect x="427.3" y="851.0" width="14.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="430.3" y="862.0"></text>
</g>
<g>
<title>__netif_receive_skb (98 samples, 1.17%)</title><rect x="427.7" y="835.0" width="13.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="430.7" y="846.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (97 samples, 1.16%)</title><rect x="427.9" y="819.0" width="13.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="430.9" y="830.0"></text>
</g>
<g>
<title>ip_rcv (97 samples, 1.16%)</title><rect x="427.9" y="803.0" width="13.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="430.9" y="814.0"></text>
</g>
<g>
<title>ip_rcv_finish (95 samples, 1.13%)</title><rect x="428.2" y="787.0" width="13.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="431.2" y="798.0"></text>
</g>
<g>
<title>ip_local_deliver (95 samples, 1.13%)</title><rect x="428.2" y="771.0" width="13.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="431.2" y="782.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (93 samples, 1.11%)</title><rect x="428.4" y="755.0" width="13.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="431.4" y="766.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (92 samples, 1.10%)</title><rect x="428.4" y="739.0" width="13.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="431.4" y="750.0"></text>
</g>
<g>
<title>tcp_v4_rcv (90 samples, 1.07%)</title><rect x="428.7" y="723.0" width="12.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="431.7" y="734.0"></text>
</g>
<g>
<title>__inet_lookup_established (6 samples, 0.07%)</title><rect x="429.7" y="707.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="432.7" y="718.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (8 samples, 0.10%)</title><rect x="430.5" y="707.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="433.5" y="718.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (5 samples, 0.06%)</title><rect x="430.8" y="691.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="433.8" y="702.0"></text>
</g>
<g>
<title>tcp_add_backlog (2 samples, 0.02%)</title><rect x="431.7" y="707.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="434.7" y="718.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (65 samples, 0.77%)</title><rect x="432.0" y="707.0" width="9.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="435.0" y="718.0"></text>
</g>
<g>
<title>tcp_rcv_established (65 samples, 0.77%)</title><rect x="432.0" y="691.0" width="9.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="435.0" y="702.0"></text>
</g>
<g>
<title>__tcp_ack_snd_check (14 samples, 0.17%)</title><rect x="432.1" y="675.0" width="2.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="435.1" y="686.0"></text>
</g>
<g>
<title>tcp_send_ack (8 samples, 0.10%)</title><rect x="432.1" y="659.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="435.1" y="670.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (7 samples, 0.08%)</title><rect x="432.1" y="643.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="435.1" y="654.0"></text>
</g>
<g>
<title>__alloc_skb (3 samples, 0.04%)</title><rect x="432.1" y="627.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="435.1" y="638.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (2 samples, 0.02%)</title><rect x="432.1" y="611.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="435.1" y="622.0"></text>
</g>
<g>
<title>memset (2 samples, 0.02%)</title><rect x="432.1" y="595.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="435.1" y="606.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (4 samples, 0.05%)</title><rect x="432.5" y="627.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="435.5" y="638.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.02%)</title><rect x="432.8" y="611.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="435.8" y="622.0"></text>
</g>
<g>
<title>__ip_queue_xmit (2 samples, 0.02%)</title><rect x="432.8" y="595.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="435.8" y="606.0"></text>
</g>
<g>
<title>ip_local_out (2 samples, 0.02%)</title><rect x="432.8" y="579.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="435.8" y="590.0"></text>
</g>
<g>
<title>ip_output (2 samples, 0.02%)</title><rect x="432.8" y="563.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="435.8" y="574.0"></text>
</g>
<g>
<title>ip_finish_output (2 samples, 0.02%)</title><rect x="432.8" y="547.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="435.8" y="558.0"></text>
</g>
<g>
<title>__ip_finish_output (2 samples, 0.02%)</title><rect x="432.8" y="531.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="435.8" y="542.0"></text>
</g>
<g>
<title>ip_finish_output2 (2 samples, 0.02%)</title><rect x="432.8" y="515.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="435.8" y="526.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (6 samples, 0.07%)</title><rect x="433.2" y="659.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="436.2" y="670.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.02%)</title><rect x="433.2" y="643.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="436.2" y="654.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.05%)</title><rect x="433.5" y="643.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="436.5" y="654.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.05%)</title><rect x="433.5" y="627.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="436.5" y="638.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.05%)</title><rect x="433.5" y="611.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="436.5" y="622.0"></text>
</g>
<g>
<title>tcp_ack (10 samples, 0.12%)</title><rect x="434.1" y="675.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="437.1" y="686.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (7 samples, 0.08%)</title><rect x="434.5" y="659.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="437.5" y="670.0"></text>
</g>
<g>
<title>__kfree_skb (5 samples, 0.06%)</title><rect x="434.6" y="643.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="437.6" y="654.0"></text>
</g>
<g>
<title>skb_release_all (4 samples, 0.05%)</title><rect x="434.6" y="627.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="437.6" y="638.0"></text>
</g>
<g>
<title>skb_release_data (4 samples, 0.05%)</title><rect x="434.6" y="611.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="437.6" y="622.0"></text>
</g>
<g>
<title>tcp_data_queue (4 samples, 0.05%)</title><rect x="435.5" y="675.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="438.5" y="686.0"></text>
</g>
<g>
<title>tcp_data_ready (3 samples, 0.04%)</title><rect x="435.5" y="659.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="438.5" y="670.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.04%)</title><rect x="435.5" y="643.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="438.5" y="654.0"></text>
</g>
<g>
<title>__wake_up_sync_key (3 samples, 0.04%)</title><rect x="435.5" y="627.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="438.5" y="638.0"></text>
</g>
<g>
<title>__wake_up_common_lock (3 samples, 0.04%)</title><rect x="435.5" y="611.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="438.5" y="622.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="435.5" y="595.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="438.5" y="606.0"></text>
</g>
<g>
<title>tcp_data_ready (32 samples, 0.38%)</title><rect x="436.0" y="675.0" width="4.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="439.0" y="686.0"></text>
</g>
<g>
<title>sock_def_readable (32 samples, 0.38%)</title><rect x="436.0" y="659.0" width="4.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="439.0" y="670.0"></text>
</g>
<g>
<title>__wake_up_sync_key (31 samples, 0.37%)</title><rect x="436.2" y="643.0" width="4.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="439.2" y="654.0"></text>
</g>
<g>
<title>__wake_up_common_lock (31 samples, 0.37%)</title><rect x="436.2" y="627.0" width="4.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="439.2" y="638.0"></text>
</g>
<g>
<title>__lock_text_start (31 samples, 0.37%)</title><rect x="436.2" y="611.0" width="4.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="439.2" y="622.0"></text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.02%)</title><rect x="440.5" y="675.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="443.5" y="686.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (2 samples, 0.02%)</title><rect x="441.1" y="707.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="444.1" y="718.0"></text>
</g>
<g>
<title>dev_queue_xmit (6 samples, 0.07%)</title><rect x="441.5" y="931.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="444.5" y="942.0"></text>
</g>
<g>
<title>__dev_queue_xmit (6 samples, 0.07%)</title><rect x="441.5" y="915.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="444.5" y="926.0"></text>
</g>
<g>
<title>skb_clone (4 samples, 0.05%)</title><rect x="442.6" y="1043.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="445.6" y="1054.0"></text>
</g>
<g>
<title>__skb_clone (2 samples, 0.02%)</title><rect x="442.9" y="1027.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="445.9" y="1038.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.02%)</title><rect x="443.5" y="1059.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="446.5" y="1070.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (9 samples, 0.11%)</title><rect x="443.8" y="1059.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="446.8" y="1070.0"></text>
</g>
<g>
<title>tcp_rearm_rto (4 samples, 0.05%)</title><rect x="444.5" y="1043.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="447.5" y="1054.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.04%)</title><rect x="444.6" y="1027.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="447.6" y="1038.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.04%)</title><rect x="444.6" y="1011.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="447.6" y="1022.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="444.6" y="995.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="447.6" y="1006.0"></text>
</g>
<g>
<title>tcp_send_mss (2 samples, 0.02%)</title><rect x="445.7" y="1107.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="448.7" y="1118.0"></text>
</g>
<g>
<title>tcp_current_mss (2 samples, 0.02%)</title><rect x="445.7" y="1091.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="448.7" y="1102.0"></text>
</g>
<g>
<title>security_socket_sendmsg (5 samples, 0.06%)</title><rect x="446.0" y="1155.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="449.0" y="1166.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (4 samples, 0.05%)</title><rect x="446.1" y="1139.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="449.1" y="1150.0"></text>
</g>
<g>
<title>aa_sk_perm (4 samples, 0.05%)</title><rect x="446.1" y="1123.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="449.1" y="1134.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (3 samples, 0.04%)</title><rect x="446.3" y="1107.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="449.3" y="1118.0"></text>
</g>
<g>
<title>aa_profile_af_perm (2 samples, 0.02%)</title><rect x="446.4" y="1091.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="449.4" y="1102.0"></text>
</g>
<g>
<title>tcp_sendmsg (2 samples, 0.02%)</title><rect x="446.7" y="1155.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="449.7" y="1166.0"></text>
</g>
<g>
<title>rw_verify_area (4 samples, 0.05%)</title><rect x="447.0" y="1219.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="450.0" y="1230.0"></text>
</g>
<g>
<title>security_file_permission (3 samples, 0.04%)</title><rect x="447.1" y="1203.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="450.1" y="1214.0"></text>
</g>
<g>
<title>apparmor_file_permission (3 samples, 0.04%)</title><rect x="447.1" y="1187.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="450.1" y="1198.0"></text>
</g>
<g>
<title>common_file_perm (3 samples, 0.04%)</title><rect x="447.1" y="1171.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="450.1" y="1182.0"></text>
</g>
<g>
<title>aa_file_perm (2 samples, 0.02%)</title><rect x="447.3" y="1155.0" width="0.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="450.3" y="1166.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.02%)</title><rect x="447.5" y="1267.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="450.5" y="1278.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (1,646 samples, 19.60%)</title><rect x="448.1" y="1635.0" width="231.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="451.1" y="1646.0">io/netty/channel/AbstractChanne..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (1,646 samples, 19.60%)</title><rect x="448.1" y="1619.0" width="231.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="451.1" y="1630.0">io/netty/channel/AbstractChanne..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (1,642 samples, 19.55%)</title><rect x="448.4" y="1603.0" width="230.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="451.4" y="1614.0">io/netty/channel/AbstractChann..</text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (1,642 samples, 19.55%)</title><rect x="448.4" y="1587.0" width="230.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="451.4" y="1598.0">io/netty/channel/AbstractChann..</text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler.write (1,642 samples, 19.55%)</title><rect x="448.4" y="1571.0" width="230.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="451.4" y="1582.0">io/netty/channel/CombinedChann..</text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageEncoder.write (1,641 samples, 19.54%)</title><rect x="448.5" y="1555.0" width="230.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="451.5" y="1566.0">io/netty/handler/codec/Message..</text>
</g>
<g>
<title>io/netty/channel/CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.write (92 samples, 1.10%)</title><rect x="448.5" y="1539.0" width="13.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="451.5" y="1550.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (89 samples, 1.06%)</title><rect x="448.5" y="1523.0" width="12.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="451.5" y="1534.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (89 samples, 1.06%)</title><rect x="448.5" y="1507.0" width="12.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="451.5" y="1518.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.findContextOutbound (6 samples, 0.07%)</title><rect x="448.5" y="1491.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="451.5" y="1502.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.executor (2 samples, 0.02%)</title><rect x="448.5" y="1475.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="451.5" y="1486.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.skipContext (4 samples, 0.05%)</title><rect x="448.8" y="1475.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="451.8" y="1486.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.executor (3 samples, 0.04%)</title><rect x="449.0" y="1459.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="452.0" y="1470.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel.eventLoop (2 samples, 0.02%)</title><rect x="449.1" y="1443.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="452.1" y="1454.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel.eventLoop (2 samples, 0.02%)</title><rect x="449.1" y="1427.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="452.1" y="1438.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (12 samples, 0.14%)</title><rect x="449.4" y="1491.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="452.4" y="1502.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (12 samples, 0.14%)</title><rect x="449.4" y="1475.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="452.4" y="1486.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.write (12 samples, 0.14%)</title><rect x="449.4" y="1459.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="452.4" y="1470.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.write (12 samples, 0.14%)</title><rect x="449.4" y="1443.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="452.4" y="1454.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.addMessage (6 samples, 0.07%)</title><rect x="449.5" y="1427.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="452.5" y="1438.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer$Entry.newInstance (3 samples, 0.04%)</title><rect x="449.5" y="1411.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="452.5" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/internal/ObjectPool$RecyclerObjectPool.get (2 samples, 0.02%)</title><rect x="449.7" y="1395.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="452.7" y="1406.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.total (2 samples, 0.02%)</title><rect x="450.1" y="1411.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="453.1" y="1422.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel.filterOutboundMessage (5 samples, 0.06%)</title><rect x="450.4" y="1427.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="453.4" y="1438.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.isDirect (2 samples, 0.02%)</title><rect x="450.8" y="1411.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="453.8" y="1422.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.touch (71 samples, 0.85%)</title><rect x="451.1" y="1491.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="454.1" y="1502.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.touch (71 samples, 0.85%)</title><rect x="451.1" y="1475.0" width="9.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="454.1" y="1486.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.touch (71 samples, 0.85%)</title><rect x="451.1" y="1459.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="454.1" y="1470.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.touch (71 samples, 0.85%)</title><rect x="451.1" y="1443.0" width="9.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="454.1" y="1454.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (71 samples, 0.85%)</title><rect x="451.1" y="1427.0" width="9.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="454.1" y="1438.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (71 samples, 0.85%)</title><rect x="451.1" y="1411.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="454.1" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (71 samples, 0.85%)</title><rect x="451.1" y="1395.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="454.1" y="1406.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.toHintString (5 samples, 0.06%)</title><rect x="451.5" y="1379.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="454.5" y="1390.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (62 samples, 0.74%)</title><rect x="452.3" y="1379.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.3" y="1390.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (61 samples, 0.73%)</title><rect x="452.5" y="1363.0" width="8.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="455.5" y="1374.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (61 samples, 0.73%)</title><rect x="452.5" y="1347.0" width="8.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="455.5" y="1358.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (59 samples, 0.70%)</title><rect x="452.7" y="1331.0" width="8.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="455.7" y="1342.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (57 samples, 0.68%)</title><rect x="452.9" y="1315.0" width="8.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="455.9" y="1326.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (55 samples, 0.65%)</title><rect x="453.2" y="1299.0" width="7.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="456.2" y="1310.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.02%)</title><rect x="453.3" y="1283.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="456.3" y="1294.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.02%)</title><rect x="453.6" y="1283.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="456.6" y="1294.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (47 samples, 0.56%)</title><rect x="454.3" y="1283.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="457.3" y="1294.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (5 samples, 0.06%)</title><rect x="457.9" y="1267.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="460.9" y="1278.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (2 samples, 0.02%)</title><rect x="457.9" y="1251.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="460.9" y="1262.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.04%)</title><rect x="458.2" y="1251.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="461.2" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="458.4" y="1235.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="461.4" y="1246.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="458.4" y="1219.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="461.4" y="1230.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (14 samples, 0.17%)</title><rect x="458.9" y="1267.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="461.9" y="1278.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (12 samples, 0.14%)</title><rect x="459.2" y="1251.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="462.2" y="1262.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (7 samples, 0.08%)</title><rect x="459.6" y="1235.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="462.6" y="1246.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.02%)</title><rect x="460.6" y="1235.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="463.6" y="1246.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.write (3 samples, 0.04%)</title><rect x="461.0" y="1523.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.0" y="1534.0"></text>
</g>
<g>
<title>io/netty/handler/codec/CodecOutputList.newInstance (2 samples, 0.02%)</title><rect x="461.5" y="1539.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="464.5" y="1550.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectEncoder.encode (1,540 samples, 18.34%)</title><rect x="461.7" y="1539.0" width="216.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="464.7" y="1550.0">io/netty/handler/codec/http/..</text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.buffer (108 samples, 1.29%)</title><rect x="462.9" y="1523.0" width="15.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="465.9" y="1534.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (108 samples, 1.29%)</title><rect x="462.9" y="1507.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="465.9" y="1518.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (108 samples, 1.29%)</title><rect x="462.9" y="1491.0" width="15.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="465.9" y="1502.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBufAllocator.newDirectBuffer (107 samples, 1.27%)</title><rect x="463.0" y="1475.0" width="15.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="466.0" y="1486.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.toLeakAwareBuffer (87 samples, 1.04%)</title><rect x="463.4" y="1459.0" width="12.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="466.4" y="1470.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track (83 samples, 0.99%)</title><rect x="464.0" y="1443.0" width="11.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="467.0" y="1454.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track0 (83 samples, 0.99%)</title><rect x="464.0" y="1427.0" width="11.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="467.0" y="1438.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.&lt;init&gt; (80 samples, 0.95%)</title><rect x="464.1" y="1411.0" width="11.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="467.1" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (72 samples, 0.86%)</title><rect x="464.1" y="1395.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="467.1" y="1406.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (72 samples, 0.86%)</title><rect x="464.1" y="1379.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="467.1" y="1390.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (72 samples, 0.86%)</title><rect x="464.1" y="1363.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="467.1" y="1374.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (71 samples, 0.85%)</title><rect x="464.3" y="1347.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="467.3" y="1358.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (69 samples, 0.82%)</title><rect x="464.4" y="1331.0" width="9.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="467.4" y="1342.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (68 samples, 0.81%)</title><rect x="464.5" y="1315.0" width="9.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="467.5" y="1326.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (67 samples, 0.80%)</title><rect x="464.7" y="1299.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="467.7" y="1310.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.05%)</title><rect x="464.7" y="1283.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="467.7" y="1294.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (4 samples, 0.05%)</title><rect x="465.4" y="1283.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="468.4" y="1294.0"></text>
</g>
<g>
<title>Method::bcp_from(unsigned char*) const (2 samples, 0.02%)</title><rect x="466.0" y="1283.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="469.0" y="1294.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (53 samples, 0.63%)</title><rect x="466.7" y="1283.0" width="7.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="469.7" y="1294.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (8 samples, 0.10%)</title><rect x="470.9" y="1267.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="473.9" y="1278.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.02%)</title><rect x="470.9" y="1251.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="473.9" y="1262.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.06%)</title><rect x="471.3" y="1251.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="474.3" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.05%)</title><rect x="471.4" y="1235.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="474.4" y="1246.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="471.4" y="1219.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="474.4" y="1230.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.02%)</title><rect x="472.0" y="1267.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="475.0" y="1278.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.02%)</title><rect x="472.0" y="1251.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="475.0" y="1262.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (2 samples, 0.02%)</title><rect x="472.6" y="1267.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="475.6" y="1278.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (8 samples, 0.10%)</title><rect x="472.8" y="1267.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="475.8" y="1278.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (6 samples, 0.07%)</title><rect x="473.1" y="1251.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="476.1" y="1262.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (6 samples, 0.07%)</title><rect x="473.1" y="1235.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="476.1" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$SetFromMap.add (8 samples, 0.10%)</title><rect x="474.2" y="1395.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="477.2" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.put (8 samples, 0.10%)</title><rect x="474.2" y="1379.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="477.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putVal (8 samples, 0.10%)</title><rect x="474.2" y="1363.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="477.2" y="1374.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (5 samples, 0.06%)</title><rect x="474.4" y="1347.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="477.4" y="1358.0"></text>
</g>
<g>
<title>JVM_IHashCode (3 samples, 0.04%)</title><rect x="474.5" y="1331.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="477.5" y="1342.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.reportLeak (2 samples, 0.02%)</title><rect x="475.4" y="1411.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="478.4" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.needReport (2 samples, 0.02%)</title><rect x="475.4" y="1395.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="478.4" y="1406.0"></text>
</g>
<g>
<title>io/netty/util/internal/logging/LocationAwareSlf4JLogger.isErrorEnabled (2 samples, 0.02%)</title><rect x="475.4" y="1379.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="478.4" y="1390.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isErrorEnabled (2 samples, 0.02%)</title><rect x="475.4" y="1363.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="478.4" y="1374.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isErrorEnabled (2 samples, 0.02%)</title><rect x="475.4" y="1347.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="478.4" y="1358.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.02%)</title><rect x="475.4" y="1331.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="478.4" y="1342.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.02%)</title><rect x="475.4" y="1315.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="478.4" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.02%)</title><rect x="475.4" y="1299.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="478.4" y="1310.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (14 samples, 0.17%)</title><rect x="475.6" y="1459.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="478.6" y="1470.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (12 samples, 0.14%)</title><rect x="475.9" y="1443.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="478.9" y="1454.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.tcacheAllocateSmall (12 samples, 0.14%)</title><rect x="475.9" y="1427.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="478.9" y="1438.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocateSmall (12 samples, 0.14%)</title><rect x="475.9" y="1411.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="478.9" y="1422.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocate (12 samples, 0.14%)</title><rect x="475.9" y="1395.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.9" y="1406.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.allocate (12 samples, 0.14%)</title><rect x="475.9" y="1379.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="478.9" y="1390.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache$Entry.recycle (5 samples, 0.06%)</title><rect x="476.1" y="1363.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="479.1" y="1374.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$DefaultHandle.recycle (5 samples, 0.06%)</title><rect x="476.1" y="1347.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="479.1" y="1358.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.push (5 samples, 0.06%)</title><rect x="476.1" y="1331.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="479.1" y="1342.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$SubPageMemoryRegionCache.initBuf (6 samples, 0.07%)</title><rect x="476.8" y="1363.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.8" y="1374.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBufWithSubpage (6 samples, 0.07%)</title><rect x="476.8" y="1347.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="479.8" y="1358.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.init (5 samples, 0.06%)</title><rect x="476.9" y="1331.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="479.9" y="1342.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.initMemoryAddress (4 samples, 0.05%)</title><rect x="477.1" y="1315.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="480.1" y="1326.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.directBufferAddress (4 samples, 0.05%)</title><rect x="477.1" y="1299.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="480.1" y="1310.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.directBufferAddress (4 samples, 0.05%)</title><rect x="477.1" y="1283.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="480.1" y="1294.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.getLong (4 samples, 0.05%)</title><rect x="477.1" y="1267.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="480.1" y="1278.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocal.get (3 samples, 0.04%)</title><rect x="477.6" y="1459.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="480.6" y="1470.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.get (2 samples, 0.02%)</title><rect x="477.6" y="1443.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="480.6" y="1454.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.writeBytes (78 samples, 0.93%)</title><rect x="478.0" y="1523.0" width="11.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="481.0" y="1534.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (65 samples, 0.77%)</title><rect x="478.0" y="1507.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="481.0" y="1518.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (65 samples, 0.77%)</title><rect x="478.0" y="1491.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="481.0" y="1502.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (65 samples, 0.77%)</title><rect x="478.0" y="1475.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="481.0" y="1486.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (65 samples, 0.77%)</title><rect x="478.0" y="1459.0" width="9.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="481.0" y="1470.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (65 samples, 0.77%)</title><rect x="478.0" y="1443.0" width="9.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="481.0" y="1454.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (65 samples, 0.77%)</title><rect x="478.0" y="1427.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="481.0" y="1438.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (65 samples, 0.77%)</title><rect x="478.0" y="1411.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="481.0" y="1422.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (64 samples, 0.76%)</title><rect x="478.2" y="1395.0" width="9.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="481.2" y="1406.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (64 samples, 0.76%)</title><rect x="478.2" y="1379.0" width="9.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="481.2" y="1390.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.02%)</title><rect x="478.3" y="1363.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="481.3" y="1374.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (61 samples, 0.73%)</title><rect x="478.6" y="1363.0" width="8.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="481.6" y="1374.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.04%)</title><rect x="478.6" y="1347.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="481.6" y="1358.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (52 samples, 0.62%)</title><rect x="479.9" y="1347.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="482.9" y="1358.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (7 samples, 0.08%)</title><rect x="483.7" y="1331.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="486.7" y="1342.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (4 samples, 0.05%)</title><rect x="483.8" y="1315.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="486.8" y="1326.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="483.9" y="1299.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="486.9" y="1310.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="483.9" y="1283.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="486.9" y="1294.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.02%)</title><rect x="484.1" y="1267.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="487.1" y="1278.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.02%)</title><rect x="484.4" y="1315.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="487.4" y="1326.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (2 samples, 0.02%)</title><rect x="484.6" y="1331.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="487.6" y="1342.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (16 samples, 0.19%)</title><rect x="484.9" y="1331.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="487.9" y="1342.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (12 samples, 0.14%)</title><rect x="485.5" y="1315.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="488.5" y="1326.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (6 samples, 0.07%)</title><rect x="486.0" y="1299.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="489.0" y="1310.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.02%)</title><rect x="486.9" y="1299.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="489.9" y="1310.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.writeBytes (13 samples, 0.15%)</title><rect x="487.2" y="1507.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="490.2" y="1518.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (13 samples, 0.15%)</title><rect x="487.2" y="1491.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="490.2" y="1502.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (13 samples, 0.15%)</title><rect x="487.2" y="1475.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="490.2" y="1486.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (13 samples, 0.15%)</title><rect x="487.2" y="1459.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="490.2" y="1470.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.setBytes (13 samples, 0.15%)</title><rect x="487.2" y="1443.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="490.2" y="1454.0"></text>
</g>
<g>
<title>io/netty/buffer/UnsafeByteBufUtil.setBytes (13 samples, 0.15%)</title><rect x="487.2" y="1427.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="490.2" y="1438.0"></text>
</g>
<g>
<title>io/netty/buffer/UnpooledHeapByteBuf.array (2 samples, 0.02%)</title><rect x="487.3" y="1411.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="490.3" y="1422.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureAccessible (2 samples, 0.02%)</title><rect x="487.3" y="1395.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="490.3" y="1406.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.isAccessible (2 samples, 0.02%)</title><rect x="487.3" y="1379.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="490.3" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.isLiveNonVolatile (2 samples, 0.02%)</title><rect x="487.3" y="1363.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="490.3" y="1374.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.getInt (2 samples, 0.02%)</title><rect x="487.3" y="1347.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="490.3" y="1358.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.getInt (2 samples, 0.02%)</title><rect x="487.3" y="1331.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="490.3" y="1342.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.copyMemory (10 samples, 0.12%)</title><rect x="487.6" y="1411.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="490.6" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.copyMemory (10 samples, 0.12%)</title><rect x="487.6" y="1395.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="490.6" y="1406.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (10 samples, 0.12%)</title><rect x="487.6" y="1379.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="490.6" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (10 samples, 0.12%)</title><rect x="487.6" y="1363.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="490.6" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (10 samples, 0.12%)</title><rect x="487.6" y="1347.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="490.6" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (10 samples, 0.12%)</title><rect x="487.6" y="1331.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="490.6" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (9 samples, 0.11%)</title><rect x="487.7" y="1315.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="490.7" y="1326.0"></text>
</g>
<g>
<title>java/lang/Class.isPrimitive (2 samples, 0.02%)</title><rect x="488.7" y="1299.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="491.7" y="1310.0"></text>
</g>
<g>
<title>io/netty/buffer/ByteBufUtil.writeShortBE (68 samples, 0.81%)</title><rect x="489.0" y="1523.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="492.0" y="1534.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.writeShort (67 samples, 0.80%)</title><rect x="489.1" y="1507.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="492.1" y="1518.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (63 samples, 0.75%)</title><rect x="489.1" y="1491.0" width="8.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="492.1" y="1502.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (63 samples, 0.75%)</title><rect x="489.1" y="1475.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="492.1" y="1486.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (63 samples, 0.75%)</title><rect x="489.1" y="1459.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="492.1" y="1470.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (63 samples, 0.75%)</title><rect x="489.1" y="1443.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="492.1" y="1454.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (61 samples, 0.73%)</title><rect x="489.4" y="1427.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="492.4" y="1438.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (61 samples, 0.73%)</title><rect x="489.4" y="1411.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="492.4" y="1422.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (61 samples, 0.73%)</title><rect x="489.4" y="1395.0" width="8.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="492.4" y="1406.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (61 samples, 0.73%)</title><rect x="489.4" y="1379.0" width="8.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="492.4" y="1390.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (60 samples, 0.71%)</title><rect x="489.4" y="1363.0" width="8.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="492.4" y="1374.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.02%)</title><rect x="489.6" y="1347.0" width="0.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="492.6" y="1358.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.02%)</title><rect x="489.8" y="1347.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="492.8" y="1358.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (55 samples, 0.65%)</title><rect x="490.1" y="1347.0" width="7.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="493.1" y="1358.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (51 samples, 0.61%)</title><rect x="490.7" y="1331.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="493.7" y="1342.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 573558ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.02%)</title><rect x="494.8" y="1315.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="497.8" y="1326.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (7 samples, 0.08%)</title><rect x="495.0" y="1315.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="498.0" y="1326.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.06%)</title><rect x="495.3" y="1299.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="498.3" y="1310.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.05%)</title><rect x="495.5" y="1283.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="498.5" y="1294.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.05%)</title><rect x="495.5" y="1267.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="498.5" y="1278.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.02%)</title><rect x="495.7" y="1251.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="498.7" y="1262.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (11 samples, 0.13%)</title><rect x="496.2" y="1315.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="499.2" y="1326.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (9 samples, 0.11%)</title><rect x="496.4" y="1299.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="499.4" y="1310.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (6 samples, 0.07%)</title><rect x="496.6" y="1283.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="499.6" y="1294.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.02%)</title><rect x="497.4" y="1283.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="500.4" y="1294.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.writeShort (4 samples, 0.05%)</title><rect x="498.0" y="1491.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="501.0" y="1502.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeShort (4 samples, 0.05%)</title><rect x="498.0" y="1475.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="501.0" y="1486.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureWritable0 (4 samples, 0.05%)</title><rect x="498.0" y="1459.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="501.0" y="1470.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureAccessible (4 samples, 0.05%)</title><rect x="498.0" y="1443.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="501.0" y="1454.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.isAccessible (4 samples, 0.05%)</title><rect x="498.0" y="1427.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="501.0" y="1438.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.isLiveNonVolatile (4 samples, 0.05%)</title><rect x="498.0" y="1411.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="501.0" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.getInt (4 samples, 0.05%)</title><rect x="498.0" y="1395.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="501.0" y="1406.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.getInt (4 samples, 0.05%)</title><rect x="498.0" y="1379.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="501.0" y="1390.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectEncoder.contentLength (2 samples, 0.02%)</title><rect x="498.8" y="1523.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="501.8" y="1534.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectEncoder.encodeHeaders (975 samples, 11.61%)</title><rect x="499.1" y="1523.0" width="137.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="502.1" y="1534.0">io/netty/handler/..</text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders$HeaderIterator.next (2 samples, 0.02%)</title><rect x="499.1" y="1507.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="502.1" y="1518.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.iteratorCharSequence (3 samples, 0.04%)</title><rect x="499.4" y="1507.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="502.4" y="1518.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.iterator (3 samples, 0.04%)</title><rect x="499.4" y="1491.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="502.4" y="1502.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders$HeaderIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="499.4" y="1475.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="502.4" y="1486.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpHeadersEncoder.encoderHeader (970 samples, 11.55%)</title><rect x="499.8" y="1507.0" width="136.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="502.8" y="1518.0">io/netty/handler/..</text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.ensureWritable (167 samples, 1.99%)</title><rect x="499.8" y="1491.0" width="23.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="502.8" y="1502.0">i..</text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (167 samples, 1.99%)</title><rect x="499.8" y="1475.0" width="23.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="502.8" y="1486.0">i..</text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (167 samples, 1.99%)</title><rect x="499.8" y="1459.0" width="23.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="502.8" y="1470.0">i..</text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (167 samples, 1.99%)</title><rect x="499.8" y="1443.0" width="23.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="502.8" y="1454.0">i..</text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (167 samples, 1.99%)</title><rect x="499.8" y="1427.0" width="23.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="502.8" y="1438.0">i..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (166 samples, 1.98%)</title><rect x="500.0" y="1411.0" width="23.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="503.0" y="1422.0">j..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (166 samples, 1.98%)</title><rect x="500.0" y="1395.0" width="23.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="503.0" y="1406.0">j..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (166 samples, 1.98%)</title><rect x="500.0" y="1379.0" width="23.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="503.0" y="1390.0">j..</text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (164 samples, 1.95%)</title><rect x="500.2" y="1363.0" width="23.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="503.2" y="1374.0">J..</text>
</g>
<g>
<title>JVM_FillInStackTrace (164 samples, 1.95%)</title><rect x="500.2" y="1347.0" width="23.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="503.2" y="1358.0">J..</text>
</g>
<g>
<title>Universe::should_fill_in_stack_trace(Handle) (2 samples, 0.02%)</title><rect x="500.8" y="1331.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="503.8" y="1342.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (158 samples, 1.88%)</title><rect x="501.1" y="1331.0" width="22.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="504.1" y="1342.0">j..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (7 samples, 0.08%)</title><rect x="501.2" y="1315.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="504.2" y="1326.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.02%)</title><rect x="502.2" y="1315.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="505.2" y="1326.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (4 samples, 0.05%)</title><rect x="502.8" y="1315.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="505.8" y="1326.0"></text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (2 samples, 0.02%)</title><rect x="503.5" y="1315.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="506.5" y="1326.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.02%)</title><rect x="503.8" y="1315.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="506.8" y="1326.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (133 samples, 1.58%)</title><rect x="504.5" y="1315.0" width="18.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="507.5" y="1326.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (5 samples, 0.06%)</title><rect x="513.9" y="1299.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="516.9" y="1310.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (16 samples, 0.19%)</title><rect x="514.6" y="1299.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="517.6" y="1310.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (5 samples, 0.06%)</title><rect x="515.0" y="1283.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="518.0" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.05%)</title><rect x="515.1" y="1267.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="518.1" y="1278.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.05%)</title><rect x="515.1" y="1251.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="518.1" y="1262.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.02%)</title><rect x="515.3" y="1235.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="518.3" y="1246.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (8 samples, 0.10%)</title><rect x="515.7" y="1283.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="518.7" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.05%)</title><rect x="516.3" y="1267.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="519.3" y="1278.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.05%)</title><rect x="516.3" y="1251.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="519.3" y="1262.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (4 samples, 0.05%)</title><rect x="517.0" y="1299.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="520.0" y="1310.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="517.0" y="1283.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="520.0" y="1294.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (3 samples, 0.04%)</title><rect x="517.5" y="1299.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="520.5" y="1310.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (3 samples, 0.04%)</title><rect x="517.9" y="1299.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="520.9" y="1310.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (34 samples, 0.40%)</title><rect x="518.4" y="1299.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="521.4" y="1310.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (28 samples, 0.33%)</title><rect x="519.2" y="1283.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="522.2" y="1294.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.06%)</title><rect x="519.5" y="1267.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="522.5" y="1278.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (18 samples, 0.21%)</title><rect x="520.2" y="1267.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="523.2" y="1278.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (3 samples, 0.04%)</title><rect x="522.7" y="1267.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="525.7" y="1278.0"></text>
</g>
<g>
<title>io/netty/buffer/ByteBufUtil.setShortBE (404 samples, 4.81%)</title><rect x="523.3" y="1491.0" width="56.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="526.3" y="1502.0">io/net..</text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.setShort (404 samples, 4.81%)</title><rect x="523.3" y="1475.0" width="56.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="526.3" y="1486.0">io/net..</text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (392 samples, 4.67%)</title><rect x="523.3" y="1459.0" width="55.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="526.3" y="1470.0">io/ne..</text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (392 samples, 4.67%)</title><rect x="523.3" y="1443.0" width="55.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="526.3" y="1454.0">io/ne..</text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (392 samples, 4.67%)</title><rect x="523.3" y="1427.0" width="55.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="526.3" y="1438.0">io/ne..</text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (392 samples, 4.67%)</title><rect x="523.3" y="1411.0" width="55.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="526.3" y="1422.0">io/ne..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (388 samples, 4.62%)</title><rect x="523.8" y="1395.0" width="54.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="526.8" y="1406.0">java/..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (385 samples, 4.58%)</title><rect x="524.3" y="1379.0" width="54.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="527.3" y="1390.0">java/..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (385 samples, 4.58%)</title><rect x="524.3" y="1363.0" width="54.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="527.3" y="1374.0">java/..</text>
</g>
<g>
<title>JVM_FillInStackTrace (2 samples, 0.02%)</title><rect x="525.2" y="1347.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="528.2" y="1358.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (376 samples, 4.48%)</title><rect x="525.5" y="1347.0" width="52.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="528.5" y="1358.0">Java_..</text>
</g>
<g>
<title>JVM_FillInStackTrace (372 samples, 4.43%)</title><rect x="525.5" y="1331.0" width="52.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="528.5" y="1342.0">JVM_F..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.04%)</title><rect x="525.7" y="1315.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="528.7" y="1326.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (4 samples, 0.05%)</title><rect x="526.1" y="1315.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="529.1" y="1326.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (363 samples, 4.32%)</title><rect x="526.8" y="1315.0" width="51.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="529.8" y="1326.0">java_..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (18 samples, 0.21%)</title><rect x="526.8" y="1299.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="529.8" y="1310.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (3 samples, 0.04%)</title><rect x="529.3" y="1299.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="532.3" y="1310.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (11 samples, 0.13%)</title><rect x="530.2" y="1299.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="533.2" y="1310.0"></text>
</g>
<g>
<title>Method::bcp_from(unsigned char*) const (5 samples, 0.06%)</title><rect x="531.7" y="1299.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="534.7" y="1310.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (2 samples, 0.02%)</title><rect x="532.4" y="1299.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="535.4" y="1310.0"></text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (2 samples, 0.02%)</title><rect x="532.7" y="1299.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="535.7" y="1310.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.07%)</title><rect x="533.0" y="1299.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="536.0" y="1310.0"></text>
</g>
<g>
<title>frame::interpreter_frame_bcp() const (5 samples, 0.06%)</title><rect x="533.8" y="1299.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="536.8" y="1310.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (2 samples, 0.02%)</title><rect x="534.5" y="1299.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="537.5" y="1310.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.04%)</title><rect x="534.8" y="1299.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="537.8" y="1310.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (302 samples, 3.60%)</title><rect x="535.2" y="1299.0" width="42.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="538.2" y="1310.0">java..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (8 samples, 0.10%)</title><rect x="557.8" y="1283.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="560.8" y="1294.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 573558ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.02%)</title><rect x="559.0" y="1283.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="562.0" y="1294.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;574518ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 574518ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.02%)</title><rect x="559.3" y="1283.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="562.3" y="1294.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (43 samples, 0.51%)</title><rect x="559.5" y="1283.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="562.5" y="1294.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.02%)</title><rect x="560.0" y="1267.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="563.0" y="1278.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (4 samples, 0.05%)</title><rect x="560.2" y="1267.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="563.2" y="1278.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (19 samples, 0.23%)</title><rect x="560.8" y="1267.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="563.8" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (13 samples, 0.15%)</title><rect x="561.6" y="1251.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="564.6" y="1262.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (10 samples, 0.12%)</title><rect x="561.8" y="1235.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="564.8" y="1246.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.02%)</title><rect x="562.3" y="1219.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="565.3" y="1230.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (2 samples, 0.02%)</title><rect x="562.6" y="1219.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="565.6" y="1230.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (15 samples, 0.18%)</title><rect x="563.5" y="1267.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="566.5" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (13 samples, 0.15%)</title><rect x="563.7" y="1251.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="566.7" y="1262.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (10 samples, 0.12%)</title><rect x="563.9" y="1235.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="566.9" y="1246.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.02%)</title><rect x="564.2" y="1219.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="567.2" y="1230.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.05%)</title><rect x="564.6" y="1219.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="567.6" y="1230.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.02%)</title><rect x="564.9" y="1203.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="567.9" y="1214.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.02%)</title><rect x="564.9" y="1187.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="567.9" y="1198.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (5 samples, 0.06%)</title><rect x="565.6" y="1283.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="568.6" y="1294.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="565.6" y="1267.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="568.6" y="1278.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.04%)</title><rect x="565.9" y="1267.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="568.9" y="1278.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (6 samples, 0.07%)</title><rect x="566.3" y="1283.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="569.3" y="1294.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (7 samples, 0.08%)</title><rect x="567.3" y="1283.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="570.3" y="1294.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (66 samples, 0.79%)</title><rect x="568.2" y="1283.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="571.2" y="1294.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="569.8" y="1267.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="572.8" y="1278.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (52 samples, 0.62%)</title><rect x="570.2" y="1267.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="573.2" y="1278.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (2 samples, 0.02%)</title><rect x="571.6" y="1251.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="574.6" y="1262.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.05%)</title><rect x="571.9" y="1251.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="574.9" y="1262.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (32 samples, 0.38%)</title><rect x="572.5" y="1251.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="575.5" y="1262.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (4 samples, 0.05%)</title><rect x="577.0" y="1251.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="580.0" y="1262.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (4 samples, 0.05%)</title><rect x="577.8" y="1331.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="580.8" y="1342.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.setShort (12 samples, 0.14%)</title><rect x="578.4" y="1459.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="581.4" y="1470.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.setShort (12 samples, 0.14%)</title><rect x="578.4" y="1443.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="581.4" y="1454.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf._setShort (11 samples, 0.13%)</title><rect x="578.5" y="1427.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="581.5" y="1438.0"></text>
</g>
<g>
<title>io/netty/buffer/UnsafeByteBufUtil.setShort (11 samples, 0.13%)</title><rect x="578.5" y="1411.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="581.5" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.putShort (11 samples, 0.13%)</title><rect x="578.5" y="1395.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="581.5" y="1406.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.putShort (11 samples, 0.13%)</title><rect x="578.5" y="1379.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="581.5" y="1390.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putShort (11 samples, 0.13%)</title><rect x="578.5" y="1363.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="581.5" y="1374.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpHeadersEncoder.writeAscii (399 samples, 4.75%)</title><rect x="580.0" y="1491.0" width="56.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="583.0" y="1502.0">io/net..</text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.setCharSequence (199 samples, 2.37%)</title><rect x="580.0" y="1475.0" width="28.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="583.0" y="1486.0">i..</text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (185 samples, 2.20%)</title><rect x="580.0" y="1459.0" width="26.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="583.0" y="1470.0">i..</text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (183 samples, 2.18%)</title><rect x="580.3" y="1443.0" width="25.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="583.3" y="1454.0">i..</text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (183 samples, 2.18%)</title><rect x="580.3" y="1427.0" width="25.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="583.3" y="1438.0">i..</text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (183 samples, 2.18%)</title><rect x="580.3" y="1411.0" width="25.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="583.3" y="1422.0">i..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (182 samples, 2.17%)</title><rect x="580.5" y="1395.0" width="25.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="583.5" y="1406.0">j..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (181 samples, 2.16%)</title><rect x="580.6" y="1379.0" width="25.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="583.6" y="1390.0">j..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (181 samples, 2.16%)</title><rect x="580.6" y="1363.0" width="25.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="583.6" y="1374.0">j..</text>
</g>
<g>
<title>/usr/lib/jvm/java-11-openjdk-amd64/lib/libjava.so (2 samples, 0.02%)</title><rect x="581.0" y="1347.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="584.0" y="1358.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (2 samples, 0.02%)</title><rect x="581.3" y="1347.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="584.3" y="1358.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (174 samples, 2.07%)</title><rect x="581.6" y="1347.0" width="24.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="584.6" y="1358.0">J..</text>
</g>
<g>
<title>JVM_FillInStackTrace (174 samples, 2.07%)</title><rect x="581.6" y="1331.0" width="24.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="584.6" y="1342.0">J..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.05%)</title><rect x="582.0" y="1315.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="585.0" y="1326.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (166 samples, 1.98%)</title><rect x="582.7" y="1315.0" width="23.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="585.7" y="1326.0">j..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (13 samples, 0.15%)</title><rect x="582.9" y="1299.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="585.9" y="1310.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (4 samples, 0.05%)</title><rect x="585.0" y="1299.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="588.0" y="1310.0"></text>
</g>
<g>
<title>Method::bcp_from(unsigned char*) const (4 samples, 0.05%)</title><rect x="585.7" y="1299.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="588.7" y="1310.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (2 samples, 0.02%)</title><rect x="586.2" y="1299.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="589.2" y="1310.0"></text>
</g>
<g>
<title>frame::interpreter_frame_bcp() const (2 samples, 0.02%)</title><rect x="586.7" y="1299.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="589.7" y="1310.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (135 samples, 1.61%)</title><rect x="587.1" y="1299.0" width="18.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="590.1" y="1310.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (22 samples, 0.26%)</title><rect x="594.0" y="1283.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="597.0" y="1294.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.02%)</title><rect x="594.2" y="1267.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="597.2" y="1278.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (8 samples, 0.10%)</title><rect x="594.5" y="1267.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="597.5" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.08%)</title><rect x="594.7" y="1251.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="597.7" y="1262.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.06%)</title><rect x="594.9" y="1235.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="597.9" y="1246.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.02%)</title><rect x="594.9" y="1219.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="597.9" y="1230.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.02%)</title><rect x="595.4" y="1219.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="598.4" y="1230.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (10 samples, 0.12%)</title><rect x="595.6" y="1267.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="598.6" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (8 samples, 0.10%)</title><rect x="595.9" y="1251.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="598.9" y="1262.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.06%)</title><rect x="596.2" y="1235.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="599.2" y="1246.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.02%)</title><rect x="596.3" y="1219.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="599.3" y="1230.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.04%)</title><rect x="597.2" y="1283.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="600.2" y="1294.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.02%)</title><rect x="597.2" y="1267.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="600.2" y="1278.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (7 samples, 0.08%)</title><rect x="597.6" y="1283.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="600.6" y="1294.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (51 samples, 0.61%)</title><rect x="598.7" y="1283.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="601.7" y="1294.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (42 samples, 0.50%)</title><rect x="600.0" y="1267.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="603.0" y="1278.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (8 samples, 0.10%)</title><rect x="600.7" y="1251.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="603.7" y="1262.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (21 samples, 0.25%)</title><rect x="601.8" y="1251.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="604.8" y="1262.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (8 samples, 0.10%)</title><rect x="604.8" y="1251.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="607.8" y="1262.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.setCharSequence (14 samples, 0.17%)</title><rect x="606.0" y="1459.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="609.0" y="1470.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.setCharSequence (14 samples, 0.17%)</title><rect x="606.0" y="1443.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="609.0" y="1454.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.setCharSequence0 (14 samples, 0.17%)</title><rect x="606.0" y="1427.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="609.0" y="1438.0"></text>
</g>
<g>
<title>io/netty/buffer/ByteBufUtil.writeAscii (6 samples, 0.07%)</title><rect x="606.2" y="1411.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="609.2" y="1422.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf._setByte (5 samples, 0.06%)</title><rect x="606.2" y="1395.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="609.2" y="1406.0"></text>
</g>
<g>
<title>io/netty/buffer/UnsafeByteBufUtil.setByte (5 samples, 0.06%)</title><rect x="606.2" y="1379.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="609.2" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.putByte (5 samples, 0.06%)</title><rect x="606.2" y="1363.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="609.2" y="1374.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.putByte (5 samples, 0.06%)</title><rect x="606.2" y="1347.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="609.2" y="1358.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (5 samples, 0.06%)</title><rect x="606.2" y="1331.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="609.2" y="1342.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.05%)</title><rect x="607.0" y="1411.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="610.0" y="1422.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.04%)</title><rect x="607.2" y="1395.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="610.2" y="1406.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.equals (3 samples, 0.04%)</title><rect x="607.6" y="1411.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="610.6" y="1422.0"></text>
</g>
<g>
<title>io/netty/buffer/ByteBufUtil.copy (199 samples, 2.37%)</title><rect x="608.0" y="1475.0" width="28.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="611.0" y="1486.0">i..</text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.setBytes (199 samples, 2.37%)</title><rect x="608.0" y="1459.0" width="28.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="611.0" y="1470.0">i..</text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (195 samples, 2.32%)</title><rect x="608.0" y="1443.0" width="27.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="611.0" y="1454.0">i..</text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (195 samples, 2.32%)</title><rect x="608.0" y="1427.0" width="27.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="611.0" y="1438.0">i..</text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (195 samples, 2.32%)</title><rect x="608.0" y="1411.0" width="27.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="611.0" y="1422.0">i..</text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (195 samples, 2.32%)</title><rect x="608.0" y="1395.0" width="27.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="611.0" y="1406.0">i..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (194 samples, 2.31%)</title><rect x="608.1" y="1379.0" width="27.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="611.1" y="1390.0">j..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (192 samples, 2.29%)</title><rect x="608.4" y="1363.0" width="27.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="611.4" y="1374.0">j..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (191 samples, 2.27%)</title><rect x="608.6" y="1347.0" width="26.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="611.6" y="1358.0">j..</text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (186 samples, 2.21%)</title><rect x="609.3" y="1331.0" width="26.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="612.3" y="1342.0">J..</text>
</g>
<g>
<title>JVM_FillInStackTrace (185 samples, 2.20%)</title><rect x="609.4" y="1315.0" width="26.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="612.4" y="1326.0">J..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (4 samples, 0.05%)</title><rect x="609.8" y="1299.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="612.8" y="1310.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (178 samples, 2.12%)</title><rect x="610.4" y="1299.0" width="25.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="613.4" y="1310.0">j..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (6 samples, 0.07%)</title><rect x="610.5" y="1283.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="613.5" y="1294.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.02%)</title><rect x="611.4" y="1283.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="614.4" y="1294.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (4 samples, 0.05%)</title><rect x="611.9" y="1283.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="614.9" y="1294.0"></text>
</g>
<g>
<title>frame::interpreter_frame_bcp() const (4 samples, 0.05%)</title><rect x="612.9" y="1283.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="615.9" y="1294.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (156 samples, 1.86%)</title><rect x="613.5" y="1283.0" width="21.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="616.5" y="1294.0">j..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (3 samples, 0.04%)</title><rect x="625.4" y="1267.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="628.4" y="1278.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (16 samples, 0.19%)</title><rect x="626.0" y="1267.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="629.0" y="1278.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.02%)</title><rect x="626.3" y="1251.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="629.3" y="1262.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (6 samples, 0.07%)</title><rect x="626.6" y="1251.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="629.6" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="627.0" y="1235.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="630.0" y="1246.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="627.0" y="1219.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="630.0" y="1230.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.07%)</title><rect x="627.4" y="1251.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="630.4" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.07%)</title><rect x="627.4" y="1235.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="630.4" y="1246.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.05%)</title><rect x="627.4" y="1219.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="630.4" y="1230.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.02%)</title><rect x="627.7" y="1203.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="630.7" y="1214.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (4 samples, 0.05%)</title><rect x="628.4" y="1267.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="631.4" y="1278.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (3 samples, 0.04%)</title><rect x="628.5" y="1251.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="631.5" y="1262.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (7 samples, 0.08%)</title><rect x="629.1" y="1267.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="632.1" y="1278.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (3 samples, 0.04%)</title><rect x="630.2" y="1267.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="633.2" y="1278.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (34 samples, 0.40%)</title><rect x="630.6" y="1267.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="633.6" y="1278.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (29 samples, 0.35%)</title><rect x="631.3" y="1251.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="634.3" y="1262.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.05%)</title><rect x="632.3" y="1235.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="635.3" y="1246.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (14 samples, 0.17%)</title><rect x="632.9" y="1235.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="635.9" y="1246.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (4 samples, 0.05%)</title><rect x="634.8" y="1235.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="637.8" y="1246.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.setBytes (4 samples, 0.05%)</title><rect x="635.4" y="1443.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.4" y="1454.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.setBytes (4 samples, 0.05%)</title><rect x="635.4" y="1427.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="638.4" y="1438.0"></text>
</g>
<g>
<title>io/netty/buffer/UnsafeByteBufUtil.setBytes (4 samples, 0.05%)</title><rect x="635.4" y="1411.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.4" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.copyMemory (4 samples, 0.05%)</title><rect x="635.4" y="1395.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="638.4" y="1406.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.copyMemory (4 samples, 0.05%)</title><rect x="635.4" y="1379.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.4" y="1390.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (4 samples, 0.05%)</title><rect x="635.4" y="1363.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="638.4" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.05%)</title><rect x="635.4" y="1347.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="638.4" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.05%)</title><rect x="635.4" y="1331.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.4" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (4 samples, 0.05%)</title><rect x="635.4" y="1315.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="638.4" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.04%)</title><rect x="635.5" y="1299.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="638.5" y="1310.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (3 samples, 0.04%)</title><rect x="635.5" y="1283.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.5" y="1294.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpResponseEncoder.encodeInitialLine (287 samples, 3.42%)</title><rect x="636.1" y="1523.0" width="40.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="639.1" y="1534.0">io/..</text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpResponseEncoder.encodeInitialLine (287 samples, 3.42%)</title><rect x="636.1" y="1507.0" width="40.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="639.1" y="1518.0">io/..</text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.writeByte (63 samples, 0.75%)</title><rect x="636.3" y="1491.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="639.3" y="1502.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (60 samples, 0.71%)</title><rect x="636.3" y="1475.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="639.3" y="1486.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (60 samples, 0.71%)</title><rect x="636.3" y="1459.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="639.3" y="1470.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (60 samples, 0.71%)</title><rect x="636.3" y="1443.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="639.3" y="1454.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (60 samples, 0.71%)</title><rect x="636.3" y="1427.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="639.3" y="1438.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (56 samples, 0.67%)</title><rect x="636.8" y="1411.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="639.8" y="1422.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (55 samples, 0.65%)</title><rect x="637.0" y="1395.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="640.0" y="1406.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (55 samples, 0.65%)</title><rect x="637.0" y="1379.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="640.0" y="1390.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (55 samples, 0.65%)</title><rect x="637.0" y="1363.0" width="7.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="640.0" y="1374.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (55 samples, 0.65%)</title><rect x="637.0" y="1347.0" width="7.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="640.0" y="1358.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (54 samples, 0.64%)</title><rect x="637.0" y="1331.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="640.0" y="1342.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (4 samples, 0.05%)</title><rect x="637.1" y="1315.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="640.1" y="1326.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (44 samples, 0.52%)</title><rect x="638.4" y="1315.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="641.4" y="1326.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (3 samples, 0.04%)</title><rect x="641.7" y="1299.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="644.7" y="1310.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (10 samples, 0.12%)</title><rect x="642.2" y="1299.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="645.2" y="1310.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (3 samples, 0.04%)</title><rect x="642.9" y="1283.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="645.9" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="643.0" y="1267.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="646.0" y="1278.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="643.0" y="1251.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="646.0" y="1262.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.02%)</title><rect x="643.3" y="1283.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="646.3" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="643.3" y="1267.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="646.3" y="1278.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (7 samples, 0.08%)</title><rect x="643.6" y="1299.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="646.6" y="1310.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (5 samples, 0.06%)</title><rect x="643.8" y="1283.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="646.8" y="1294.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.writeByte (3 samples, 0.04%)</title><rect x="644.7" y="1475.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="647.7" y="1486.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeByte (2 samples, 0.02%)</title><rect x="644.8" y="1459.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="647.8" y="1470.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureWritable0 (2 samples, 0.02%)</title><rect x="644.8" y="1443.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="647.8" y="1454.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.ensureAccessible (2 samples, 0.02%)</title><rect x="644.8" y="1427.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="647.8" y="1438.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.isAccessible (2 samples, 0.02%)</title><rect x="644.8" y="1411.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.8" y="1422.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.isLiveNonVolatile (2 samples, 0.02%)</title><rect x="644.8" y="1395.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="647.8" y="1406.0"></text>
</g>
<g>
<title>io/netty/buffer/ByteBufUtil.writeShortBE (64 samples, 0.76%)</title><rect x="645.2" y="1491.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="648.2" y="1502.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.writeShort (63 samples, 0.75%)</title><rect x="645.2" y="1475.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="648.2" y="1486.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (62 samples, 0.74%)</title><rect x="645.2" y="1459.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="648.2" y="1470.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (62 samples, 0.74%)</title><rect x="645.2" y="1443.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="648.2" y="1454.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (62 samples, 0.74%)</title><rect x="645.2" y="1427.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="648.2" y="1438.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (62 samples, 0.74%)</title><rect x="645.2" y="1411.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="648.2" y="1422.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (61 samples, 0.73%)</title><rect x="645.4" y="1395.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="648.4" y="1406.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (61 samples, 0.73%)</title><rect x="645.4" y="1379.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="648.4" y="1390.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (61 samples, 0.73%)</title><rect x="645.4" y="1363.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="648.4" y="1374.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (60 samples, 0.71%)</title><rect x="645.5" y="1347.0" width="8.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="648.5" y="1358.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (60 samples, 0.71%)</title><rect x="645.5" y="1331.0" width="8.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="648.5" y="1342.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.02%)</title><rect x="645.5" y="1315.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="648.5" y="1326.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (57 samples, 0.68%)</title><rect x="645.9" y="1315.0" width="8.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="648.9" y="1326.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.02%)</title><rect x="646.1" y="1299.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="649.1" y="1310.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (3 samples, 0.04%)</title><rect x="646.4" y="1299.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="649.4" y="1310.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (47 samples, 0.56%)</title><rect x="647.4" y="1299.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="650.4" y="1310.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (7 samples, 0.08%)</title><rect x="650.4" y="1283.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="653.4" y="1294.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (2 samples, 0.02%)</title><rect x="650.6" y="1267.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="653.6" y="1278.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.05%)</title><rect x="650.9" y="1267.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="653.9" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.05%)</title><rect x="650.9" y="1251.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="653.9" y="1262.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.05%)</title><rect x="650.9" y="1235.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="653.9" y="1246.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (17 samples, 0.20%)</title><rect x="651.6" y="1283.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="654.6" y="1294.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (14 samples, 0.17%)</title><rect x="652.0" y="1267.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="655.0" y="1278.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="652.6" y="1251.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="655.6" y="1262.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (6 samples, 0.07%)</title><rect x="652.8" y="1251.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="655.8" y="1262.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.02%)</title><rect x="653.7" y="1251.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="656.7" y="1262.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpResponseStatus.encode (69 samples, 0.82%)</title><rect x="654.4" y="1491.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="657.4" y="1502.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.writeBytes (69 samples, 0.82%)</title><rect x="654.4" y="1475.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="657.4" y="1486.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (67 samples, 0.80%)</title><rect x="654.4" y="1459.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="657.4" y="1470.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (67 samples, 0.80%)</title><rect x="654.4" y="1443.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="657.4" y="1454.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (67 samples, 0.80%)</title><rect x="654.4" y="1427.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="657.4" y="1438.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (67 samples, 0.80%)</title><rect x="654.4" y="1411.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="657.4" y="1422.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (65 samples, 0.77%)</title><rect x="654.7" y="1395.0" width="9.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="657.7" y="1406.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (63 samples, 0.75%)</title><rect x="654.9" y="1379.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="657.9" y="1390.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (63 samples, 0.75%)</title><rect x="654.9" y="1363.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="657.9" y="1374.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (62 samples, 0.74%)</title><rect x="655.1" y="1347.0" width="8.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="658.1" y="1358.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (62 samples, 0.74%)</title><rect x="655.1" y="1331.0" width="8.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="658.1" y="1342.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (60 samples, 0.71%)</title><rect x="655.4" y="1315.0" width="8.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="658.4" y="1326.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.02%)</title><rect x="655.4" y="1299.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="658.4" y="1310.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (52 samples, 0.62%)</title><rect x="656.2" y="1299.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="659.2" y="1310.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (6 samples, 0.07%)</title><rect x="660.1" y="1283.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="663.1" y="1294.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (2 samples, 0.02%)</title><rect x="660.1" y="1267.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="663.1" y="1278.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.04%)</title><rect x="660.6" y="1267.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="663.6" y="1278.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.02%)</title><rect x="661.0" y="1283.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="664.0" y="1294.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (14 samples, 0.17%)</title><rect x="661.5" y="1283.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="664.5" y="1294.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (10 samples, 0.12%)</title><rect x="662.1" y="1267.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="665.1" y="1278.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (7 samples, 0.08%)</title><rect x="662.4" y="1251.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="665.4" y="1262.0"></text>
</g>
<g>
<title>oopDesc::release_obj_field_put(int, oopDesc*) (2 samples, 0.02%)</title><rect x="663.5" y="1299.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="666.5" y="1310.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.writeBytes (2 samples, 0.02%)</title><rect x="663.8" y="1459.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="666.8" y="1470.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (2 samples, 0.02%)</title><rect x="663.8" y="1443.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.8" y="1454.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (2 samples, 0.02%)</title><rect x="663.8" y="1427.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="666.8" y="1438.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpVersion.encode (88 samples, 1.05%)</title><rect x="664.1" y="1491.0" width="12.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="667.1" y="1502.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.writeBytes (87 samples, 1.04%)</title><rect x="664.2" y="1475.0" width="12.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="667.2" y="1486.0"></text>
</g>
<g>
<title>io/netty/buffer/AdvancedLeakAwareByteBuf.recordLeakNonRefCountingOperation (82 samples, 0.98%)</title><rect x="664.2" y="1459.0" width="11.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="667.2" y="1470.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record (82 samples, 0.98%)</title><rect x="664.2" y="1443.0" width="11.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="667.2" y="1454.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$DefaultResourceLeak.record0 (82 samples, 0.98%)</title><rect x="664.2" y="1427.0" width="11.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="667.2" y="1438.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector$TraceRecord.&lt;init&gt; (82 samples, 0.98%)</title><rect x="664.2" y="1411.0" width="11.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="667.2" y="1422.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (80 samples, 0.95%)</title><rect x="664.5" y="1395.0" width="11.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="667.5" y="1406.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (76 samples, 0.90%)</title><rect x="665.1" y="1379.0" width="10.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="668.1" y="1390.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (76 samples, 0.90%)</title><rect x="665.1" y="1363.0" width="10.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="668.1" y="1374.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (76 samples, 0.90%)</title><rect x="665.1" y="1347.0" width="10.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="668.1" y="1358.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (76 samples, 0.90%)</title><rect x="665.1" y="1331.0" width="10.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="668.1" y="1342.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.02%)</title><rect x="665.3" y="1315.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="668.3" y="1326.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (71 samples, 0.85%)</title><rect x="665.8" y="1315.0" width="9.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="668.8" y="1326.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.04%)</title><rect x="665.8" y="1299.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="668.8" y="1310.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (2 samples, 0.02%)</title><rect x="666.5" y="1299.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="669.5" y="1310.0"></text>
</g>
<g>
<title>Method::bcp_from(unsigned char*) const (2 samples, 0.02%)</title><rect x="666.7" y="1299.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="669.7" y="1310.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (58 samples, 0.69%)</title><rect x="667.6" y="1299.0" width="8.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="670.6" y="1310.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (6 samples, 0.07%)</title><rect x="671.2" y="1283.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="674.2" y="1294.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (2 samples, 0.02%)</title><rect x="671.4" y="1267.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="674.4" y="1278.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.04%)</title><rect x="671.7" y="1267.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="674.7" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="671.8" y="1251.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="674.8" y="1262.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="671.8" y="1235.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="674.8" y="1246.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.04%)</title><rect x="672.1" y="1283.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="675.1" y="1294.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (4 samples, 0.05%)</title><rect x="672.6" y="1283.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="675.6" y="1294.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (16 samples, 0.19%)</title><rect x="673.3" y="1283.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="676.3" y="1294.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (10 samples, 0.12%)</title><rect x="674.2" y="1267.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="677.2" y="1278.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="674.5" y="1251.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="677.5" y="1262.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.05%)</title><rect x="674.8" y="1251.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="677.8" y="1262.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.02%)</title><rect x="675.3" y="1251.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="678.3" y="1262.0"></text>
</g>
<g>
<title>io/netty/buffer/WrappedByteBuf.writeBytes (5 samples, 0.06%)</title><rect x="675.7" y="1459.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="678.7" y="1470.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (5 samples, 0.06%)</title><rect x="675.7" y="1443.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="678.7" y="1454.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (5 samples, 0.06%)</title><rect x="675.7" y="1427.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="678.7" y="1438.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.setBytes (5 samples, 0.06%)</title><rect x="675.7" y="1411.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="678.7" y="1422.0"></text>
</g>
<g>
<title>io/netty/buffer/UnsafeByteBufUtil.setBytes (5 samples, 0.06%)</title><rect x="675.7" y="1395.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="678.7" y="1406.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.checkIndex (2 samples, 0.02%)</title><rect x="675.7" y="1379.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="678.7" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent.copyMemory (3 samples, 0.04%)</title><rect x="676.0" y="1379.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="679.0" y="1390.0"></text>
</g>
<g>
<title>io/netty/util/internal/PlatformDependent0.copyMemory (3 samples, 0.04%)</title><rect x="676.0" y="1363.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="679.0" y="1374.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (3 samples, 0.04%)</title><rect x="676.0" y="1347.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="679.0" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.04%)</title><rect x="676.0" y="1331.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="679.0" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.04%)</title><rect x="676.0" y="1315.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="679.0" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.04%)</title><rect x="676.0" y="1299.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="679.0" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.04%)</title><rect x="676.0" y="1283.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="679.0" y="1294.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (3 samples, 0.04%)</title><rect x="676.0" y="1267.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="679.0" y="1278.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpServerCodec$HttpServerResponseEncoder.isContentAlwaysEmpty (5 samples, 0.06%)</title><rect x="676.4" y="1523.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="679.4" y="1534.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpServerCodec$HttpServerResponseEncoder.isContentAlwaysEmpty (5 samples, 0.06%)</title><rect x="676.4" y="1507.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="679.4" y="1518.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpResponseEncoder.isContentAlwaysEmpty (4 samples, 0.05%)</title><rect x="676.6" y="1491.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="679.6" y="1502.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpResponseStatus.code (2 samples, 0.02%)</title><rect x="676.9" y="1475.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="679.9" y="1486.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpServerCodec$HttpServerResponseEncoder.sanitizeHeadersBeforeEncode (4 samples, 0.05%)</title><rect x="677.1" y="1523.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="680.1" y="1534.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpServerCodec$HttpServerResponseEncoder.sanitizeHeadersBeforeEncode (2 samples, 0.02%)</title><rect x="677.4" y="1507.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="680.4" y="1518.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpUtil.isTransferEncodingChunked (3 samples, 0.04%)</title><rect x="677.7" y="1523.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="680.7" y="1534.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpHeaders.containsValue (2 samples, 0.02%)</title><rect x="677.8" y="1507.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="680.8" y="1518.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.valueCharSequenceIterator (2 samples, 0.02%)</title><rect x="677.8" y="1491.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="680.8" y="1502.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpResponseEncoder.acceptOutboundMessage (3 samples, 0.04%)</title><rect x="678.1" y="1539.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="681.1" y="1550.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpObjectEncoder.acceptOutboundMessage (2 samples, 0.02%)</title><rect x="678.3" y="1523.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="681.3" y="1534.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.release (3 samples, 0.04%)</title><rect x="678.5" y="1539.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="681.5" y="1550.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultFullHttpResponse.release (2 samples, 0.02%)</title><rect x="678.5" y="1523.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="681.5" y="1534.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (2 samples, 0.02%)</title><rect x="678.5" y="1507.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="681.5" y="1518.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.release (2 samples, 0.02%)</title><rect x="678.5" y="1491.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="681.5" y="1502.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.tryFinalRelease0 (2 samples, 0.02%)</title><rect x="678.5" y="1475.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="681.5" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet (2 samples, 0.02%)</title><rect x="678.5" y="1459.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="681.5" y="1470.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (6 samples, 0.07%)</title><rect x="679.4" y="1683.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="682.4" y="1694.0"></text>
</g>
<g>
<title>io/netty/handler/stream/ChunkedWriteHandler.write (5 samples, 0.06%)</title><rect x="679.5" y="1667.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="682.5" y="1678.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.add (2 samples, 0.02%)</title><rect x="679.9" y="1651.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="682.9" y="1662.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.addLast (2 samples, 0.02%)</title><rect x="679.9" y="1635.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="682.9" y="1646.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.pollTask (9 samples, 0.11%)</title><rect x="680.2" y="1731.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="683.2" y="1742.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.pollTaskFrom (8 samples, 0.10%)</title><rect x="680.4" y="1715.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="683.4" y="1726.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscUnboundedArrayQueue.poll (6 samples, 0.07%)</title><rect x="680.7" y="1699.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="683.7" y="1710.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/BaseMpscLinkedArrayQueue.poll (4 samples, 0.05%)</title><rect x="680.9" y="1683.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="683.9" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,610 samples, 19.17%)</title><rect x="681.8" y="1811.0" width="226.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="684.8" y="1822.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,610 samples, 19.17%)</title><rect x="681.8" y="1795.0" width="226.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="684.8" y="1806.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.04%)</title><rect x="681.9" y="1779.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="684.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.04%)</title><rect x="681.9" y="1763.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="684.9" y="1774.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (3 samples, 0.04%)</title><rect x="681.9" y="1747.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="684.9" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.02%)</title><rect x="681.9" y="1731.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="684.9" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (495 samples, 5.89%)</title><rect x="682.3" y="1779.0" width="69.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="685.3" y="1790.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (342 samples, 4.07%)</title><rect x="683.0" y="1763.0" width="48.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="686.0" y="1774.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (319 samples, 3.80%)</title><rect x="683.2" y="1747.0" width="44.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="686.2" y="1758.0">java..</text>
</g>
<g>
<title>itable stub (3 samples, 0.04%)</title><rect x="683.6" y="1731.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="686.6" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.02%)</title><rect x="684.0" y="1731.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="687.0" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (2 samples, 0.02%)</title><rect x="684.0" y="1715.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="687.0" y="1726.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$121/254088096.apply (311 samples, 3.70%)</title><rect x="684.3" y="1731.0" width="43.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="687.3" y="1742.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$2 (311 samples, 3.70%)</title><rect x="684.3" y="1715.0" width="43.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="687.3" y="1726.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsyncImpl (311 samples, 3.70%)</title><rect x="684.3" y="1699.0" width="43.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="687.3" y="1710.0">jdk/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.02%)</title><rect x="684.4" y="1683.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="687.4" y="1694.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.02%)</title><rect x="684.4" y="1667.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="687.4" y="1678.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$216/356642770.get$Lambda (2 samples, 0.02%)</title><rect x="684.4" y="1651.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="687.4" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (2 samples, 0.02%)</title><rect x="684.7" y="1683.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="687.7" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (2 samples, 0.02%)</title><rect x="685.0" y="1683.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="688.0" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (2 samples, 0.02%)</title><rect x="685.0" y="1667.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="688.0" y="1678.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (2 samples, 0.02%)</title><rect x="685.0" y="1651.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="688.0" y="1662.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (2 samples, 0.02%)</title><rect x="685.0" y="1635.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="688.0" y="1646.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsync (296 samples, 3.52%)</title><rect x="685.3" y="1683.0" width="41.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="688.3" y="1694.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsyncImpl (296 samples, 3.52%)</title><rect x="685.3" y="1667.0" width="41.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="688.3" y="1678.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsyncImpl0 (295 samples, 3.51%)</title><rect x="685.4" y="1651.0" width="41.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="688.4" y="1662.0">jdk..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.05%)</title><rect x="685.6" y="1635.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="688.6" y="1646.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.05%)</title><rect x="685.6" y="1619.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="688.6" y="1630.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$138/2027683497.get$Lambda (2 samples, 0.02%)</title><rect x="685.7" y="1603.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="688.7" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (156 samples, 1.86%)</title><rect x="686.1" y="1635.0" width="22.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="689.1" y="1646.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (156 samples, 1.86%)</title><rect x="686.1" y="1619.0" width="22.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="689.1" y="1630.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.&lt;init&gt; (4 samples, 0.05%)</title><rect x="686.1" y="1603.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="689.1" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.&lt;init&gt; (4 samples, 0.05%)</title><rect x="686.1" y="1587.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="689.1" y="1598.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.02%)</title><rect x="686.4" y="1571.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="689.4" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (152 samples, 1.81%)</title><rect x="686.7" y="1603.0" width="21.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="689.7" y="1614.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$193/779927484.apply (152 samples, 1.81%)</title><rect x="686.7" y="1587.0" width="21.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="689.7" y="1598.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$9 (152 samples, 1.81%)</title><rect x="686.7" y="1571.0" width="21.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="689.7" y="1582.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (152 samples, 1.81%)</title><rect x="686.7" y="1555.0" width="21.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="689.7" y="1566.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$138/2027683497.apply (149 samples, 1.77%)</title><rect x="687.1" y="1539.0" width="21.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="690.1" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$8 (149 samples, 1.77%)</title><rect x="687.1" y="1523.0" width="21.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="690.1" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (3 samples, 0.04%)</title><rect x="687.1" y="1507.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="690.1" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (3 samples, 0.04%)</title><rect x="687.1" y="1491.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="690.1" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (2 samples, 0.02%)</title><rect x="687.3" y="1475.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="690.3" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (2 samples, 0.02%)</title><rect x="687.3" y="1459.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="690.3" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendHeadersAsync (146 samples, 1.74%)</title><rect x="687.5" y="1507.0" width="20.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="690.5" y="1518.0"></text>
</g>
<g>
<title>java/util/LinkedList.add (3 samples, 0.04%)</title><rect x="687.7" y="1491.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="690.7" y="1502.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkLast (3 samples, 0.04%)</title><rect x="687.7" y="1475.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="690.7" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.02%)</title><rect x="688.1" y="1491.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="691.1" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (2 samples, 0.02%)</title><rect x="688.1" y="1475.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="691.1" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (117 samples, 1.39%)</title><rect x="688.4" y="1491.0" width="16.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="691.4" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (117 samples, 1.39%)</title><rect x="688.4" y="1475.0" width="16.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="691.4" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$208/143821675.apply (112 samples, 1.33%)</title><rect x="688.5" y="1459.0" width="15.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="691.5" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.lambda$sendHeadersAsync$4 (111 samples, 1.32%)</title><rect x="688.7" y="1443.0" width="15.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="691.7" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (2 samples, 0.02%)</title><rect x="689.6" y="1427.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="692.6" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (2 samples, 0.02%)</title><rect x="689.6" y="1411.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="692.6" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.02%)</title><rect x="689.6" y="1395.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="692.6" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.02%)</title><rect x="689.6" y="1379.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="692.6" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (2 samples, 0.02%)</title><rect x="689.6" y="1363.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="692.6" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (2 samples, 0.02%)</title><rect x="689.6" y="1347.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="692.6" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.connectFlows (17 samples, 0.20%)</title><rect x="689.9" y="1427.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="692.9" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.connectFlows (17 samples, 0.20%)</title><rect x="689.9" y="1411.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="692.9" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher.subscribe (11 samples, 0.13%)</title><rect x="689.9" y="1395.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="692.9" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (10 samples, 0.12%)</title><rect x="690.1" y="1379.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="693.1" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onSubscribe (10 samples, 0.12%)</title><rect x="690.1" y="1363.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="693.1" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (3 samples, 0.04%)</title><rect x="690.3" y="1347.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="693.3" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (3 samples, 0.04%)</title><rect x="690.3" y="1331.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="693.3" y="1342.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (2 samples, 0.02%)</title><rect x="690.5" y="1315.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="693.5" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (2 samples, 0.02%)</title><rect x="690.5" y="1299.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="693.5" y="1310.0"></text>
</g>
<g>
<title>__write (2 samples, 0.02%)</title><rect x="690.5" y="1283.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="693.5" y="1294.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="690.5" y="1267.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="693.5" y="1278.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="690.5" y="1251.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="693.5" y="1262.0"></text>
</g>
<g>
<title>__x64_sys_write (2 samples, 0.02%)</title><rect x="690.5" y="1235.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="693.5" y="1246.0"></text>
</g>
<g>
<title>ksys_write (2 samples, 0.02%)</title><rect x="690.5" y="1219.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="693.5" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.dropSubscription (5 samples, 0.06%)</title><rect x="690.8" y="1347.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="693.8" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.subscribe (6 samples, 0.07%)</title><rect x="691.5" y="1395.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="694.5" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher.subscribe (6 samples, 0.07%)</title><rect x="691.5" y="1379.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="694.5" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalSubscribe (3 samples, 0.04%)</title><rect x="691.6" y="1363.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="694.6" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (3 samples, 0.04%)</title><rect x="691.6" y="1347.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.6" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (3 samples, 0.04%)</title><rect x="691.6" y="1331.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="694.6" y="1342.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (2 samples, 0.02%)</title><rect x="691.8" y="1315.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="694.8" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.&lt;init&gt; (2 samples, 0.02%)</title><rect x="692.0" y="1363.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="695.0" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.headers (85 samples, 1.01%)</title><rect x="692.3" y="1427.0" width="12.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="695.3" y="1438.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.05%)</title><rect x="692.5" y="1411.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="695.5" y="1422.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.05%)</title><rect x="692.5" y="1395.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="695.5" y="1406.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (2 samples, 0.02%)</title><rect x="692.7" y="1379.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="695.7" y="1390.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="692.7" y="1363.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="695.7" y="1374.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (4 samples, 0.05%)</title><rect x="693.0" y="1411.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="696.0" y="1422.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.04%)</title><rect x="693.2" y="1395.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="696.2" y="1406.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.04%)</title><rect x="693.2" y="1379.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="696.2" y="1390.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="693.6" y="1411.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="696.6" y="1422.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.02%)</title><rect x="693.6" y="1395.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="696.6" y="1406.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="693.6" y="1379.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="696.6" y="1390.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="693.6" y="1363.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="696.6" y="1374.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="693.6" y="1347.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="696.6" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectHeaders0 (41 samples, 0.49%)</title><rect x="694.0" y="1411.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="697.0" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectCookies (8 samples, 0.10%)</title><rect x="694.1" y="1395.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="697.1" y="1406.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (5 samples, 0.06%)</title><rect x="694.4" y="1379.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="697.4" y="1390.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.04%)</title><rect x="694.6" y="1363.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="697.6" y="1374.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (3 samples, 0.04%)</title><rect x="694.6" y="1347.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="697.6" y="1358.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (3 samples, 0.04%)</title><rect x="694.6" y="1331.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="697.6" y="1342.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (3 samples, 0.04%)</title><rect x="694.6" y="1315.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="697.6" y="1326.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (3 samples, 0.04%)</title><rect x="694.6" y="1299.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="697.6" y="1310.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (3 samples, 0.04%)</title><rect x="694.6" y="1283.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="697.6" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectHeaders1 (16 samples, 0.19%)</title><rect x="695.3" y="1395.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="698.3" y="1406.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.04%)</title><rect x="695.4" y="1379.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="698.4" y="1390.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.04%)</title><rect x="695.4" y="1363.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.4" y="1374.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.isLatin1 (2 samples, 0.02%)</title><rect x="695.5" y="1347.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="698.5" y="1358.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate$$Lambda$230/1915087157.test (8 samples, 0.10%)</title><rect x="696.4" y="1379.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="699.4" y="1390.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate.lambda$and$0 (5 samples, 0.06%)</title><rect x="696.8" y="1363.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="699.8" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$$Lambda$184/1066467166.test (2 samples, 0.02%)</title><rect x="696.8" y="1347.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="699.8" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.lambda$static$0 (2 samples, 0.02%)</title><rect x="696.8" y="1331.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="699.8" y="1342.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.02%)</title><rect x="696.8" y="1315.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="699.8" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.02%)</title><rect x="696.8" y="1299.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="699.8" y="1310.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.02%)</title><rect x="696.8" y="1283.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="699.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.02%)</title><rect x="696.8" y="1267.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="699.8" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$42/998351292.test (3 samples, 0.04%)</title><rect x="697.1" y="1347.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="700.1" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$10 (3 samples, 0.04%)</title><rect x="697.1" y="1331.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="700.1" y="1342.0"></text>
</g>
<g>
<title>java/util/function/Predicate$$Lambda$31/2052915500.test (3 samples, 0.04%)</title><rect x="697.1" y="1315.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="700.1" y="1326.0"></text>
</g>
<g>
<title>java/util/function/Predicate.lambda$negate$1 (3 samples, 0.04%)</title><rect x="697.1" y="1299.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="700.1" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$30/1720435669.test (3 samples, 0.04%)</title><rect x="697.1" y="1283.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="700.1" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$3 (3 samples, 0.04%)</title><rect x="697.1" y="1267.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="700.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.02%)</title><rect x="697.1" y="1251.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="700.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.02%)</title><rect x="697.1" y="1235.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="700.1" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.build (15 samples, 0.18%)</title><rect x="697.7" y="1395.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="700.7" y="1406.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (15 samples, 0.18%)</title><rect x="697.7" y="1379.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="700.7" y="1390.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (15 samples, 0.18%)</title><rect x="697.7" y="1363.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="700.7" y="1374.0"></text>
</g>
<g>
<title>java/util/TreeMap.&lt;init&gt; (2 samples, 0.02%)</title><rect x="697.7" y="1347.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="700.7" y="1358.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (13 samples, 0.15%)</title><rect x="697.9" y="1347.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="700.9" y="1358.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$106/848120636.accept (13 samples, 0.15%)</title><rect x="697.9" y="1331.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="700.9" y="1342.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (13 samples, 0.15%)</title><rect x="697.9" y="1315.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="700.9" y="1326.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (3 samples, 0.04%)</title><rect x="698.4" y="1299.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="701.4" y="1310.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$107/1814310740.accept (3 samples, 0.04%)</title><rect x="698.4" y="1283.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="701.4" y="1294.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (3 samples, 0.04%)</title><rect x="698.4" y="1267.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="701.4" y="1278.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.02%)</title><rect x="698.4" y="1251.0" width="0.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="701.4" y="1262.0"></text>
</g>
<g>
<title>java/util/List.copyOf (3 samples, 0.04%)</title><rect x="698.8" y="1299.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="701.8" y="1310.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections.listCopy (3 samples, 0.04%)</title><rect x="698.8" y="1283.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="701.8" y="1294.0"></text>
</g>
<g>
<title>java/util/List.of (2 samples, 0.02%)</title><rect x="698.9" y="1267.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="701.9" y="1278.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (4 samples, 0.05%)</title><rect x="699.2" y="1299.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="702.2" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.hostString (16 samples, 0.19%)</title><rect x="699.8" y="1411.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="702.8" y="1422.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (15 samples, 0.18%)</title><rect x="699.9" y="1395.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="702.9" y="1406.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (15 samples, 0.18%)</title><rect x="699.9" y="1379.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="702.9" y="1390.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453041767.invoke (15 samples, 0.18%)</title><rect x="699.9" y="1363.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="702.9" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (10 samples, 0.12%)</title><rect x="699.9" y="1347.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="702.9" y="1358.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixCoder (4 samples, 0.05%)</title><rect x="700.0" y="1331.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="703.0" y="1342.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (2 samples, 0.02%)</title><rect x="700.6" y="1331.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="703.6" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (2 samples, 0.02%)</title><rect x="701.0" y="1331.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="704.0" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1072591677.invoke (5 samples, 0.06%)</title><rect x="701.3" y="1347.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="704.3" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (5 samples, 0.06%)</title><rect x="701.3" y="1331.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="704.3" y="1342.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (5 samples, 0.06%)</title><rect x="701.3" y="1315.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="704.3" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.05%)</title><rect x="701.4" y="1299.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="704.4" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.requestURI (9 samples, 0.11%)</title><rect x="702.2" y="1411.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="705.2" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.getPathAndQuery (8 samples, 0.10%)</title><rect x="702.3" y="1395.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="705.3" y="1406.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (6 samples, 0.07%)</title><rect x="702.6" y="1379.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="705.6" y="1390.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (6 samples, 0.07%)</title><rect x="702.6" y="1363.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="705.6" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453041767.invoke (6 samples, 0.07%)</title><rect x="702.6" y="1347.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="705.6" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.05%)</title><rect x="702.6" y="1331.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="705.6" y="1342.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.02%)</title><rect x="702.6" y="1315.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="705.6" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.toString (2 samples, 0.02%)</title><rect x="702.6" y="1299.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="705.6" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (2 samples, 0.02%)</title><rect x="702.9" y="1315.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="705.9" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (2 samples, 0.02%)</title><rect x="702.9" y="1299.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="705.9" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1072591677.invoke (2 samples, 0.02%)</title><rect x="703.1" y="1331.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="706.1" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.02%)</title><rect x="703.1" y="1315.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="706.1" y="1326.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.02%)</title><rect x="703.1" y="1299.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="706.1" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.setHeader (6 samples, 0.07%)</title><rect x="703.4" y="1411.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="706.4" y="1422.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (4 samples, 0.05%)</title><rect x="703.7" y="1395.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="706.7" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$209/274104634.apply (3 samples, 0.04%)</title><rect x="704.3" y="1459.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="707.3" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.&lt;init&gt; (21 samples, 0.25%)</title><rect x="704.8" y="1491.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="707.8" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.subscribe (11 samples, 0.13%)</title><rect x="705.1" y="1475.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="708.1" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (9 samples, 0.11%)</title><rect x="705.4" y="1459.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="708.4" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (9 samples, 0.11%)</title><rect x="705.4" y="1443.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="708.4" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (9 samples, 0.11%)</title><rect x="705.4" y="1427.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="708.4" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (9 samples, 0.11%)</title><rect x="705.4" y="1411.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="708.4" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (7 samples, 0.08%)</title><rect x="705.4" y="1395.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="708.4" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$189/2011462796.run (7 samples, 0.08%)</title><rect x="705.4" y="1379.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="708.4" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (7 samples, 0.08%)</title><rect x="705.4" y="1363.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="708.4" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (5 samples, 0.06%)</title><rect x="705.7" y="1347.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="708.7" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onSubscribe (3 samples, 0.04%)</title><rect x="705.9" y="1331.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="708.9" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.onSubscribe (3 samples, 0.04%)</title><rect x="705.9" y="1315.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="708.9" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$247/1389791625.run (2 samples, 0.02%)</title><rect x="705.9" y="1299.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="708.9" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.onFinished (2 samples, 0.02%)</title><rect x="705.9" y="1283.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="708.9" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (2 samples, 0.02%)</title><rect x="706.4" y="1395.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="709.4" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.getDebugLogger (6 samples, 0.07%)</title><rect x="706.9" y="1475.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="709.9" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.getDebugLogger (6 samples, 0.07%)</title><rect x="706.9" y="1459.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="709.9" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/DebugLogger.createHttpLogger (6 samples, 0.07%)</title><rect x="706.9" y="1443.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="709.9" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/DebugLogger.levelEnabledFor (6 samples, 0.07%)</title><rect x="706.9" y="1427.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="709.9" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/logger/AbstractLoggerWrapper.isLoggable (6 samples, 0.07%)</title><rect x="706.9" y="1411.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.9" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/logger/SimpleConsoleLogger.isLoggable (6 samples, 0.07%)</title><rect x="706.9" y="1395.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="709.9" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/logger/SimpleConsoleLogger.isLoggable (6 samples, 0.07%)</title><rect x="706.9" y="1379.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="709.9" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/logger/SimpleConsoleLogger.effectiveLevel (4 samples, 0.05%)</title><rect x="707.2" y="1363.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="710.2" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection.connectAsync (2 samples, 0.02%)</title><rect x="707.8" y="1491.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="710.8" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (2 samples, 0.02%)</title><rect x="708.1" y="1635.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="711.1" y="1646.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.establishExchange (131 samples, 1.56%)</title><rect x="708.3" y="1635.0" width="18.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="711.3" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (5 samples, 0.06%)</title><rect x="708.6" y="1619.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="711.6" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (5 samples, 0.06%)</title><rect x="708.6" y="1603.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="711.6" y="1614.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$192/750649321.apply (2 samples, 0.02%)</title><rect x="708.8" y="1587.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="711.8" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$establishExchange$2 (2 samples, 0.02%)</title><rect x="708.8" y="1571.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="711.8" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (2 samples, 0.02%)</title><rect x="709.0" y="1587.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="712.0" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (2 samples, 0.02%)</title><rect x="709.0" y="1571.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="712.0" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.04%)</title><rect x="709.3" y="1619.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="712.3" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.02%)</title><rect x="709.5" y="1603.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="712.5" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.02%)</title><rect x="709.5" y="1587.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="712.5" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$191/1863337909.accept (2 samples, 0.02%)</title><rect x="709.5" y="1571.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="712.5" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.getCancelCause (3 samples, 0.04%)</title><rect x="709.7" y="1619.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="712.7" y="1630.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.get (118 samples, 1.41%)</title><rect x="710.2" y="1619.0" width="16.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="713.2" y="1630.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.createHttp1Exchange (116 samples, 1.38%)</title><rect x="710.3" y="1603.0" width="16.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="713.3" y="1614.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.&lt;init&gt; (115 samples, 1.37%)</title><rect x="710.3" y="1587.0" width="16.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="713.3" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.&lt;init&gt; (2 samples, 0.02%)</title><rect x="710.7" y="1571.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="713.7" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.&lt;init&gt; (10 samples, 0.12%)</title><rect x="711.0" y="1571.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="714.0" y="1582.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.02%)</title><rect x="711.3" y="1555.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="714.3" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.&lt;init&gt; (2 samples, 0.02%)</title><rect x="711.6" y="1555.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="714.6" y="1566.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.synchronizedScheduler (3 samples, 0.04%)</title><rect x="712.0" y="1555.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="715.0" y="1566.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.&lt;init&gt; (2 samples, 0.02%)</title><rect x="712.1" y="1539.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="715.1" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher.&lt;init&gt; (7 samples, 0.08%)</title><rect x="712.4" y="1571.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="715.4" y="1582.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.04%)</title><rect x="712.4" y="1555.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="715.4" y="1566.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.04%)</title><rect x="712.4" y="1539.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="715.4" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$$Lambda$151/958933358.get$Lambda (3 samples, 0.04%)</title><rect x="712.4" y="1523.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="715.4" y="1534.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.&lt;init&gt; (3 samples, 0.04%)</title><rect x="713.4" y="1571.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="716.4" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.getConnection (37 samples, 0.44%)</title><rect x="713.8" y="1571.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="716.8" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.getConnection (29 samples, 0.35%)</title><rect x="714.0" y="1555.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="717.0" y="1566.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (3 samples, 0.04%)</title><rect x="714.2" y="1539.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="717.2" y="1550.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.02%)</title><rect x="714.2" y="1523.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="717.2" y="1534.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.&lt;init&gt; (5 samples, 0.06%)</title><rect x="714.7" y="1539.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="717.7" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.findConnection (19 samples, 0.23%)</title><rect x="715.4" y="1539.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="718.4" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.remove (13 samples, 0.15%)</title><rect x="716.2" y="1523.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="719.2" y="1534.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.next (11 samples, 0.13%)</title><rect x="716.5" y="1507.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="719.5" y="1518.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.isOpen (5 samples, 0.06%)</title><rect x="718.2" y="1555.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="721.2" y="1566.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.isFinished (2 samples, 0.02%)</title><rect x="718.6" y="1539.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="721.6" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.getAddress (51 samples, 0.61%)</title><rect x="719.0" y="1571.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="722.0" y="1582.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1449621165.linkToTargetMethod (2 samples, 0.02%)</title><rect x="719.2" y="1555.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="722.2" y="1566.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.02%)</title><rect x="719.2" y="1539.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="722.2" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl$$Lambda$156/1440730131.get$Lambda (2 samples, 0.02%)</title><rect x="719.2" y="1523.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="722.2" y="1534.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (48 samples, 0.57%)</title><rect x="719.4" y="1555.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="722.4" y="1566.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (2 samples, 0.02%)</title><rect x="719.6" y="1539.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="722.6" y="1550.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (15 samples, 0.18%)</title><rect x="719.9" y="1539.0" width="2.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="722.9" y="1550.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.04%)</title><rect x="720.0" y="1523.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="723.0" y="1534.0"></text>
</g>
<g>
<title>vframeStream::vframeStream(JavaThread*, bool) (3 samples, 0.04%)</title><rect x="720.8" y="1523.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="723.8" y="1534.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (3 samples, 0.04%)</title><rect x="720.8" y="1507.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="723.8" y="1518.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="721.0" y="1491.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="724.0" y="1502.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (5 samples, 0.06%)</title><rect x="721.3" y="1523.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="724.3" y="1534.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl$$Lambda$156/1440730131.run (28 samples, 0.33%)</title><rect x="722.1" y="1539.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="725.1" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.lambda$getAddress$5 (25 samples, 0.30%)</title><rect x="722.5" y="1523.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="725.5" y="1534.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.&lt;init&gt; (25 samples, 0.30%)</title><rect x="722.5" y="1507.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="725.5" y="1518.0"></text>
</g>
<g>
<title>java/net/InetAddress.getByName (24 samples, 0.29%)</title><rect x="722.5" y="1491.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="725.5" y="1502.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName (23 samples, 0.27%)</title><rect x="722.7" y="1475.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="725.7" y="1486.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName (22 samples, 0.26%)</title><rect x="722.8" y="1459.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="725.8" y="1470.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.02%)</title><rect x="722.8" y="1443.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="725.8" y="1454.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.02%)</title><rect x="722.8" y="1427.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="725.8" y="1438.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName0 (20 samples, 0.24%)</title><rect x="723.1" y="1443.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="726.1" y="1454.0"></text>
</g>
<g>
<title>java/lang/Object.clone (7 samples, 0.08%)</title><rect x="723.5" y="1427.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="726.5" y="1438.0"></text>
</g>
<g>
<title>JVM_Clone (6 samples, 0.07%)</title><rect x="723.6" y="1411.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="726.6" y="1422.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.02%)</title><rect x="723.8" y="1395.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="726.8" y="1406.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="723.8" y="1379.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="726.8" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.04%)</title><rect x="724.5" y="1427.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="727.5" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListSet.iterator (6 samples, 0.07%)</title><rect x="725.1" y="1427.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="728.1" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$KeySet.iterator (5 samples, 0.06%)</title><rect x="725.2" y="1411.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="728.2" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$KeyIterator.&lt;init&gt; (2 samples, 0.02%)</title><rect x="725.6" y="1395.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="728.6" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Iter.&lt;init&gt; (2 samples, 0.02%)</title><rect x="725.6" y="1379.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="728.6" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.requestFilters (7 samples, 0.08%)</title><rect x="727.0" y="1683.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="730.0" y="1694.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.request (4 samples, 0.05%)</title><rect x="727.3" y="1667.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="730.3" y="1678.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter$Cache.get (2 samples, 0.02%)</title><rect x="727.4" y="1651.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="730.4" y="1662.0"></text>
</g>
<g>
<title>java/util/AbstractSequentialList.iterator (2 samples, 0.02%)</title><rect x="727.4" y="1635.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="730.4" y="1646.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (2 samples, 0.02%)</title><rect x="727.4" y="1619.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="730.4" y="1630.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (2 samples, 0.02%)</title><rect x="727.4" y="1603.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="730.4" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (22 samples, 0.26%)</title><rect x="728.0" y="1747.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="731.0" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (21 samples, 0.25%)</title><rect x="728.1" y="1731.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.1" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (21 samples, 0.25%)</title><rect x="728.1" y="1715.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="731.1" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (20 samples, 0.24%)</title><rect x="728.3" y="1699.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="731.3" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (20 samples, 0.24%)</title><rect x="728.3" y="1683.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="731.3" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.02%)</title><rect x="728.4" y="1667.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="731.4" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.02%)</title><rect x="728.4" y="1651.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="731.4" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 0.20%)</title><rect x="728.7" y="1667.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="731.7" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 0.20%)</title><rect x="728.7" y="1651.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="731.7" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 0.18%)</title><rect x="728.8" y="1635.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="731.8" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 0.18%)</title><rect x="728.8" y="1619.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="731.8" y="1630.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (15 samples, 0.18%)</title><rect x="728.8" y="1603.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="731.8" y="1614.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.05%)</title><rect x="728.8" y="1587.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="731.8" y="1598.0"></text>
</g>
<g>
<title>__pthread_cond_signal (11 samples, 0.13%)</title><rect x="729.4" y="1587.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="732.4" y="1598.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 0.12%)</title><rect x="729.5" y="1571.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="732.5" y="1582.0"></text>
</g>
<g>
<title>do_syscall_64 (10 samples, 0.12%)</title><rect x="729.5" y="1555.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="732.5" y="1566.0"></text>
</g>
<g>
<title>__x64_sys_futex (10 samples, 0.12%)</title><rect x="729.5" y="1539.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="732.5" y="1550.0"></text>
</g>
<g>
<title>do_futex (10 samples, 0.12%)</title><rect x="729.5" y="1523.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="732.5" y="1534.0"></text>
</g>
<g>
<title>futex_wake (10 samples, 0.12%)</title><rect x="729.5" y="1507.0" width="1.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="732.5" y="1518.0"></text>
</g>
<g>
<title>wake_up_q (10 samples, 0.12%)</title><rect x="729.5" y="1491.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="732.5" y="1502.0"></text>
</g>
<g>
<title>try_to_wake_up (10 samples, 0.12%)</title><rect x="729.5" y="1475.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="732.5" y="1486.0"></text>
</g>
<g>
<title>__lock_text_start (10 samples, 0.12%)</title><rect x="729.5" y="1459.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="732.5" y="1470.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils$$Lambda$101/526355395.get (148 samples, 1.76%)</title><rect x="731.1" y="1763.0" width="20.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="734.1" y="1774.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils.lambda$getTimestampResponse$0 (146 samples, 1.74%)</title><rect x="731.4" y="1747.0" width="20.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="734.4" y="1758.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils.timestampFromByteBuffer (144 samples, 1.71%)</title><rect x="731.7" y="1731.0" width="20.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="734.7" y="1742.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (8 samples, 0.10%)</title><rect x="731.7" y="1715.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="734.7" y="1726.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (8 samples, 0.10%)</title><rect x="731.7" y="1699.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="734.7" y="1710.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (8 samples, 0.10%)</title><rect x="731.7" y="1683.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="734.7" y="1694.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (8 samples, 0.10%)</title><rect x="731.7" y="1667.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="734.7" y="1678.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (7 samples, 0.08%)</title><rect x="731.8" y="1651.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="734.8" y="1662.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (7 samples, 0.08%)</title><rect x="731.8" y="1635.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="734.8" y="1646.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (7 samples, 0.08%)</title><rect x="731.8" y="1619.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="734.8" y="1630.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (7 samples, 0.08%)</title><rect x="731.8" y="1603.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="734.8" y="1614.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (7 samples, 0.08%)</title><rect x="731.8" y="1587.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="734.8" y="1598.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (6 samples, 0.07%)</title><rect x="731.9" y="1571.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="734.9" y="1582.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/DAOImpl.getTimestampRecord (133 samples, 1.58%)</title><rect x="732.8" y="1715.0" width="18.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="735.8" y="1726.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (125 samples, 1.49%)</title><rect x="733.1" y="1699.0" width="17.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="736.1" y="1710.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (125 samples, 1.49%)</title><rect x="733.1" y="1683.0" width="17.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="736.1" y="1694.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (114 samples, 1.36%)</title><rect x="733.3" y="1667.0" width="16.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="736.3" y="1678.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (2 samples, 0.02%)</title><rect x="733.5" y="1651.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="736.5" y="1662.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (2 samples, 0.02%)</title><rect x="734.0" y="1651.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="737.0" y="1662.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (106 samples, 1.26%)</title><rect x="734.3" y="1651.0" width="14.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="737.3" y="1662.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.04%)</title><rect x="734.6" y="1635.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="737.6" y="1646.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.06%)</title><rect x="735.5" y="1635.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="738.5" y="1646.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (13 samples, 0.15%)</title><rect x="736.2" y="1635.0" width="1.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="739.2" y="1646.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (3 samples, 0.04%)</title><rect x="736.6" y="1619.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="739.6" y="1630.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.07%)</title><rect x="737.1" y="1619.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="740.1" y="1630.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (71 samples, 0.85%)</title><rect x="738.0" y="1635.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="741.0" y="1646.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (70 samples, 0.83%)</title><rect x="738.1" y="1619.0" width="9.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="741.1" y="1630.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (68 samples, 0.81%)</title><rect x="738.4" y="1603.0" width="9.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="741.4" y="1614.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (68 samples, 0.81%)</title><rect x="738.4" y="1587.0" width="9.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="741.4" y="1598.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (2 samples, 0.02%)</title><rect x="738.5" y="1571.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="741.5" y="1582.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (58 samples, 0.69%)</title><rect x="738.8" y="1571.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="741.8" y="1582.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (5 samples, 0.06%)</title><rect x="739.9" y="1555.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="742.9" y="1566.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (3 samples, 0.04%)</title><rect x="740.2" y="1539.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="743.2" y="1550.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (40 samples, 0.48%)</title><rect x="740.8" y="1555.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="743.8" y="1566.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni7897767748598243799.so (2 samples, 0.02%)</title><rect x="741.1" y="1539.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="744.1" y="1550.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (36 samples, 0.43%)</title><rect x="741.4" y="1539.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="744.4" y="1550.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni7897767748598243799.so (34 samples, 0.40%)</title><rect x="741.6" y="1523.0" width="4.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="744.6" y="1534.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni7897767748598243799.so (2 samples, 0.02%)</title><rect x="741.6" y="1507.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="744.6" y="1518.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (30 samples, 0.36%)</title><rect x="741.9" y="1507.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="744.9" y="1518.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni7897767748598243799.so (3 samples, 0.04%)</title><rect x="743.7" y="1491.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="746.7" y="1502.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.04%)</title><rect x="744.2" y="1491.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="747.2" y="1502.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.02%)</title><rect x="744.6" y="1491.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="747.6" y="1502.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (9 samples, 0.11%)</title><rect x="744.9" y="1491.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="747.9" y="1502.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni7897767748598243799.so (3 samples, 0.04%)</title><rect x="745.0" y="1475.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="748.0" y="1486.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.05%)</title><rect x="745.4" y="1475.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="748.4" y="1486.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned long) (2 samples, 0.02%)</title><rect x="746.1" y="1507.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="749.1" y="1518.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (3 samples, 0.04%)</title><rect x="746.6" y="1555.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="749.6" y="1566.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (4 samples, 0.05%)</title><rect x="747.0" y="1571.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="750.0" y="1582.0"></text>
</g>
<g>
<title>rocksdb::MergeContext::~MergeContext() (2 samples, 0.02%)</title><rect x="747.5" y="1571.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="750.5" y="1582.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (8 samples, 0.10%)</title><rect x="748.0" y="1635.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="751.0" y="1646.0"></text>
</g>
<g>
<title>jni_NewByteArray (5 samples, 0.06%)</title><rect x="748.2" y="1619.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="751.2" y="1630.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.04%)</title><rect x="748.5" y="1603.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="751.5" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="748.5" y="1587.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="751.5" y="1598.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="748.5" y="1571.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="751.5" y="1582.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="749.4" y="1667.0" width="0.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="752.4" y="1678.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (2 samples, 0.02%)</title><rect x="749.4" y="1651.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="752.4" y="1662.0"></text>
</g>
<g>
<title>__libc_malloc (4 samples, 0.05%)</title><rect x="749.6" y="1667.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="752.6" y="1678.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (2 samples, 0.02%)</title><rect x="750.2" y="1667.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="753.2" y="1678.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/ByteConvertor.toUnsignedArray (4 samples, 0.05%)</title><rect x="750.6" y="1699.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="753.6" y="1710.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.fromBytes (2 samples, 0.02%)</title><rect x="751.2" y="1699.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="754.2" y="1710.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.toBytes (3 samples, 0.04%)</title><rect x="751.5" y="1715.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="754.5" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (189 samples, 2.25%)</title><rect x="751.9" y="1779.0" width="26.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="754.9" y="1790.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (8 samples, 0.10%)</title><rect x="751.9" y="1763.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="754.9" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (4 samples, 0.05%)</title><rect x="752.0" y="1747.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="755.0" y="1758.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (4 samples, 0.05%)</title><rect x="752.0" y="1731.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="755.0" y="1742.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (4 samples, 0.05%)</title><rect x="752.0" y="1715.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="755.0" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.02%)</title><rect x="752.6" y="1747.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="755.6" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.02%)</title><rect x="752.6" y="1731.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="755.6" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.02%)</title><rect x="752.6" y="1715.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="755.6" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.02%)</title><rect x="752.6" y="1699.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="755.6" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.02%)</title><rect x="752.6" y="1683.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="755.6" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.02%)</title><rect x="752.6" y="1667.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="755.6" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.02%)</title><rect x="752.6" y="1651.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="755.6" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (181 samples, 2.16%)</title><rect x="753.0" y="1763.0" width="25.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="756.0" y="1774.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (176 samples, 2.10%)</title><rect x="753.7" y="1747.0" width="24.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="756.7" y="1758.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils$$Lambda$150/536019492.accept (176 samples, 2.10%)</title><rect x="753.7" y="1731.0" width="24.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="756.7" y="1742.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils.lambda$atLeastAsync$8 (176 samples, 2.10%)</title><rect x="753.7" y="1715.0" width="24.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="756.7" y="1726.0">r..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (170 samples, 2.02%)</title><rect x="753.7" y="1699.0" width="23.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="756.7" y="1710.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (170 samples, 2.02%)</title><rect x="753.7" y="1683.0" width="23.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="756.7" y="1694.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (69 samples, 0.82%)</title><rect x="753.9" y="1667.0" width="9.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="756.9" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (67 samples, 0.80%)</title><rect x="754.1" y="1651.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="757.1" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (4 samples, 0.05%)</title><rect x="754.1" y="1635.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="757.1" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (4 samples, 0.05%)</title><rect x="754.1" y="1619.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="757.1" y="1630.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasNettyRequests$$Lambda$152/120584240.apply (63 samples, 0.75%)</title><rect x="754.7" y="1635.0" width="8.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="757.7" y="1646.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasNettyRequests.lambda$multiGet$0 (62 samples, 0.74%)</title><rect x="754.8" y="1619.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="757.8" y="1630.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasNettyRequests.processResponses (62 samples, 0.74%)</title><rect x="754.8" y="1603.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="757.8" y="1614.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.add (11 samples, 0.13%)</title><rect x="755.0" y="1587.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="758.0" y="1598.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.addObject (11 samples, 0.13%)</title><rect x="755.0" y="1571.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="758.0" y="1582.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.add (3 samples, 0.04%)</title><rect x="755.0" y="1555.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="758.0" y="1566.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders$2.validateName (3 samples, 0.04%)</title><rect x="755.0" y="1539.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="758.0" y="1550.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders$2.validateName (2 samples, 0.02%)</title><rect x="755.1" y="1523.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="758.1" y="1534.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.02%)</title><rect x="755.1" y="1507.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="758.1" y="1518.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders$HeaderValueConverterAndValidator.convertObject (8 samples, 0.10%)</title><rect x="755.4" y="1555.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="758.4" y="1566.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders$HeaderValueConverterAndValidator.convertObject (7 samples, 0.08%)</title><rect x="755.5" y="1539.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="758.5" y="1550.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders$HeaderValueConverter.convertObject (5 samples, 0.06%)</title><rect x="755.8" y="1523.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="758.8" y="1534.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.05%)</title><rect x="756.0" y="1507.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="759.0" y="1518.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.05%)</title><rect x="756.0" y="1491.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="759.0" y="1502.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.02%)</title><rect x="756.2" y="1475.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="759.2" y="1486.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.getValueAsBytes (5 samples, 0.06%)</title><rect x="756.7" y="1587.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="759.7" y="1598.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.06%)</title><rect x="756.7" y="1571.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="759.7" y="1582.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="757.1" y="1555.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="760.1" y="1566.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="757.1" y="1539.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="760.1" y="1550.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.merge (24 samples, 0.29%)</title><rect x="757.4" y="1587.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="760.4" y="1598.0"></text>
</g>
<g>
<title>java/util/Collection.stream (6 samples, 0.07%)</title><rect x="757.4" y="1571.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="760.4" y="1582.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (4 samples, 0.05%)</title><rect x="757.7" y="1555.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="760.7" y="1566.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (3 samples, 0.04%)</title><rect x="757.8" y="1539.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="760.8" y="1550.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (3 samples, 0.04%)</title><rect x="757.8" y="1523.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="760.8" y="1534.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (3 samples, 0.04%)</title><rect x="757.8" y="1507.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.8" y="1518.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.02%)</title><rect x="757.8" y="1491.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="760.8" y="1502.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (7 samples, 0.08%)</title><rect x="758.2" y="1571.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="761.2" y="1582.0"></text>
</g>
<g>
<title>Runtime1::new_instance(JavaThread*, Klass*) (2 samples, 0.02%)</title><rect x="758.8" y="1555.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="761.8" y="1566.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.02%)</title><rect x="758.8" y="1539.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="761.8" y="1550.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (11 samples, 0.13%)</title><rect x="759.2" y="1571.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="762.2" y="1582.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (10 samples, 0.12%)</title><rect x="759.3" y="1555.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="762.3" y="1566.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (9 samples, 0.11%)</title><rect x="759.3" y="1539.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="762.3" y="1550.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.sourceSpliterator (2 samples, 0.02%)</title><rect x="759.3" y="1523.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="762.3" y="1534.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (7 samples, 0.08%)</title><rect x="759.6" y="1523.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="762.6" y="1534.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (5 samples, 0.06%)</title><rect x="759.6" y="1507.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="762.6" y="1518.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.02%)</title><rect x="759.6" y="1491.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="762.6" y="1502.0"></text>
</g>
<g>
<title>java/util/Spliterators$ArraySpliterator.forEachRemaining (2 samples, 0.02%)</title><rect x="759.6" y="1475.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="762.6" y="1486.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.02%)</title><rect x="759.6" y="1459.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="762.6" y="1470.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (3 samples, 0.04%)</title><rect x="759.9" y="1491.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="762.9" y="1502.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (3 samples, 0.04%)</title><rect x="759.9" y="1475.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="762.9" y="1486.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.&lt;init&gt; (3 samples, 0.04%)</title><rect x="759.9" y="1459.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="762.9" y="1470.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (3 samples, 0.04%)</title><rect x="759.9" y="1443.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="762.9" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2.makeSink (2 samples, 0.02%)</title><rect x="760.3" y="1507.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="763.3" y="1518.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils.responseBuilder (20 samples, 0.24%)</title><rect x="760.7" y="1587.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="763.7" y="1598.0"></text>
</g>
<g>
<title>io/netty/buffer/Unpooled.copiedBuffer (3 samples, 0.04%)</title><rect x="760.9" y="1571.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="763.9" y="1582.0"></text>
</g>
<g>
<title>java/lang/Object.clone (2 samples, 0.02%)</title><rect x="761.0" y="1555.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="764.0" y="1566.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultFullHttpResponse.&lt;init&gt; (9 samples, 0.11%)</title><rect x="761.3" y="1571.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="764.3" y="1582.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultFullHttpResponse.&lt;init&gt; (9 samples, 0.11%)</title><rect x="761.3" y="1555.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="764.3" y="1566.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultFullHttpResponse.&lt;init&gt; (9 samples, 0.11%)</title><rect x="761.3" y="1539.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="764.3" y="1550.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.&lt;init&gt; (3 samples, 0.04%)</title><rect x="761.3" y="1523.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="764.3" y="1534.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.&lt;init&gt; (3 samples, 0.04%)</title><rect x="761.3" y="1507.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="764.3" y="1518.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeadersImpl.&lt;init&gt; (2 samples, 0.02%)</title><rect x="761.4" y="1491.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="764.4" y="1502.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.&lt;init&gt; (2 samples, 0.02%)</title><rect x="761.4" y="1475.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="764.4" y="1486.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.&lt;init&gt; (2 samples, 0.02%)</title><rect x="761.4" y="1459.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="764.4" y="1470.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpResponse.&lt;init&gt; (6 samples, 0.07%)</title><rect x="761.7" y="1523.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="764.7" y="1534.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpMessage.&lt;init&gt; (5 samples, 0.06%)</title><rect x="761.7" y="1507.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="764.7" y="1518.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.&lt;init&gt; (4 samples, 0.05%)</title><rect x="761.9" y="1491.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="764.9" y="1502.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.&lt;init&gt; (3 samples, 0.04%)</title><rect x="761.9" y="1475.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="764.9" y="1486.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeadersImpl.&lt;init&gt; (2 samples, 0.02%)</title><rect x="762.0" y="1459.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="765.0" y="1470.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.&lt;init&gt; (2 samples, 0.02%)</title><rect x="762.0" y="1443.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="765.0" y="1454.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.&lt;init&gt; (2 samples, 0.02%)</title><rect x="762.0" y="1427.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="765.0" y="1438.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.set (7 samples, 0.08%)</title><rect x="762.6" y="1571.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="765.6" y="1582.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.setObject (6 samples, 0.07%)</title><rect x="762.7" y="1555.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="765.7" y="1566.0"></text>
</g>
<g>
<title>io/netty/handler/codec/DefaultHeaders.set (4 samples, 0.05%)</title><rect x="762.7" y="1539.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="765.7" y="1550.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders$2.validateName (2 samples, 0.02%)</title><rect x="762.9" y="1523.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="765.9" y="1534.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders$2.validateName (2 samples, 0.02%)</title><rect x="762.9" y="1507.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="765.9" y="1518.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders$HeaderValueConverterAndValidator.convertObject (2 samples, 0.02%)</title><rect x="763.3" y="1539.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="766.3" y="1550.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders$HeaderValueConverterAndValidator.convertObject (2 samples, 0.02%)</title><rect x="763.3" y="1523.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="766.3" y="1534.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders$HeaderValueConverter.convertObject (2 samples, 0.02%)</title><rect x="763.3" y="1507.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="766.3" y="1518.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.02%)</title><rect x="763.3" y="1491.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="766.3" y="1502.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.02%)</title><rect x="763.3" y="1475.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="766.3" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (99 samples, 1.18%)</title><rect x="763.6" y="1667.0" width="13.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="766.6" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (97 samples, 1.16%)</title><rect x="763.8" y="1651.0" width="13.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="766.8" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (4 samples, 0.05%)</title><rect x="763.8" y="1635.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="766.8" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (4 samples, 0.05%)</title><rect x="763.8" y="1619.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="766.8" y="1630.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils$$Lambda$153/1911805998.accept (93 samples, 1.11%)</title><rect x="764.4" y="1635.0" width="13.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="767.4" y="1646.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/utils/ServiceUtils.lambda$respond$10 (93 samples, 1.11%)</title><rect x="764.4" y="1619.0" width="13.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="767.4" y="1630.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (87 samples, 1.04%)</title><rect x="764.4" y="1603.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="767.4" y="1614.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.newPromise (6 samples, 0.07%)</title><rect x="764.4" y="1587.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="767.4" y="1598.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPromise.&lt;init&gt; (3 samples, 0.04%)</title><rect x="764.8" y="1571.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="767.8" y="1582.0"></text>
</g>
<g>
<title>io/netty/util/internal/ObjectUtil.checkNotNull (2 samples, 0.02%)</title><rect x="765.0" y="1555.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="768.0" y="1566.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (81 samples, 0.96%)</title><rect x="765.2" y="1587.0" width="11.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="768.2" y="1598.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (81 samples, 0.96%)</title><rect x="765.2" y="1571.0" width="11.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="768.2" y="1582.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$WriteTask.newInstance (20 samples, 0.24%)</title><rect x="765.5" y="1555.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="768.5" y="1566.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$WriteTask.init (5 samples, 0.06%)</title><rect x="765.5" y="1539.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="768.5" y="1550.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.estimatorHandle (3 samples, 0.04%)</title><rect x="765.5" y="1523.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="768.5" y="1534.0"></text>
</g>
<g>
<title>io/netty/util/internal/ObjectPool$RecyclerObjectPool.get (15 samples, 0.18%)</title><rect x="766.2" y="1539.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="769.2" y="1550.0"></text>
</g>
<g>
<title>io/netty/util/Recycler.get (15 samples, 0.18%)</title><rect x="766.2" y="1523.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="769.2" y="1534.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.pop (9 samples, 0.11%)</title><rect x="766.2" y="1507.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="769.2" y="1518.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.scavenge (9 samples, 0.11%)</title><rect x="766.2" y="1491.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="769.2" y="1502.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$Stack.scavengeSome (9 samples, 0.11%)</title><rect x="766.2" y="1475.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="769.2" y="1486.0"></text>
</g>
<g>
<title>io/netty/util/Recycler$WeakOrderQueue.transfer (7 samples, 0.08%)</title><rect x="766.5" y="1459.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="769.5" y="1470.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocal.get (5 samples, 0.06%)</title><rect x="767.5" y="1507.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="770.5" y="1518.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.get (3 samples, 0.04%)</title><rect x="767.6" y="1491.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="770.6" y="1502.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.executor (2 samples, 0.02%)</title><rect x="768.3" y="1555.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="771.3" y="1566.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.findContextOutbound (5 samples, 0.06%)</title><rect x="768.6" y="1555.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="771.6" y="1566.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.skipContext (4 samples, 0.05%)</title><rect x="768.8" y="1539.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="771.8" y="1550.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.executor (3 samples, 0.04%)</title><rect x="768.9" y="1523.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="771.9" y="1534.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (2 samples, 0.02%)</title><rect x="769.5" y="1555.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="772.5" y="1566.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.safeExecute (47 samples, 0.56%)</title><rect x="769.7" y="1555.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="772.7" y="1566.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.execute (46 samples, 0.55%)</title><rect x="769.9" y="1539.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="772.9" y="1550.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.execute (45 samples, 0.54%)</title><rect x="770.0" y="1523.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="773.0" y="1534.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.wakeup (44 samples, 0.52%)</title><rect x="770.0" y="1507.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="773.0" y="1518.0"></text>
</g>
<g>
<title>io/netty/channel/nio/SelectedSelectionKeySetSelector.wakeup (43 samples, 0.51%)</title><rect x="770.2" y="1491.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="773.2" y="1502.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (43 samples, 0.51%)</title><rect x="770.2" y="1475.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="773.2" y="1486.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (43 samples, 0.51%)</title><rect x="770.2" y="1459.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="773.2" y="1470.0"></text>
</g>
<g>
<title>__write (40 samples, 0.48%)</title><rect x="770.6" y="1443.0" width="5.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="773.6" y="1454.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (40 samples, 0.48%)</title><rect x="770.6" y="1427.0" width="5.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="773.6" y="1438.0"></text>
</g>
<g>
<title>do_syscall_64 (40 samples, 0.48%)</title><rect x="770.6" y="1411.0" width="5.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="773.6" y="1422.0"></text>
</g>
<g>
<title>__x64_sys_write (39 samples, 0.46%)</title><rect x="770.7" y="1395.0" width="5.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="773.7" y="1406.0"></text>
</g>
<g>
<title>ksys_write (39 samples, 0.46%)</title><rect x="770.7" y="1379.0" width="5.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="773.7" y="1390.0"></text>
</g>
<g>
<title>vfs_write (37 samples, 0.44%)</title><rect x="771.0" y="1363.0" width="5.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="774.0" y="1374.0"></text>
</g>
<g>
<title>__vfs_write (33 samples, 0.39%)</title><rect x="771.3" y="1347.0" width="4.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="774.3" y="1358.0"></text>
</g>
<g>
<title>new_sync_write (33 samples, 0.39%)</title><rect x="771.3" y="1331.0" width="4.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="774.3" y="1342.0"></text>
</g>
<g>
<title>copy_page_from_iter (2 samples, 0.02%)</title><rect x="771.3" y="1315.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="774.3" y="1326.0"></text>
</g>
<g>
<title>pipe_write (29 samples, 0.35%)</title><rect x="771.8" y="1315.0" width="4.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="774.8" y="1326.0"></text>
</g>
<g>
<title>__wake_up_sync_key (25 samples, 0.30%)</title><rect x="771.8" y="1299.0" width="3.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="774.8" y="1310.0"></text>
</g>
<g>
<title>__wake_up_common_lock (25 samples, 0.30%)</title><rect x="771.8" y="1283.0" width="3.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="774.8" y="1294.0"></text>
</g>
<g>
<title>__lock_text_start (25 samples, 0.30%)</title><rect x="771.8" y="1267.0" width="3.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="774.8" y="1278.0"></text>
</g>
<g>
<title>mutex_lock (3 samples, 0.04%)</title><rect x="775.5" y="1299.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="778.5" y="1310.0"></text>
</g>
<g>
<title>rw_verify_area (2 samples, 0.02%)</title><rect x="775.9" y="1347.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="778.9" y="1358.0"></text>
</g>
<g>
<title>security_file_permission (2 samples, 0.02%)</title><rect x="775.9" y="1331.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="778.9" y="1342.0"></text>
</g>
<g>
<title>apparmor_file_permission (2 samples, 0.02%)</title><rect x="775.9" y="1315.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="778.9" y="1326.0"></text>
</g>
<g>
<title>common_file_perm (2 samples, 0.02%)</title><rect x="775.9" y="1299.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="778.9" y="1310.0"></text>
</g>
<g>
<title>aa_file_perm (2 samples, 0.02%)</title><rect x="775.9" y="1283.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="778.9" y="1294.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.touch (2 samples, 0.02%)</title><rect x="776.3" y="1555.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="779.3" y="1566.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpUtil.isKeepAlive (4 samples, 0.05%)</title><rect x="776.8" y="1603.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="779.8" y="1614.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/HttpHeaders.containsValue (2 samples, 0.02%)</title><rect x="776.9" y="1587.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="779.9" y="1598.0"></text>
</g>
<g>
<title>io/netty/handler/codec/http/DefaultHttpHeaders.valueCharSequenceIterator (2 samples, 0.02%)</title><rect x="776.9" y="1571.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="779.9" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.add (6 samples, 0.07%)</title><rect x="777.6" y="1699.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="780.6" y="1710.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.04%)</title><rect x="778.0" y="1683.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="781.0" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 0.04%)</title><rect x="778.4" y="1779.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="781.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.04%)</title><rect x="778.4" y="1763.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="781.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (3 samples, 0.04%)</title><rect x="778.4" y="1747.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="781.4" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.02%)</title><rect x="778.6" y="1731.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="781.6" y="1742.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.02%)</title><rect x="778.6" y="1715.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="781.6" y="1726.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.02%)</title><rect x="778.6" y="1699.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="781.6" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.05%)</title><rect x="778.9" y="1779.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="781.9" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.04%)</title><rect x="779.0" y="1763.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="782.0" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (2 samples, 0.02%)</title><rect x="779.1" y="1747.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="782.1" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.02%)</title><rect x="779.1" y="1731.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="782.1" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (168 samples, 2.00%)</title><rect x="779.4" y="1779.0" width="23.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="782.4" y="1790.0">j..</text>
</g>
<g>
<title>itable stub (6 samples, 0.07%)</title><rect x="781.3" y="1763.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="784.3" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (148 samples, 1.76%)</title><rect x="782.1" y="1763.0" width="20.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="785.1" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (103 samples, 1.23%)</title><rect x="782.7" y="1747.0" width="14.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="785.7" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (7 samples, 0.08%)</title><rect x="782.7" y="1731.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="785.7" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (6 samples, 0.07%)</title><rect x="782.8" y="1715.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="785.8" y="1726.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (3 samples, 0.04%)</title><rect x="783.1" y="1699.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="786.1" y="1710.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (3 samples, 0.04%)</title><rect x="783.1" y="1683.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="786.1" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (17 samples, 0.20%)</title><rect x="783.6" y="1731.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="786.6" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 0.20%)</title><rect x="783.6" y="1715.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="786.6" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 0.18%)</title><rect x="783.6" y="1699.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="786.6" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.17%)</title><rect x="783.8" y="1683.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="786.8" y="1694.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (14 samples, 0.17%)</title><rect x="783.8" y="1667.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="786.8" y="1678.0"></text>
</g>
<g>
<title>__pthread_cond_signal (12 samples, 0.14%)</title><rect x="784.1" y="1651.0" width="1.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="787.1" y="1662.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.13%)</title><rect x="784.2" y="1635.0" width="1.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="787.2" y="1646.0"></text>
</g>
<g>
<title>do_syscall_64 (11 samples, 0.13%)</title><rect x="784.2" y="1619.0" width="1.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="787.2" y="1630.0"></text>
</g>
<g>
<title>__x64_sys_futex (11 samples, 0.13%)</title><rect x="784.2" y="1603.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="787.2" y="1614.0"></text>
</g>
<g>
<title>do_futex (11 samples, 0.13%)</title><rect x="784.2" y="1587.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="787.2" y="1598.0"></text>
</g>
<g>
<title>futex_wake (11 samples, 0.13%)</title><rect x="784.2" y="1571.0" width="1.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="787.2" y="1582.0"></text>
</g>
<g>
<title>wake_up_q (9 samples, 0.11%)</title><rect x="784.5" y="1555.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="787.5" y="1566.0"></text>
</g>
<g>
<title>try_to_wake_up (9 samples, 0.11%)</title><rect x="784.5" y="1539.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="787.5" y="1550.0"></text>
</g>
<g>
<title>__lock_text_start (9 samples, 0.11%)</title><rect x="784.5" y="1523.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="787.5" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.02%)</title><rect x="785.8" y="1699.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="788.8" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (79 samples, 0.94%)</title><rect x="786.0" y="1731.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="789.0" y="1742.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (79 samples, 0.94%)</title><rect x="786.0" y="1715.0" width="11.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="789.0" y="1726.0"></text>
</g>
<g>
<title>Unsafe_Park (40 samples, 0.48%)</title><rect x="787.0" y="1699.0" width="5.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="790.0" y="1710.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.02%)</title><rect x="787.0" y="1683.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="790.0" y="1694.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 0.14%)</title><rect x="787.3" y="1683.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="790.3" y="1694.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.02%)</title><rect x="788.7" y="1667.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="791.7" y="1678.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (2 samples, 0.02%)</title><rect x="789.1" y="1683.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="792.1" y="1694.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (17 samples, 0.20%)</title><rect x="789.4" y="1683.0" width="2.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="792.4" y="1694.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (13 samples, 0.15%)</title><rect x="790.0" y="1667.0" width="1.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="793.0" y="1678.0"></text>
</g>
<g>
<title>do_syscall_64 (13 samples, 0.15%)</title><rect x="790.0" y="1651.0" width="1.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="793.0" y="1662.0"></text>
</g>
<g>
<title>__x64_sys_futex (11 samples, 0.13%)</title><rect x="790.3" y="1635.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="793.3" y="1646.0"></text>
</g>
<g>
<title>do_futex (11 samples, 0.13%)</title><rect x="790.3" y="1619.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="793.3" y="1630.0"></text>
</g>
<g>
<title>futex_wake (9 samples, 0.11%)</title><rect x="790.4" y="1603.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="793.4" y="1614.0"></text>
</g>
<g>
<title>get_futex_key (4 samples, 0.05%)</title><rect x="790.8" y="1587.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="793.8" y="1598.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.0 (2 samples, 0.02%)</title><rect x="791.1" y="1571.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="794.1" y="1582.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.02%)</title><rect x="791.4" y="1587.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="794.4" y="1598.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.04%)</title><rect x="791.8" y="1683.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="794.8" y="1694.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 0.38%)</title><rect x="792.6" y="1699.0" width="4.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="795.6" y="1710.0"></text>
</g>
<g>
<title>__pthread_cond_wait (17 samples, 0.20%)</title><rect x="792.8" y="1683.0" width="2.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="795.8" y="1694.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (8 samples, 0.10%)</title><rect x="794.0" y="1667.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="797.0" y="1678.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 0.08%)</title><rect x="794.2" y="1651.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="797.2" y="1662.0"></text>
</g>
<g>
<title>__x64_sys_futex (7 samples, 0.08%)</title><rect x="794.2" y="1635.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="797.2" y="1646.0"></text>
</g>
<g>
<title>do_futex (7 samples, 0.08%)</title><rect x="794.2" y="1619.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="797.2" y="1630.0"></text>
</g>
<g>
<title>futex_wait (7 samples, 0.08%)</title><rect x="794.2" y="1603.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="797.2" y="1614.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.02%)</title><rect x="794.5" y="1587.0" width="0.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="797.5" y="1598.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.02%)</title><rect x="794.5" y="1571.0" width="0.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="797.5" y="1582.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.02%)</title><rect x="794.5" y="1555.0" width="0.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="797.5" y="1566.0"></text>
</g>
<g>
<title>futex_wait_setup (2 samples, 0.02%)</title><rect x="794.7" y="1587.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="797.7" y="1598.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (10 samples, 0.12%)</title><rect x="795.2" y="1683.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="798.2" y="1694.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.04%)</title><rect x="796.7" y="1683.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="799.7" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (22 samples, 0.26%)</title><rect x="797.1" y="1747.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="800.1" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (22 samples, 0.26%)</title><rect x="797.1" y="1731.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="800.1" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (13 samples, 0.15%)</title><rect x="797.1" y="1715.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="800.1" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (2 samples, 0.02%)</title><rect x="797.6" y="1699.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="800.6" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (3 samples, 0.04%)</title><rect x="797.8" y="1699.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="800.8" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.06%)</title><rect x="798.3" y="1699.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="801.3" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.06%)</title><rect x="798.3" y="1683.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="801.3" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (8 samples, 0.10%)</title><rect x="799.0" y="1715.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="802.0" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (8 samples, 0.10%)</title><rect x="799.0" y="1699.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="802.0" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.02%)</title><rect x="799.4" y="1683.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="802.4" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.04%)</title><rect x="799.7" y="1683.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="802.7" y="1694.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.04%)</title><rect x="799.7" y="1667.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="802.7" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 0.23%)</title><rect x="800.2" y="1747.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="803.2" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 0.23%)</title><rect x="800.2" y="1731.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="803.2" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 0.23%)</title><rect x="800.2" y="1715.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="803.2" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 0.23%)</title><rect x="800.2" y="1699.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="803.2" y="1710.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (19 samples, 0.23%)</title><rect x="800.2" y="1683.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="803.2" y="1694.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 0.06%)</title><rect x="800.2" y="1667.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="803.2" y="1678.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.02%)</title><rect x="800.6" y="1651.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="803.6" y="1662.0"></text>
</g>
<g>
<title>__pthread_cond_signal (14 samples, 0.17%)</title><rect x="800.9" y="1667.0" width="2.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="803.9" y="1678.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 0.14%)</title><rect x="801.2" y="1651.0" width="1.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="804.2" y="1662.0"></text>
</g>
<g>
<title>do_syscall_64 (12 samples, 0.14%)</title><rect x="801.2" y="1635.0" width="1.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="804.2" y="1646.0"></text>
</g>
<g>
<title>__x64_sys_futex (12 samples, 0.14%)</title><rect x="801.2" y="1619.0" width="1.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="804.2" y="1630.0"></text>
</g>
<g>
<title>do_futex (12 samples, 0.14%)</title><rect x="801.2" y="1603.0" width="1.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="804.2" y="1614.0"></text>
</g>
<g>
<title>futex_wake (12 samples, 0.14%)</title><rect x="801.2" y="1587.0" width="1.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="804.2" y="1598.0"></text>
</g>
<g>
<title>wake_up_q (11 samples, 0.13%)</title><rect x="801.4" y="1571.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="804.4" y="1582.0"></text>
</g>
<g>
<title>try_to_wake_up (10 samples, 0.12%)</title><rect x="801.5" y="1555.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="804.5" y="1566.0"></text>
</g>
<g>
<title>__lock_text_start (10 samples, 0.12%)</title><rect x="801.5" y="1539.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="804.5" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$231/1485958815.run (179 samples, 2.13%)</title><rect x="803.0" y="1779.0" width="25.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="806.0" y="1790.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.requestMore (178 samples, 2.12%)</title><rect x="803.2" y="1763.0" width="25.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="806.2" y="1774.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.requestMore (177 samples, 2.11%)</title><rect x="803.3" y="1747.0" width="24.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="806.3" y="1758.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$Http1WriteSubscription.request (174 samples, 2.07%)</title><rect x="803.6" y="1731.0" width="24.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="806.6" y="1742.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (173 samples, 2.06%)</title><rect x="803.7" y="1715.0" width="24.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="806.7" y="1726.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (173 samples, 2.06%)</title><rect x="803.7" y="1699.0" width="24.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="806.7" y="1710.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (172 samples, 2.05%)</title><rect x="803.7" y="1683.0" width="24.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="806.7" y="1694.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (172 samples, 2.05%)</title><rect x="803.7" y="1667.0" width="24.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="806.7" y="1678.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (172 samples, 2.05%)</title><rect x="803.7" y="1651.0" width="24.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="806.7" y="1662.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (172 samples, 2.05%)</title><rect x="803.7" y="1635.0" width="24.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="806.7" y="1646.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (172 samples, 2.05%)</title><rect x="803.7" y="1619.0" width="24.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="806.7" y="1630.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.getOutgoing (36 samples, 0.43%)</title><rect x="803.7" y="1603.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="806.7" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (26 samples, 0.31%)</title><rect x="804.4" y="1587.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="807.4" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (25 samples, 0.30%)</title><rect x="804.6" y="1571.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="807.6" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (24 samples, 0.29%)</title><rect x="804.6" y="1555.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="807.6" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (23 samples, 0.27%)</title><rect x="804.6" y="1539.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="807.6" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (13 samples, 0.15%)</title><rect x="804.6" y="1523.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="807.6" y="1534.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$235/2105901669.apply (9 samples, 0.11%)</title><rect x="804.9" y="1507.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="807.9" y="1518.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$sendRequestBody$6 (8 samples, 0.10%)</title><rect x="804.9" y="1491.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.9" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.getResponseAsync (8 samples, 0.10%)</title><rect x="804.9" y="1475.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="807.9" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readHeadersAsync (4 samples, 0.05%)</title><rect x="805.4" y="1459.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="808.4" y="1470.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.02%)</title><rect x="805.4" y="1443.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="808.4" y="1454.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.02%)</title><rect x="805.4" y="1427.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="808.4" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$238/545921687.get$Lambda (2 samples, 0.02%)</title><rect x="805.4" y="1411.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="808.4" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApplyAsync (2 samples, 0.02%)</title><rect x="805.7" y="1443.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="808.7" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (2 samples, 0.02%)</title><rect x="805.7" y="1427.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="808.7" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$125/2047461627.apply (2 samples, 0.02%)</title><rect x="806.1" y="1507.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="809.1" y="1518.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$4 (2 samples, 0.02%)</title><rect x="806.1" y="1491.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="809.1" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.readBodyAsync (2 samples, 0.02%)</title><rect x="806.1" y="1475.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="809.1" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.readBodyAsync (2 samples, 0.02%)</title><rect x="806.1" y="1459.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="809.1" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readBody (2 samples, 0.02%)</title><rect x="806.1" y="1443.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="809.1" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (2 samples, 0.02%)</title><rect x="806.1" y="1427.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="809.1" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$246/290404521.run (2 samples, 0.02%)</title><rect x="806.1" y="1411.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="809.1" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$3 (2 samples, 0.02%)</title><rect x="806.1" y="1395.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="809.1" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.subscribe (2 samples, 0.02%)</title><rect x="806.1" y="1379.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="809.1" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.02%)</title><rect x="806.1" y="1363.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="809.1" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.02%)</title><rect x="806.1" y="1347.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="809.1" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (2 samples, 0.02%)</title><rect x="806.1" y="1331.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="809.1" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (2 samples, 0.02%)</title><rect x="806.1" y="1315.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="809.1" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (2 samples, 0.02%)</title><rect x="806.1" y="1299.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="809.1" y="1310.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$189/2011462796.run (2 samples, 0.02%)</title><rect x="806.1" y="1283.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="809.1" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (2 samples, 0.02%)</title><rect x="806.1" y="1267.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="809.1" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.tryAsyncReceive (2 samples, 0.02%)</title><rect x="806.1" y="1251.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="809.1" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (2 samples, 0.02%)</title><rect x="806.1" y="1235.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="809.1" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.handle (2 samples, 0.02%)</title><rect x="806.1" y="1219.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="809.1" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.handle (2 samples, 0.02%)</title><rect x="806.1" y="1203.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="809.1" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.accept (2 samples, 0.02%)</title><rect x="806.1" y="1187.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="809.1" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.accept (2 samples, 0.02%)</title><rect x="806.1" y="1171.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="809.1" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$247/1389791625.run (2 samples, 0.02%)</title><rect x="806.1" y="1155.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="809.1" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.onFinished (2 samples, 0.02%)</title><rect x="806.1" y="1139.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="809.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (9 samples, 0.11%)</title><rect x="806.4" y="1523.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="809.4" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (9 samples, 0.11%)</title><rect x="806.4" y="1507.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="809.4" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.02%)</title><rect x="806.4" y="1491.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="809.4" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (2 samples, 0.02%)</title><rect x="806.4" y="1475.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="809.4" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$212/1475186263.apply (7 samples, 0.08%)</title><rect x="806.7" y="1491.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="809.7" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$7 (7 samples, 0.08%)</title><rect x="806.7" y="1475.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="809.7" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (7 samples, 0.08%)</title><rect x="806.7" y="1459.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="809.7" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$137/1950094988.apply (2 samples, 0.02%)</title><rect x="806.7" y="1443.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="809.7" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$138/2027683497.apply (5 samples, 0.06%)</title><rect x="807.0" y="1443.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="810.0" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$8 (5 samples, 0.06%)</title><rect x="807.0" y="1427.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="810.0" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendHeadersAsync (5 samples, 0.06%)</title><rect x="807.0" y="1411.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="810.0" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection.connectAsync (3 samples, 0.04%)</title><rect x="807.3" y="1395.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="810.3" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection.newConnectTimer (2 samples, 0.02%)</title><rect x="807.4" y="1379.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="810.4" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.pollFirst (3 samples, 0.04%)</title><rect x="808.1" y="1587.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="811.1" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.unlink (2 samples, 0.02%)</title><rect x="808.2" y="1571.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="811.2" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.unlinkLast (2 samples, 0.02%)</title><rect x="808.2" y="1555.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="811.2" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.updateTail (2 samples, 0.02%)</title><rect x="808.2" y="1539.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="811.2" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (2 samples, 0.02%)</title><rect x="808.5" y="1587.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="811.5" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$276/340631796.run (2 samples, 0.02%)</title><rect x="808.5" y="1571.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="811.5" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.requestMoreBody (2 samples, 0.02%)</title><rect x="808.5" y="1555.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="811.5" y="1566.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.hasOutgoing (3 samples, 0.04%)</title><rect x="808.8" y="1603.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="811.8" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.isEmpty (3 samples, 0.04%)</title><rect x="808.8" y="1587.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="811.8" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.peekFirst (3 samples, 0.04%)</title><rect x="808.8" y="1571.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="811.8" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (133 samples, 1.58%)</title><rect x="809.2" y="1603.0" width="18.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="812.2" y="1614.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (133 samples, 1.58%)</title><rect x="809.2" y="1587.0" width="18.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="812.2" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onNext (133 samples, 1.58%)</title><rect x="809.2" y="1571.0" width="18.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="812.2" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.tryFlushCurrent (133 samples, 1.58%)</title><rect x="809.2" y="1555.0" width="18.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="812.2" y="1566.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$236/1793012286.run (9 samples, 0.11%)</title><rect x="809.4" y="1539.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="812.4" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.requestMore (9 samples, 0.11%)</title><rect x="809.4" y="1523.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="812.4" y="1534.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.requestMore (8 samples, 0.10%)</title><rect x="809.4" y="1507.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="812.4" y="1518.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$Http1WriteSubscription.request (2 samples, 0.02%)</title><rect x="810.1" y="1491.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="813.1" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.writeAvailable (120 samples, 1.43%)</title><rect x="810.6" y="1539.0" width="16.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="813.6" y="1550.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (116 samples, 1.38%)</title><rect x="810.6" y="1523.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="813.6" y="1534.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (116 samples, 1.38%)</title><rect x="810.6" y="1507.0" width="16.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="813.6" y="1518.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (116 samples, 1.38%)</title><rect x="810.6" y="1491.0" width="16.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="813.6" y="1502.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (116 samples, 1.38%)</title><rect x="810.6" y="1475.0" width="16.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="813.6" y="1486.0"></text>
</g>
<g>
<title>sun/nio/ch/IOVecWrapper.get (5 samples, 0.06%)</title><rect x="810.6" y="1459.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="813.6" y="1470.0"></text>
</g>
<g>
<title>sun/nio/ch/IOVecWrapper.&lt;init&gt; (4 samples, 0.05%)</title><rect x="810.8" y="1443.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="813.8" y="1454.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (111 samples, 1.32%)</title><rect x="811.3" y="1459.0" width="15.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="814.3" y="1470.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (111 samples, 1.32%)</title><rect x="811.3" y="1443.0" width="15.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="814.3" y="1454.0"></text>
</g>
<g>
<title>writev (109 samples, 1.30%)</title><rect x="811.6" y="1427.0" width="15.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="814.6" y="1438.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (105 samples, 1.25%)</title><rect x="812.2" y="1411.0" width="14.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="815.2" y="1422.0"></text>
</g>
<g>
<title>do_syscall_64 (105 samples, 1.25%)</title><rect x="812.2" y="1395.0" width="14.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="815.2" y="1406.0"></text>
</g>
<g>
<title>__x64_sys_writev (103 samples, 1.23%)</title><rect x="812.3" y="1379.0" width="14.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="815.3" y="1390.0"></text>
</g>
<g>
<title>do_writev (103 samples, 1.23%)</title><rect x="812.3" y="1363.0" width="14.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="815.3" y="1374.0"></text>
</g>
<g>
<title>__fdget_pos (2 samples, 0.02%)</title><rect x="812.6" y="1347.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="815.6" y="1358.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.02%)</title><rect x="812.6" y="1331.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="815.6" y="1342.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.02%)</title><rect x="812.6" y="1315.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="815.6" y="1326.0"></text>
</g>
<g>
<title>vfs_writev (98 samples, 1.17%)</title><rect x="813.0" y="1347.0" width="13.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="816.0" y="1358.0"></text>
</g>
<g>
<title>do_iter_write (96 samples, 1.14%)</title><rect x="813.0" y="1331.0" width="13.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="816.0" y="1342.0"></text>
</g>
<g>
<title>do_iter_readv_writev (92 samples, 1.10%)</title><rect x="813.0" y="1315.0" width="12.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="816.0" y="1326.0"></text>
</g>
<g>
<title>sock_write_iter (92 samples, 1.10%)</title><rect x="813.0" y="1299.0" width="12.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="816.0" y="1310.0"></text>
</g>
<g>
<title>sock_sendmsg (91 samples, 1.08%)</title><rect x="813.2" y="1283.0" width="12.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="816.2" y="1294.0"></text>
</g>
<g>
<title>inet6_sendmsg (88 samples, 1.05%)</title><rect x="813.4" y="1267.0" width="12.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="816.4" y="1278.0"></text>
</g>
<g>
<title>tcp_sendmsg (88 samples, 1.05%)</title><rect x="813.4" y="1251.0" width="12.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="816.4" y="1262.0"></text>
</g>
<g>
<title>release_sock (6 samples, 0.07%)</title><rect x="813.7" y="1235.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="816.7" y="1246.0"></text>
</g>
<g>
<title>__release_sock (6 samples, 0.07%)</title><rect x="813.7" y="1219.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="816.7" y="1230.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (6 samples, 0.07%)</title><rect x="813.7" y="1203.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="816.7" y="1214.0"></text>
</g>
<g>
<title>tcp_rcv_established (6 samples, 0.07%)</title><rect x="813.7" y="1187.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="816.7" y="1198.0"></text>
</g>
<g>
<title>__tcp_ack_snd_check (2 samples, 0.02%)</title><rect x="813.7" y="1171.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="816.7" y="1182.0"></text>
</g>
<g>
<title>tcp_send_ack (2 samples, 0.02%)</title><rect x="813.7" y="1155.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="816.7" y="1166.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (2 samples, 0.02%)</title><rect x="813.7" y="1139.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="816.7" y="1150.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (2 samples, 0.02%)</title><rect x="813.7" y="1123.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="816.7" y="1134.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.02%)</title><rect x="813.7" y="1107.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="816.7" y="1118.0"></text>
</g>
<g>
<title>__ip_queue_xmit (2 samples, 0.02%)</title><rect x="813.7" y="1091.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="816.7" y="1102.0"></text>
</g>
<g>
<title>ip_local_out (2 samples, 0.02%)</title><rect x="813.7" y="1075.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="816.7" y="1086.0"></text>
</g>
<g>
<title>ip_output (2 samples, 0.02%)</title><rect x="813.7" y="1059.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="816.7" y="1070.0"></text>
</g>
<g>
<title>ip_finish_output (2 samples, 0.02%)</title><rect x="813.7" y="1043.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="816.7" y="1054.0"></text>
</g>
<g>
<title>__ip_finish_output (2 samples, 0.02%)</title><rect x="813.7" y="1027.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="816.7" y="1038.0"></text>
</g>
<g>
<title>ip_finish_output2 (2 samples, 0.02%)</title><rect x="813.7" y="1011.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="816.7" y="1022.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.02%)</title><rect x="813.7" y="995.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="816.7" y="1006.0"></text>
</g>
<g>
<title>do_softirq.part.0 (2 samples, 0.02%)</title><rect x="813.7" y="979.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="816.7" y="990.0"></text>
</g>
<g>
<title>do_softirq_own_stack (2 samples, 0.02%)</title><rect x="813.7" y="963.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="816.7" y="974.0"></text>
</g>
<g>
<title>__softirqentry_text_start (2 samples, 0.02%)</title><rect x="813.7" y="947.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="816.7" y="958.0"></text>
</g>
<g>
<title>net_rx_action (2 samples, 0.02%)</title><rect x="813.7" y="931.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="816.7" y="942.0"></text>
</g>
<g>
<title>tcp_ack (3 samples, 0.04%)</title><rect x="814.0" y="1171.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="817.0" y="1182.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (79 samples, 0.94%)</title><rect x="814.7" y="1235.0" width="11.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="817.7" y="1246.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (9 samples, 0.11%)</title><rect x="815.7" y="1219.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="818.7" y="1230.0"></text>
</g>
<g>
<title>__alloc_skb (8 samples, 0.10%)</title><rect x="815.8" y="1203.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="818.8" y="1214.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (2 samples, 0.02%)</title><rect x="815.8" y="1187.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="818.8" y="1198.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (3 samples, 0.04%)</title><rect x="816.1" y="1187.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="819.1" y="1198.0"></text>
</g>
<g>
<title>memset (2 samples, 0.02%)</title><rect x="816.7" y="1187.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="819.7" y="1198.0"></text>
</g>
<g>
<title>tcp_push (61 samples, 0.73%)</title><rect x="816.9" y="1219.0" width="8.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="819.9" y="1230.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (61 samples, 0.73%)</title><rect x="816.9" y="1203.0" width="8.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="819.9" y="1214.0"></text>
</g>
<g>
<title>tcp_write_xmit (60 samples, 0.71%)</title><rect x="817.1" y="1187.0" width="8.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="820.1" y="1198.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (50 samples, 0.60%)</title><rect x="817.1" y="1171.0" width="7.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="820.1" y="1182.0"></text>
</g>
<g>
<title>ip_queue_xmit (45 samples, 0.54%)</title><rect x="817.4" y="1155.0" width="6.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="820.4" y="1166.0"></text>
</g>
<g>
<title>__ip_queue_xmit (45 samples, 0.54%)</title><rect x="817.4" y="1139.0" width="6.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="820.4" y="1150.0"></text>
</g>
<g>
<title>ip_local_out (44 samples, 0.52%)</title><rect x="817.4" y="1123.0" width="6.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="820.4" y="1134.0"></text>
</g>
<g>
<title>ip_output (44 samples, 0.52%)</title><rect x="817.4" y="1107.0" width="6.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="820.4" y="1118.0"></text>
</g>
<g>
<title>ip_finish_output (44 samples, 0.52%)</title><rect x="817.4" y="1091.0" width="6.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="820.4" y="1102.0"></text>
</g>
<g>
<title>__ip_finish_output (44 samples, 0.52%)</title><rect x="817.4" y="1075.0" width="6.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="820.4" y="1086.0"></text>
</g>
<g>
<title>ip_finish_output2 (44 samples, 0.52%)</title><rect x="817.4" y="1059.0" width="6.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="820.4" y="1070.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (35 samples, 0.42%)</title><rect x="817.6" y="1043.0" width="5.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="820.6" y="1054.0"></text>
</g>
<g>
<title>do_softirq.part.0 (35 samples, 0.42%)</title><rect x="817.6" y="1027.0" width="5.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="820.6" y="1038.0"></text>
</g>
<g>
<title>do_softirq_own_stack (35 samples, 0.42%)</title><rect x="817.6" y="1011.0" width="5.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="820.6" y="1022.0"></text>
</g>
<g>
<title>__softirqentry_text_start (35 samples, 0.42%)</title><rect x="817.6" y="995.0" width="5.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="820.6" y="1006.0"></text>
</g>
<g>
<title>net_rx_action (34 samples, 0.40%)</title><rect x="817.8" y="979.0" width="4.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="820.8" y="990.0"></text>
</g>
<g>
<title>process_backlog (31 samples, 0.37%)</title><rect x="818.2" y="963.0" width="4.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="821.2" y="974.0"></text>
</g>
<g>
<title>__netif_receive_skb (29 samples, 0.35%)</title><rect x="818.5" y="947.0" width="4.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="821.5" y="958.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (29 samples, 0.35%)</title><rect x="818.5" y="931.0" width="4.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="821.5" y="942.0"></text>
</g>
<g>
<title>ip_rcv (28 samples, 0.33%)</title><rect x="818.6" y="915.0" width="4.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="821.6" y="926.0"></text>
</g>
<g>
<title>ip_rcv_finish (27 samples, 0.32%)</title><rect x="818.8" y="899.0" width="3.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="821.8" y="910.0"></text>
</g>
<g>
<title>ip_local_deliver (27 samples, 0.32%)</title><rect x="818.8" y="883.0" width="3.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="821.8" y="894.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (27 samples, 0.32%)</title><rect x="818.8" y="867.0" width="3.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="821.8" y="878.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (27 samples, 0.32%)</title><rect x="818.8" y="851.0" width="3.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="821.8" y="862.0"></text>
</g>
<g>
<title>tcp_v4_rcv (27 samples, 0.32%)</title><rect x="818.8" y="835.0" width="3.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="821.8" y="846.0"></text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.02%)</title><rect x="818.9" y="819.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="821.9" y="830.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (21 samples, 0.25%)</title><rect x="819.5" y="819.0" width="2.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="822.5" y="830.0"></text>
</g>
<g>
<title>tcp_rcv_established (20 samples, 0.24%)</title><rect x="819.6" y="803.0" width="2.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="822.6" y="814.0"></text>
</g>
<g>
<title>__tcp_ack_snd_check (5 samples, 0.06%)</title><rect x="819.8" y="787.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="822.8" y="798.0"></text>
</g>
<g>
<title>tcp_send_ack (2 samples, 0.02%)</title><rect x="819.8" y="771.0" width="0.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="822.8" y="782.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (2 samples, 0.02%)</title><rect x="819.8" y="755.0" width="0.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="822.8" y="766.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (3 samples, 0.04%)</title><rect x="820.0" y="771.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="823.0" y="782.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.04%)</title><rect x="820.0" y="755.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="823.0" y="766.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.04%)</title><rect x="820.0" y="739.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="823.0" y="750.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="820.0" y="723.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="823.0" y="734.0"></text>
</g>
<g>
<title>tcp_data_queue (10 samples, 0.12%)</title><rect x="820.5" y="787.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="823.5" y="798.0"></text>
</g>
<g>
<title>tcp_data_ready (7 samples, 0.08%)</title><rect x="820.9" y="771.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="823.9" y="782.0"></text>
</g>
<g>
<title>sock_def_readable (7 samples, 0.08%)</title><rect x="820.9" y="755.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="823.9" y="766.0"></text>
</g>
<g>
<title>__wake_up_sync_key (7 samples, 0.08%)</title><rect x="820.9" y="739.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="823.9" y="750.0"></text>
</g>
<g>
<title>__wake_up_common_lock (7 samples, 0.08%)</title><rect x="820.9" y="723.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="823.9" y="734.0"></text>
</g>
<g>
<title>__lock_text_start (7 samples, 0.08%)</title><rect x="820.9" y="707.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="823.9" y="718.0"></text>
</g>
<g>
<title>tcp_data_ready (4 samples, 0.05%)</title><rect x="821.9" y="787.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="824.9" y="798.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.04%)</title><rect x="822.0" y="771.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="825.0" y="782.0"></text>
</g>
<g>
<title>__wake_up_sync_key (3 samples, 0.04%)</title><rect x="822.0" y="755.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="825.0" y="766.0"></text>
</g>
<g>
<title>__wake_up_common_lock (3 samples, 0.04%)</title><rect x="822.0" y="739.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="825.0" y="750.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="822.0" y="723.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="825.0" y="734.0"></text>
</g>
<g>
<title>dev_queue_xmit (6 samples, 0.07%)</title><rect x="822.6" y="1043.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="825.6" y="1054.0"></text>
</g>
<g>
<title>__dev_queue_xmit (6 samples, 0.07%)</title><rect x="822.6" y="1027.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="825.6" y="1038.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (4 samples, 0.05%)</title><rect x="822.7" y="1011.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="825.7" y="1022.0"></text>
</g>
<g>
<title>loopback_xmit (4 samples, 0.05%)</title><rect x="822.7" y="995.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="825.7" y="1006.0"></text>
</g>
<g>
<title>netif_rx (2 samples, 0.02%)</title><rect x="822.8" y="979.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="825.8" y="990.0"></text>
</g>
<g>
<title>netif_rx_internal (2 samples, 0.02%)</title><rect x="822.8" y="963.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="825.8" y="974.0"></text>
</g>
<g>
<title>enqueue_to_backlog (2 samples, 0.02%)</title><rect x="822.8" y="947.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="825.8" y="958.0"></text>
</g>
<g>
<title>skb_clone (3 samples, 0.04%)</title><rect x="823.7" y="1155.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="826.7" y="1166.0"></text>
</g>
<g>
<title>__skb_clone (2 samples, 0.02%)</title><rect x="823.8" y="1139.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="826.8" y="1150.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (7 samples, 0.08%)</title><rect x="824.1" y="1171.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="827.1" y="1182.0"></text>
</g>
<g>
<title>tcp_rearm_rto (6 samples, 0.07%)</title><rect x="824.3" y="1155.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="827.3" y="1166.0"></text>
</g>
<g>
<title>sk_reset_timer (6 samples, 0.07%)</title><rect x="824.3" y="1139.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="827.3" y="1150.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.05%)</title><rect x="824.5" y="1123.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="827.5" y="1134.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="824.5" y="1107.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="827.5" y="1118.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.04%)</title><rect x="825.1" y="1171.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="828.1" y="1182.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.04%)</title><rect x="825.1" y="1155.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="828.1" y="1166.0"></text>
</g>
<g>
<title>tcp_send_mss (2 samples, 0.02%)</title><rect x="825.5" y="1219.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="828.5" y="1230.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.02%)</title><rect x="825.5" y="1203.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="828.5" y="1214.0"></text>
</g>
<g>
<title>rw_verify_area (3 samples, 0.04%)</title><rect x="826.1" y="1315.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="829.1" y="1326.0"></text>
</g>
<g>
<title>security_file_permission (2 samples, 0.02%)</title><rect x="826.2" y="1299.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="829.2" y="1310.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (4 samples, 0.05%)</title><rect x="826.9" y="1523.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="829.9" y="1534.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$ListItr.next (3 samples, 0.04%)</title><rect x="827.1" y="1507.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="830.1" y="1518.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$List12.get (2 samples, 0.02%)</title><rect x="827.2" y="1491.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="830.2" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.tryDecrement (2 samples, 0.02%)</title><rect x="827.5" y="1539.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="830.5" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (568 samples, 6.76%)</title><rect x="828.2" y="1779.0" width="79.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="831.2" y="1790.0">jdk/inter..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (565 samples, 6.73%)</title><rect x="828.6" y="1763.0" width="79.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="831.6" y="1774.0">jdk/inter..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (258 samples, 3.07%)</title><rect x="828.6" y="1747.0" width="36.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="831.6" y="1758.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$189/2011462796.run (258 samples, 3.07%)</title><rect x="828.6" y="1731.0" width="36.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="831.6" y="1742.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (258 samples, 3.07%)</title><rect x="828.6" y="1715.0" width="36.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="831.6" y="1726.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.checkRequestMore (19 samples, 0.23%)</title><rect x="829.2" y="1699.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="832.2" y="1710.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.requestMore (15 samples, 0.18%)</title><rect x="829.3" y="1683.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="832.3" y="1694.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (15 samples, 0.18%)</title><rect x="829.3" y="1667.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="832.3" y="1678.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (15 samples, 0.18%)</title><rect x="829.3" y="1651.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.3" y="1662.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/913190639.linkToTargetMethod (3 samples, 0.04%)</title><rect x="829.7" y="1635.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="832.7" y="1646.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1740035246.invoke (3 samples, 0.04%)</title><rect x="829.7" y="1619.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="832.7" y="1630.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.02%)</title><rect x="829.7" y="1603.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="832.7" y="1614.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (2 samples, 0.02%)</title><rect x="829.7" y="1587.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="832.7" y="1598.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="829.7" y="1571.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="832.7" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (9 samples, 0.11%)</title><rect x="830.2" y="1635.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="833.2" y="1646.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.02%)</title><rect x="830.2" y="1619.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="833.2" y="1630.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.02%)</title><rect x="830.2" y="1603.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="833.2" y="1614.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$232/1105336468.get$Lambda (2 samples, 0.02%)</title><rect x="830.2" y="1587.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="833.2" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.resumeEvent (7 samples, 0.08%)</title><rect x="830.4" y="1619.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="833.4" y="1630.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (6 samples, 0.07%)</title><rect x="830.6" y="1603.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="833.6" y="1614.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (6 samples, 0.07%)</title><rect x="830.6" y="1587.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="833.6" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (5 samples, 0.06%)</title><rect x="830.7" y="1571.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="833.7" y="1582.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (3 samples, 0.04%)</title><rect x="831.0" y="1555.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="834.0" y="1566.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (3 samples, 0.04%)</title><rect x="831.0" y="1539.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="834.0" y="1550.0"></text>
</g>
<g>
<title>__write (3 samples, 0.04%)</title><rect x="831.0" y="1523.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="834.0" y="1534.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="831.0" y="1507.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="834.0" y="1518.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.04%)</title><rect x="831.0" y="1491.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="834.0" y="1502.0"></text>
</g>
<g>
<title>__x64_sys_write (3 samples, 0.04%)</title><rect x="831.0" y="1475.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="834.0" y="1486.0"></text>
</g>
<g>
<title>ksys_write (3 samples, 0.04%)</title><rect x="831.0" y="1459.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="834.0" y="1470.0"></text>
</g>
<g>
<title>vfs_write (3 samples, 0.04%)</title><rect x="831.0" y="1443.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="834.0" y="1454.0"></text>
</g>
<g>
<title>__vfs_write (3 samples, 0.04%)</title><rect x="831.0" y="1427.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="834.0" y="1438.0"></text>
</g>
<g>
<title>new_sync_write (3 samples, 0.04%)</title><rect x="831.0" y="1411.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="834.0" y="1422.0"></text>
</g>
<g>
<title>pipe_write (2 samples, 0.02%)</title><rect x="831.1" y="1395.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="834.1" y="1406.0"></text>
</g>
<g>
<title>__wake_up_sync_key (2 samples, 0.02%)</title><rect x="831.1" y="1379.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="834.1" y="1390.0"></text>
</g>
<g>
<title>__wake_up_common_lock (2 samples, 0.02%)</title><rect x="831.1" y="1363.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="834.1" y="1374.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.02%)</title><rect x="831.1" y="1347.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="834.1" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.hasDemand (3 samples, 0.04%)</title><rect x="831.4" y="1683.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="834.4" y="1694.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.tryAsyncReceive (233 samples, 2.77%)</title><rect x="832.1" y="1699.0" width="32.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="835.1" y="1710.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (231 samples, 2.75%)</title><rect x="832.4" y="1683.0" width="32.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="835.4" y="1694.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (230 samples, 2.74%)</title><rect x="832.5" y="1667.0" width="32.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="835.5" y="1678.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (230 samples, 2.74%)</title><rect x="832.5" y="1651.0" width="32.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="835.5" y="1662.0">jd..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (155 samples, 1.85%)</title><rect x="833.0" y="1635.0" width="21.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="836.0" y="1646.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (2 samples, 0.02%)</title><rect x="833.0" y="1619.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="836.0" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (153 samples, 1.82%)</title><rect x="833.2" y="1619.0" width="21.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="836.2" y="1630.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (152 samples, 1.81%)</title><rect x="833.4" y="1603.0" width="21.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="836.4" y="1614.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (151 samples, 1.80%)</title><rect x="833.5" y="1587.0" width="21.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="836.5" y="1598.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (151 samples, 1.80%)</title><rect x="833.5" y="1571.0" width="21.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="836.5" y="1582.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (151 samples, 1.80%)</title><rect x="833.5" y="1555.0" width="21.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="836.5" y="1566.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (151 samples, 1.80%)</title><rect x="833.5" y="1539.0" width="21.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="836.5" y="1550.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (9 samples, 0.11%)</title><rect x="833.5" y="1523.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="836.5" y="1534.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (9 samples, 0.11%)</title><rect x="833.5" y="1507.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="836.5" y="1518.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (9 samples, 0.11%)</title><rect x="833.5" y="1491.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="836.5" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (130 samples, 1.55%)</title><rect x="834.8" y="1523.0" width="18.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="837.8" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (130 samples, 1.55%)</title><rect x="834.8" y="1507.0" width="18.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="837.8" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (124 samples, 1.48%)</title><rect x="834.8" y="1491.0" width="17.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="837.8" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$125/2047461627.apply (100 samples, 1.19%)</title><rect x="835.2" y="1475.0" width="14.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="838.2" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$4 (99 samples, 1.18%)</title><rect x="835.4" y="1459.0" width="13.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="838.4" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.readBodyAsync (97 samples, 1.16%)</title><rect x="835.6" y="1443.0" width="13.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="838.6" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.readBodyAsync (95 samples, 1.13%)</title><rect x="835.9" y="1427.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="838.9" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readBody (64 samples, 0.76%)</title><rect x="836.1" y="1411.0" width="8.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="839.1" y="1422.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2138462031.linkToTargetMethod (2 samples, 0.02%)</title><rect x="836.5" y="1395.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="839.5" y="1406.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/2008438317.invokeStatic (2 samples, 0.02%)</title><rect x="836.5" y="1379.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="839.5" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$246/290404521.get$Lambda (2 samples, 0.02%)</title><rect x="836.5" y="1363.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="839.5" y="1374.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValueAsLong (6 samples, 0.07%)</title><rect x="836.8" y="1395.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="839.8" y="1406.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (2 samples, 0.02%)</title><rect x="836.8" y="1379.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="839.8" y="1390.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.02%)</title><rect x="836.8" y="1363.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="839.8" y="1374.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (2 samples, 0.02%)</title><rect x="836.8" y="1347.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="839.8" y="1358.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (2 samples, 0.02%)</title><rect x="836.8" y="1331.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="839.8" y="1342.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (2 samples, 0.02%)</title><rect x="836.8" y="1315.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="839.8" y="1326.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.02%)</title><rect x="836.8" y="1299.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="839.8" y="1310.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.02%)</title><rect x="836.8" y="1283.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="839.8" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/LongPipeline.findFirst (2 samples, 0.02%)</title><rect x="837.2" y="1379.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="840.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.02%)</title><rect x="837.6" y="1395.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="840.6" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.02%)</title><rect x="837.6" y="1379.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="840.6" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.02%)</title><rect x="837.6" y="1363.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="840.6" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.&lt;init&gt; (2 samples, 0.02%)</title><rect x="837.6" y="1347.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="840.6" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.&lt;init&gt; (2 samples, 0.02%)</title><rect x="837.6" y="1331.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="840.6" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (44 samples, 0.52%)</title><rect x="838.4" y="1395.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="841.4" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$246/290404521.run (43 samples, 0.51%)</title><rect x="838.6" y="1379.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="841.6" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$3 (42 samples, 0.50%)</title><rect x="838.7" y="1363.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="841.7" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (6 samples, 0.07%)</title><rect x="839.0" y="1347.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="842.0" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (6 samples, 0.07%)</title><rect x="839.0" y="1331.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="842.0" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$247/1389791625.get$Lambda (2 samples, 0.02%)</title><rect x="839.0" y="1315.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="842.0" y="1326.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$248/1362574159.get$Lambda (3 samples, 0.04%)</title><rect x="839.3" y="1315.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="842.3" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.05%)</title><rect x="839.8" y="1347.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="842.8" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.04%)</title><rect x="840.0" y="1331.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="843.0" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.subscribe (2 samples, 0.02%)</title><rect x="840.4" y="1347.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="843.4" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.start (2 samples, 0.02%)</title><rect x="840.7" y="1347.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="843.7" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.unreference (2 samples, 0.02%)</title><rect x="841.0" y="1347.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="844.0" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.addTrailingOperation (8 samples, 0.10%)</title><rect x="841.3" y="1347.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="844.3" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations.add (8 samples, 0.10%)</title><rect x="841.3" y="1331.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="844.3" y="1342.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.put (6 samples, 0.07%)</title><rect x="841.5" y="1315.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="844.5" y="1326.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.hash (5 samples, 0.06%)</title><rect x="841.7" y="1299.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="844.7" y="1310.0"></text>
</g>
<g>
<title>java/lang/System.identityHashCode (5 samples, 0.06%)</title><rect x="841.7" y="1283.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="844.7" y="1294.0"></text>
</g>
<g>
<title>JVM_IHashCode (2 samples, 0.02%)</title><rect x="842.0" y="1267.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="845.0" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent.&lt;init&gt; (6 samples, 0.07%)</title><rect x="842.4" y="1347.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="845.4" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (6 samples, 0.07%)</title><rect x="842.4" y="1331.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="845.4" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/371351659.invoke (6 samples, 0.07%)</title><rect x="842.4" y="1315.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="845.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (5 samples, 0.06%)</title><rect x="842.4" y="1299.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="845.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.02%)</title><rect x="842.4" y="1283.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="845.4" y="1294.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixCoder (2 samples, 0.02%)</title><rect x="842.7" y="1283.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="845.7" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent.getBodyParser (10 samples, 0.12%)</title><rect x="843.2" y="1347.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="846.2" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.&lt;init&gt; (10 samples, 0.12%)</title><rect x="843.2" y="1331.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="846.2" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (9 samples, 0.11%)</title><rect x="843.2" y="1315.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="846.2" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/371351659.invoke (8 samples, 0.10%)</title><rect x="843.4" y="1299.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="846.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (6 samples, 0.07%)</title><rect x="843.4" y="1283.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="846.4" y="1294.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (3 samples, 0.04%)</title><rect x="843.4" y="1267.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="846.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.02%)</title><rect x="843.8" y="1267.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="846.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.02%)</title><rect x="843.8" y="1251.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="846.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1072591677.invoke (2 samples, 0.02%)</title><rect x="844.2" y="1283.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="847.2" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.02%)</title><rect x="844.2" y="1267.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="847.2" y="1278.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.02%)</title><rect x="844.2" y="1251.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="847.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.02%)</title><rect x="844.2" y="1235.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="847.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.02%)</title><rect x="844.2" y="1219.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="847.2" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.getBody (2 samples, 0.02%)</title><rect x="844.6" y="1395.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="847.6" y="1406.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/handlers/GetBodyHandler.apply (30 samples, 0.36%)</title><rect x="845.0" y="1411.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="848.0" y="1422.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.05%)</title><rect x="845.2" y="1395.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="848.2" y="1406.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValueAsLong (17 samples, 0.20%)</title><rect x="845.8" y="1395.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="848.8" y="1406.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.02%)</title><rect x="845.8" y="1379.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="848.8" y="1390.0"></text>
</g>
<g>
<title>java/util/List.spliterator (2 samples, 0.02%)</title><rect x="845.8" y="1363.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="848.8" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/LongPipeline.findFirst (12 samples, 0.14%)</title><rect x="846.0" y="1379.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="849.0" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (12 samples, 0.14%)</title><rect x="846.0" y="1363.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="849.0" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.sourceSpliterator (3 samples, 0.04%)</title><rect x="846.0" y="1347.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="849.0" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (8 samples, 0.10%)</title><rect x="846.5" y="1347.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="849.5" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (8 samples, 0.10%)</title><rect x="846.5" y="1331.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="849.5" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.04%)</title><rect x="846.5" y="1315.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="849.5" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (4 samples, 0.05%)</title><rect x="846.9" y="1315.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="849.9" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (3 samples, 0.04%)</title><rect x="846.9" y="1299.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="849.9" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.&lt;init&gt; (3 samples, 0.04%)</title><rect x="846.9" y="1283.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="849.9" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (3 samples, 0.04%)</title><rect x="846.9" y="1267.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="849.9" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.mapToLong (3 samples, 0.04%)</title><rect x="847.7" y="1379.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="850.7" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$5.&lt;init&gt; (3 samples, 0.04%)</title><rect x="847.7" y="1363.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="850.7" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/LongPipeline$StatelessOp.&lt;init&gt; (3 samples, 0.04%)</title><rect x="847.7" y="1347.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="850.7" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/LongPipeline.&lt;init&gt; (2 samples, 0.02%)</title><rect x="847.9" y="1331.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="850.9" y="1342.0"></text>
</g>
<g>
<title>java/net/http/HttpResponse$BodySubscribers.ofByteArray (5 samples, 0.06%)</title><rect x="848.3" y="1395.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="851.3" y="1406.0"></text>
</g>
<g>
<title>Runtime1::new_instance(JavaThread*, Klass*) (5 samples, 0.06%)</title><rect x="848.3" y="1379.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="851.3" y="1390.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (5 samples, 0.06%)</title><rect x="848.3" y="1363.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="851.3" y="1374.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.02%)</title><rect x="848.7" y="1347.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="851.7" y="1358.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.02%)</title><rect x="848.7" y="1331.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="851.7" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$215/1600469781.apply (21 samples, 0.25%)</title><rect x="849.3" y="1475.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="852.3" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsyncImpl$6 (20 samples, 0.24%)</title><rect x="849.4" y="1459.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="852.4" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseFilters (17 samples, 0.20%)</title><rect x="849.4" y="1443.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="852.4" y="1454.0"></text>
</g>
<g>
<title>java/util/LinkedList$DescendingIterator.hasNext (2 samples, 0.02%)</title><rect x="850.0" y="1427.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="853.0" y="1438.0"></text>
</g>
<g>
<title>java/util/LinkedList.descendingIterator (3 samples, 0.04%)</title><rect x="850.4" y="1427.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="853.4" y="1438.0"></text>
</g>
<g>
<title>java/util/LinkedList$DescendingIterator.&lt;init&gt; (2 samples, 0.02%)</title><rect x="850.5" y="1411.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="853.5" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.response (4 samples, 0.05%)</title><rect x="850.8" y="1427.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="853.8" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.getCache (4 samples, 0.05%)</title><rect x="850.8" y="1411.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="853.8" y="1422.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (2 samples, 0.02%)</title><rect x="851.0" y="1395.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="854.0" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/RedirectFilter.response (2 samples, 0.02%)</title><rect x="851.4" y="1427.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="854.4" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (3 samples, 0.04%)</title><rect x="851.8" y="1443.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="854.8" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.02%)</title><rect x="851.8" y="1427.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.8" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (2 samples, 0.02%)</title><rect x="851.8" y="1411.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="854.8" y="1422.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.02%)</title><rect x="851.8" y="1395.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="854.8" y="1406.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.02%)</title><rect x="851.8" y="1379.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="854.8" y="1390.0"></text>
</g>
<g>
<title>java/lang/Class.cast (2 samples, 0.02%)</title><rect x="851.8" y="1363.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="854.8" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (4 samples, 0.05%)</title><rect x="852.2" y="1491.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="855.2" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (4 samples, 0.05%)</title><rect x="852.2" y="1475.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="855.2" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$216/356642770.apply (4 samples, 0.05%)</title><rect x="852.2" y="1459.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="855.2" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsyncImpl$7 (3 samples, 0.04%)</title><rect x="852.4" y="1443.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="855.4" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (3 samples, 0.04%)</title><rect x="852.4" y="1427.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="855.4" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.02%)</title><rect x="852.4" y="1411.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="855.4" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (2 samples, 0.02%)</title><rect x="852.4" y="1395.0" width="0.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="855.4" y="1406.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.02%)</title><rect x="852.4" y="1379.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="855.4" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$238/545921687.apply (12 samples, 0.14%)</title><rect x="853.1" y="1523.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="856.1" y="1534.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readHeadersAsync$0 (12 samples, 0.14%)</title><rect x="853.1" y="1507.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="856.1" y="1518.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.unsubscribe (2 samples, 0.02%)</title><rect x="853.5" y="1491.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="856.5" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Response.&lt;init&gt; (5 samples, 0.06%)</title><rect x="853.9" y="1491.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="856.9" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Response.&lt;init&gt; (5 samples, 0.06%)</title><rect x="853.9" y="1475.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="856.9" y="1486.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.getLocalAddress (3 samples, 0.04%)</title><rect x="854.2" y="1459.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="857.2" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.parse (68 samples, 0.81%)</title><rect x="854.7" y="1635.0" width="9.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="857.7" y="1646.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.maybeStartHeaders (5 samples, 0.06%)</title><rect x="855.2" y="1619.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="858.2" y="1630.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.04%)</title><rect x="855.4" y="1603.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="858.4" y="1614.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.04%)</title><rect x="855.4" y="1587.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="858.4" y="1598.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.02%)</title><rect x="855.4" y="1571.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="858.4" y="1582.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.02%)</title><rect x="855.4" y="1555.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="858.4" y="1566.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeHeader (12 samples, 0.14%)</title><rect x="855.9" y="1619.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="858.9" y="1630.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.05%)</title><rect x="856.4" y="1603.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="859.4" y="1614.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.05%)</title><rect x="856.4" y="1587.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="859.4" y="1598.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.05%)</title><rect x="856.4" y="1571.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="859.4" y="1582.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (2 samples, 0.02%)</title><rect x="856.7" y="1555.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="859.7" y="1566.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.04%)</title><rect x="857.0" y="1603.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="860.0" y="1614.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (2 samples, 0.02%)</title><rect x="857.0" y="1587.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="860.0" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeStatusLine (4 samples, 0.05%)</title><rect x="857.6" y="1619.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="860.6" y="1630.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.02%)</title><rect x="857.6" y="1603.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="860.6" y="1614.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.02%)</title><rect x="857.6" y="1587.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="860.6" y="1598.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.02%)</title><rect x="857.6" y="1571.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="860.6" y="1582.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.02%)</title><rect x="857.8" y="1603.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="860.8" y="1614.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (2 samples, 0.02%)</title><rect x="857.8" y="1587.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="860.8" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readStatusLineFeed (4 samples, 0.05%)</title><rect x="858.1" y="1619.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="861.1" y="1630.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.02%)</title><rect x="858.4" y="1603.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="861.4" y="1614.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.02%)</title><rect x="858.4" y="1587.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="861.4" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.resumeOrEndHeaders (10 samples, 0.12%)</title><rect x="858.7" y="1619.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="861.7" y="1630.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (9 samples, 0.11%)</title><rect x="858.8" y="1603.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="861.8" y="1614.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (9 samples, 0.11%)</title><rect x="858.8" y="1587.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="861.8" y="1598.0"></text>
</g>
<g>
<title>java/util/HashMap.forEach (8 samples, 0.10%)</title><rect x="859.0" y="1571.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="862.0" y="1582.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$106/848120636.accept (8 samples, 0.10%)</title><rect x="859.0" y="1555.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="862.0" y="1566.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (8 samples, 0.10%)</title><rect x="859.0" y="1539.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="862.0" y="1550.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (4 samples, 0.05%)</title><rect x="859.1" y="1523.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="862.1" y="1534.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$107/1814310740.accept (4 samples, 0.05%)</title><rect x="859.1" y="1507.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="862.1" y="1518.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (3 samples, 0.04%)</title><rect x="859.2" y="1491.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="862.2" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$27/1789550256.test (2 samples, 0.02%)</title><rect x="859.4" y="1475.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="862.4" y="1486.0"></text>
</g>
<g>
<title>java/util/List.copyOf (2 samples, 0.02%)</title><rect x="859.7" y="1523.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="862.7" y="1534.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections.listCopy (2 samples, 0.02%)</title><rect x="859.7" y="1507.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="862.7" y="1518.0"></text>
</g>
<g>
<title>java/util/List.of (2 samples, 0.02%)</title><rect x="859.7" y="1491.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="862.7" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.resumeOrSecondCR (30 samples, 0.36%)</title><rect x="860.1" y="1619.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="863.1" y="1630.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="860.6" y="1603.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="863.6" y="1614.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.addHeaderFromString (23 samples, 0.27%)</title><rect x="860.9" y="1603.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="863.9" y="1614.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="861.1" y="1587.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="864.1" y="1598.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.02%)</title><rect x="861.1" y="1571.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="864.1" y="1582.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.02%)</title><rect x="861.1" y="1555.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="864.1" y="1566.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.04%)</title><rect x="861.3" y="1587.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="864.3" y="1598.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.02%)</title><rect x="861.5" y="1571.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="864.5" y="1582.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.02%)</title><rect x="861.5" y="1555.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="864.5" y="1566.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (6 samples, 0.07%)</title><rect x="861.8" y="1587.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="864.8" y="1598.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toLowerCase (6 samples, 0.07%)</title><rect x="861.8" y="1571.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="864.8" y="1582.0"></text>
</g>
<g>
<title>java/lang/String.trim (9 samples, 0.11%)</title><rect x="862.6" y="1587.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="865.6" y="1598.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (9 samples, 0.11%)</title><rect x="862.6" y="1571.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="865.6" y="1582.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.02%)</title><rect x="863.2" y="1555.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="866.2" y="1566.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="863.6" y="1555.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="866.6" y="1566.0"></text>
</g>
<g>
<title>java/util/HashMap.computeIfAbsent (2 samples, 0.02%)</title><rect x="863.9" y="1587.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="866.9" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$197/973169968.accept (4 samples, 0.05%)</title><rect x="864.3" y="1635.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="867.3" y="1646.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.advance (4 samples, 0.05%)</title><rect x="864.3" y="1619.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="867.3" y="1630.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.unsubscribe (3 samples, 0.04%)</title><rect x="864.4" y="1603.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="867.4" y="1614.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (307 samples, 3.66%)</title><rect x="864.9" y="1747.0" width="43.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="867.9" y="1758.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (307 samples, 3.66%)</title><rect x="864.9" y="1731.0" width="43.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="867.9" y="1742.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (307 samples, 3.66%)</title><rect x="864.9" y="1715.0" width="43.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="867.9" y="1726.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$189/2011462796.run (305 samples, 3.63%)</title><rect x="865.0" y="1699.0" width="42.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="868.0" y="1710.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (305 samples, 3.63%)</title><rect x="865.0" y="1683.0" width="42.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="868.0" y="1694.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (4 samples, 0.05%)</title><rect x="866.0" y="1667.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="869.0" y="1678.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onSubscribe (3 samples, 0.04%)</title><rect x="866.1" y="1651.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="869.1" y="1662.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.onSubscribe (3 samples, 0.04%)</title><rect x="866.1" y="1635.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="869.1" y="1646.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onSubscribe (2 samples, 0.02%)</title><rect x="866.3" y="1619.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="869.3" y="1630.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onSubscribe (2 samples, 0.02%)</title><rect x="866.3" y="1603.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="869.3" y="1614.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onSubscribe (2 samples, 0.02%)</title><rect x="866.3" y="1587.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="869.3" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.tryAsyncReceive (291 samples, 3.47%)</title><rect x="866.5" y="1667.0" width="40.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="869.5" y="1678.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (290 samples, 3.45%)</title><rect x="866.7" y="1651.0" width="40.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="869.7" y="1662.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.handle (289 samples, 3.44%)</title><rect x="866.8" y="1635.0" width="40.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="869.8" y="1646.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.handle (289 samples, 3.44%)</title><rect x="866.8" y="1619.0" width="40.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="869.8" y="1630.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.accept (288 samples, 3.43%)</title><rect x="866.8" y="1603.0" width="40.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="869.8" y="1614.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.accept (288 samples, 3.43%)</title><rect x="866.8" y="1587.0" width="40.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="869.8" y="1598.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$247/1389791625.run (156 samples, 1.86%)</title><rect x="867.0" y="1571.0" width="21.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="870.0" y="1582.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.onFinished (155 samples, 1.85%)</title><rect x="867.1" y="1555.0" width="21.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="870.1" y="1566.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.closeOrReturnToCache (152 samples, 1.81%)</title><rect x="867.5" y="1539.0" width="21.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="870.5" y="1550.0">j..</text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (10 samples, 0.12%)</title><rect x="867.7" y="1523.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="870.7" y="1534.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (7 samples, 0.08%)</title><rect x="867.7" y="1507.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="870.7" y="1518.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (5 samples, 0.06%)</title><rect x="868.0" y="1491.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="871.0" y="1502.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (5 samples, 0.06%)</title><rect x="868.0" y="1475.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="871.0" y="1486.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (5 samples, 0.06%)</title><rect x="868.0" y="1459.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="871.0" y="1470.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (5 samples, 0.06%)</title><rect x="868.0" y="1443.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="871.0" y="1454.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (4 samples, 0.05%)</title><rect x="868.1" y="1427.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="871.1" y="1438.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (4 samples, 0.05%)</title><rect x="868.1" y="1411.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="871.1" y="1422.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (4 samples, 0.05%)</title><rect x="868.1" y="1395.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="871.1" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (2 samples, 0.02%)</title><rect x="868.8" y="1507.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="871.8" y="1518.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.02%)</title><rect x="868.8" y="1491.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="871.8" y="1502.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (2 samples, 0.02%)</title><rect x="868.8" y="1475.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="871.8" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.returnToPool (132 samples, 1.57%)</title><rect x="869.1" y="1523.0" width="18.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="872.1" y="1534.0"></text>
</g>
<g>
<title>java/time/Instant.now (6 samples, 0.07%)</title><rect x="869.1" y="1507.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="872.1" y="1518.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (4 samples, 0.05%)</title><rect x="869.4" y="1491.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="872.4" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (4 samples, 0.05%)</title><rect x="869.4" y="1475.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="872.4" y="1486.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (2 samples, 0.02%)</title><rect x="869.6" y="1459.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="872.6" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.returnToPool (126 samples, 1.50%)</title><rect x="869.9" y="1507.0" width="17.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="872.9" y="1518.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (5 samples, 0.06%)</title><rect x="870.9" y="1491.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="873.9" y="1502.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.05%)</title><rect x="870.9" y="1475.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="873.9" y="1486.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.04%)</title><rect x="871.0" y="1459.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="874.0" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.add (72 samples, 0.86%)</title><rect x="871.6" y="1491.0" width="10.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="874.6" y="1502.0"></text>
</g>
<g>
<title>java/time/Instant.plus (3 samples, 0.04%)</title><rect x="872.0" y="1475.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="875.0" y="1486.0"></text>
</g>
<g>
<title>java/time/Instant.plusSeconds (3 samples, 0.04%)</title><rect x="872.0" y="1459.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="875.0" y="1470.0"></text>
</g>
<g>
<title>java/time/Instant.plus (3 samples, 0.04%)</title><rect x="872.0" y="1443.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="875.0" y="1454.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (3 samples, 0.04%)</title><rect x="872.0" y="1427.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="875.0" y="1438.0"></text>
</g>
<g>
<title>java/lang/Math.floorMod (2 samples, 0.02%)</title><rect x="872.0" y="1411.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="875.0" y="1422.0"></text>
</g>
<g>
<title>java/lang/Math.floorDiv (2 samples, 0.02%)</title><rect x="872.0" y="1395.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="875.0" y="1406.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (54 samples, 0.64%)</title><rect x="872.4" y="1475.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="875.4" y="1486.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (54 samples, 0.64%)</title><rect x="872.4" y="1459.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="875.4" y="1470.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.&lt;init&gt; (2 samples, 0.02%)</title><rect x="874.8" y="1443.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="877.8" y="1454.0"></text>
</g>
<g>
<title>java/util/LinkedList.checkPositionIndex (35 samples, 0.42%)</title><rect x="875.1" y="1443.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="878.1" y="1454.0"></text>
</g>
<g>
<title>java/util/LinkedList.isPositionIndex (35 samples, 0.42%)</title><rect x="875.1" y="1427.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="878.1" y="1438.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.add (3 samples, 0.04%)</title><rect x="880.0" y="1475.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="883.0" y="1486.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.next (7 samples, 0.08%)</title><rect x="880.5" y="1475.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="883.5" y="1486.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.previous (2 samples, 0.02%)</title><rect x="881.4" y="1475.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="884.4" y="1486.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.checkForComodification (2 samples, 0.02%)</title><rect x="881.4" y="1459.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="884.4" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.putConnection (7 samples, 0.08%)</title><rect x="881.7" y="1491.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="884.7" y="1502.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.07%)</title><rect x="881.9" y="1475.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="884.9" y="1486.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.04%)</title><rect x="882.0" y="1459.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="885.0" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.equals (3 samples, 0.04%)</title><rect x="882.0" y="1443.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="885.0" y="1454.0"></text>
</g>
<g>
<title>java/util/Objects.equals (3 samples, 0.04%)</title><rect x="882.0" y="1427.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="885.0" y="1438.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.equals (2 samples, 0.02%)</title><rect x="882.1" y="1411.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="885.1" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.02%)</title><rect x="882.4" y="1459.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="885.4" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.hashCode (2 samples, 0.02%)</title><rect x="882.4" y="1443.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="885.4" y="1454.0"></text>
</g>
<g>
<title>java/util/Objects.hash (2 samples, 0.02%)</title><rect x="882.4" y="1427.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="885.4" y="1438.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (2 samples, 0.02%)</title><rect x="882.4" y="1411.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="885.4" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.registerCleanupTrigger (34 samples, 0.40%)</title><rect x="882.7" y="1491.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="885.7" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.connectFlows (34 samples, 0.40%)</title><rect x="882.7" y="1475.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="885.7" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.subscribe (8 samples, 0.10%)</title><rect x="883.1" y="1459.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="886.1" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (7 samples, 0.08%)</title><rect x="883.3" y="1443.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="886.3" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onSubscribe (7 samples, 0.08%)</title><rect x="883.3" y="1427.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="886.3" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.&lt;init&gt; (6 samples, 0.07%)</title><rect x="883.4" y="1411.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="886.4" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.subscribe (23 samples, 0.27%)</title><rect x="884.3" y="1459.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="887.3" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher.subscribe (23 samples, 0.27%)</title><rect x="884.3" y="1443.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="887.3" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalSubscribe (18 samples, 0.21%)</title><rect x="884.5" y="1427.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="887.5" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (16 samples, 0.19%)</title><rect x="884.8" y="1411.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="887.8" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (16 samples, 0.19%)</title><rect x="884.8" y="1395.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="887.8" y="1406.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.02%)</title><rect x="885.2" y="1379.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="888.2" y="1390.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.02%)</title><rect x="885.2" y="1363.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="888.2" y="1374.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.02%)</title><rect x="885.2" y="1347.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="888.2" y="1358.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (10 samples, 0.12%)</title><rect x="885.7" y="1379.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="888.7" y="1390.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (10 samples, 0.12%)</title><rect x="885.7" y="1363.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="888.7" y="1374.0"></text>
</g>
<g>
<title>__write (10 samples, 0.12%)</title><rect x="885.7" y="1347.0" width="1.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="888.7" y="1358.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.08%)</title><rect x="886.1" y="1331.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="889.1" y="1342.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 0.08%)</title><rect x="886.1" y="1315.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="889.1" y="1326.0"></text>
</g>
<g>
<title>__x64_sys_write (7 samples, 0.08%)</title><rect x="886.1" y="1299.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="889.1" y="1310.0"></text>
</g>
<g>
<title>ksys_write (7 samples, 0.08%)</title><rect x="886.1" y="1283.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="889.1" y="1294.0"></text>
</g>
<g>
<title>vfs_write (7 samples, 0.08%)</title><rect x="886.1" y="1267.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="889.1" y="1278.0"></text>
</g>
<g>
<title>__vfs_write (6 samples, 0.07%)</title><rect x="886.1" y="1251.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="889.1" y="1262.0"></text>
</g>
<g>
<title>new_sync_write (6 samples, 0.07%)</title><rect x="886.1" y="1235.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="889.1" y="1246.0"></text>
</g>
<g>
<title>pipe_write (6 samples, 0.07%)</title><rect x="886.1" y="1219.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="889.1" y="1230.0"></text>
</g>
<g>
<title>__wake_up_sync_key (4 samples, 0.05%)</title><rect x="886.2" y="1203.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="889.2" y="1214.0"></text>
</g>
<g>
<title>__wake_up_common_lock (4 samples, 0.05%)</title><rect x="886.2" y="1187.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="889.2" y="1198.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.05%)</title><rect x="886.2" y="1171.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="889.2" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.&lt;init&gt; (3 samples, 0.04%)</title><rect x="887.1" y="1427.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="890.1" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.isOpen (8 samples, 0.10%)</title><rect x="887.8" y="1523.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="890.8" y="1534.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.isFinished (2 samples, 0.02%)</title><rect x="888.6" y="1507.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="891.6" y="1518.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$248/1362574159.accept (21 samples, 0.25%)</title><rect x="888.9" y="1571.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="891.9" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$1 (20 samples, 0.24%)</title><rect x="888.9" y="1555.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="891.9" y="1566.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onComplete (18 samples, 0.21%)</title><rect x="889.2" y="1539.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="892.2" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (15 samples, 0.18%)</title><rect x="889.2" y="1523.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="892.2" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (3 samples, 0.04%)</title><rect x="889.2" y="1507.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="892.2" y="1518.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.02%)</title><rect x="889.3" y="1491.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="892.3" y="1502.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.02%)</title><rect x="889.3" y="1475.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="892.3" y="1486.0"></text>
</g>
<g>
<title>java/lang/Class.cast (2 samples, 0.02%)</title><rect x="889.3" y="1459.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="892.3" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (12 samples, 0.14%)</title><rect x="889.6" y="1507.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="892.6" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (10 samples, 0.12%)</title><rect x="889.9" y="1491.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="892.9" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.12%)</title><rect x="889.9" y="1475.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="892.9" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.02%)</title><rect x="889.9" y="1459.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="892.9" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (2 samples, 0.02%)</title><rect x="889.9" y="1443.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="892.9" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$250/882642740.accept (5 samples, 0.06%)</title><rect x="890.2" y="1459.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="893.2" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$2 (5 samples, 0.06%)</title><rect x="890.2" y="1443.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="893.2" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$ClientRefCountTracker.tryRelease (3 samples, 0.04%)</title><rect x="890.4" y="1427.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="893.4" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations$$Lambda$251/48335238.accept (3 samples, 0.04%)</title><rect x="890.9" y="1459.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="893.9" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations.lambda$add$0 (3 samples, 0.04%)</title><rect x="890.9" y="1443.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="893.9" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations.remove (3 samples, 0.04%)</title><rect x="890.9" y="1427.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="893.9" y="1438.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.remove (3 samples, 0.04%)</title><rect x="890.9" y="1411.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="893.9" y="1422.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.closeDeletion (2 samples, 0.02%)</title><rect x="891.0" y="1395.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="894.0" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$198/1222598723.accept (3 samples, 0.04%)</title><rect x="891.3" y="1523.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="894.3" y="1534.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.advance (3 samples, 0.04%)</title><rect x="891.3" y="1507.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="894.3" y="1518.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.unsubscribe (2 samples, 0.02%)</title><rect x="891.4" y="1491.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="894.4" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onComplete (95 samples, 1.13%)</title><rect x="891.8" y="1571.0" width="13.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="894.8" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.complete (92 samples, 1.10%)</title><rect x="892.1" y="1555.0" width="12.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="895.1" y="1566.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.04%)</title><rect x="892.3" y="1539.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="895.3" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onComplete (78 samples, 0.93%)</title><rect x="892.8" y="1539.0" width="11.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="895.8" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onComplete (77 samples, 0.92%)</title><rect x="893.0" y="1523.0" width="10.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="896.0" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (69 samples, 0.82%)</title><rect x="893.1" y="1507.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="896.1" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (2 samples, 0.02%)</title><rect x="893.1" y="1491.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="896.1" y="1502.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.02%)</title><rect x="893.1" y="1475.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="896.1" y="1486.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.02%)</title><rect x="893.1" y="1459.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="896.1" y="1470.0"></text>
</g>
<g>
<title>java/lang/Class.cast (2 samples, 0.02%)</title><rect x="893.1" y="1443.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="896.1" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (67 samples, 0.80%)</title><rect x="893.4" y="1491.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="896.4" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (66 samples, 0.79%)</title><rect x="893.5" y="1475.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="896.5" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (66 samples, 0.79%)</title><rect x="893.5" y="1459.0" width="9.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="896.5" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$254/73385495.accept (66 samples, 0.79%)</title><rect x="893.5" y="1443.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="896.5" y="1454.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$4 (65 samples, 0.77%)</title><rect x="893.7" y="1427.0" width="9.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="896.7" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (65 samples, 0.77%)</title><rect x="893.7" y="1411.0" width="9.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="896.7" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (65 samples, 0.77%)</title><rect x="893.7" y="1395.0" width="9.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="896.7" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (7 samples, 0.08%)</title><rect x="894.1" y="1379.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="897.1" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (3 samples, 0.04%)</title><rect x="894.1" y="1363.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="897.1" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (3 samples, 0.04%)</title><rect x="894.1" y="1347.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="897.1" y="1358.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$260/2015801594.apply (4 samples, 0.05%)</title><rect x="894.5" y="1363.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="897.5" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (54 samples, 0.64%)</title><rect x="895.2" y="1379.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="898.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (53 samples, 0.63%)</title><rect x="895.4" y="1363.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="898.4" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (52 samples, 0.62%)</title><rect x="895.4" y="1347.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="898.4" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.execute (47 samples, 0.56%)</title><rect x="895.4" y="1331.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="898.4" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalSubmit (47 samples, 0.56%)</title><rect x="895.4" y="1315.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="898.4" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalPush (47 samples, 0.56%)</title><rect x="895.4" y="1299.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="898.4" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.lockedPush (3 samples, 0.04%)</title><rect x="895.4" y="1283.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="898.4" y="1294.0"></text>
</g>
<g>
<title>g1_post_barrier_slow (2 samples, 0.02%)</title><rect x="895.5" y="1267.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="898.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.tryLockPhase (2 samples, 0.02%)</title><rect x="895.8" y="1283.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="898.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.02%)</title><rect x="895.8" y="1267.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="898.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.signalWork (41 samples, 0.49%)</title><rect x="896.1" y="1283.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="899.1" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LJJ_Z (2 samples, 0.02%)</title><rect x="896.2" y="1267.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="899.2" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleLongs$FieldInstanceReadWrite.compareAndSet (2 samples, 0.02%)</title><rect x="896.2" y="1251.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="899.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (38 samples, 0.45%)</title><rect x="896.5" y="1267.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="899.5" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (37 samples, 0.44%)</title><rect x="896.6" y="1251.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="899.6" y="1262.0"></text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 0.08%)</title><rect x="896.6" y="1235.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="899.6" y="1246.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.04%)</title><rect x="897.2" y="1219.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="900.2" y="1230.0"></text>
</g>
<g>
<title>__pthread_cond_signal (27 samples, 0.32%)</title><rect x="897.6" y="1235.0" width="3.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="900.6" y="1246.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (25 samples, 0.30%)</title><rect x="897.9" y="1219.0" width="3.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="900.9" y="1230.0"></text>
</g>
<g>
<title>do_syscall_64 (25 samples, 0.30%)</title><rect x="897.9" y="1203.0" width="3.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="900.9" y="1214.0"></text>
</g>
<g>
<title>__x64_sys_futex (23 samples, 0.27%)</title><rect x="898.2" y="1187.0" width="3.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="901.2" y="1198.0"></text>
</g>
<g>
<title>do_futex (23 samples, 0.27%)</title><rect x="898.2" y="1171.0" width="3.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="901.2" y="1182.0"></text>
</g>
<g>
<title>futex_wake (23 samples, 0.27%)</title><rect x="898.2" y="1155.0" width="3.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="901.2" y="1166.0"></text>
</g>
<g>
<title>wake_up_q (22 samples, 0.26%)</title><rect x="898.3" y="1139.0" width="3.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="901.3" y="1150.0"></text>
</g>
<g>
<title>try_to_wake_up (22 samples, 0.26%)</title><rect x="898.3" y="1123.0" width="3.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="901.3" y="1134.0"></text>
</g>
<g>
<title>__lock_text_start (22 samples, 0.26%)</title><rect x="898.3" y="1107.0" width="3.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="901.3" y="1118.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.02%)</title><rect x="901.4" y="1235.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="904.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (5 samples, 0.06%)</title><rect x="902.0" y="1331.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="905.0" y="1342.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.join (6 samples, 0.07%)</title><rect x="902.9" y="1507.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="905.9" y="1518.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.remaining (4 samples, 0.05%)</title><rect x="903.2" y="1491.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="906.2" y="1502.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.02%)</title><rect x="903.5" y="1475.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="906.5" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$NullSubscriber.onComplete (9 samples, 0.11%)</title><rect x="903.8" y="1539.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="906.8" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (9 samples, 0.11%)</title><rect x="903.8" y="1523.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="906.8" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (9 samples, 0.11%)</title><rect x="903.8" y="1507.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="906.8" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (9 samples, 0.11%)</title><rect x="903.8" y="1491.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="906.8" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.11%)</title><rect x="903.8" y="1475.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="906.8" y="1486.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$254/73385495.accept (8 samples, 0.10%)</title><rect x="903.9" y="1459.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="906.9" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$4 (8 samples, 0.10%)</title><rect x="903.9" y="1443.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="906.9" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (8 samples, 0.10%)</title><rect x="903.9" y="1427.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="906.9" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (8 samples, 0.10%)</title><rect x="903.9" y="1411.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="906.9" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (8 samples, 0.10%)</title><rect x="903.9" y="1395.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="906.9" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.10%)</title><rect x="903.9" y="1379.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="906.9" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (8 samples, 0.10%)</title><rect x="903.9" y="1363.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="906.9" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.execute (8 samples, 0.10%)</title><rect x="903.9" y="1347.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="906.9" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalSubmit (8 samples, 0.10%)</title><rect x="903.9" y="1331.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="906.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalPush (8 samples, 0.10%)</title><rect x="903.9" y="1315.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="906.9" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.signalWork (8 samples, 0.10%)</title><rect x="903.9" y="1299.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="906.9" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.10%)</title><rect x="903.9" y="1283.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="906.9" y="1294.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (8 samples, 0.10%)</title><rect x="903.9" y="1267.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="906.9" y="1278.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.02%)</title><rect x="903.9" y="1251.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="906.9" y="1262.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 0.06%)</title><rect x="904.2" y="1251.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="907.2" y="1262.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="904.5" y="1235.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="907.5" y="1246.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.04%)</title><rect x="904.5" y="1219.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="907.5" y="1230.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.04%)</title><rect x="904.5" y="1203.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="907.5" y="1214.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.04%)</title><rect x="904.5" y="1187.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="907.5" y="1198.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.04%)</title><rect x="904.5" y="1171.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="907.5" y="1182.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.04%)</title><rect x="904.5" y="1155.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="907.5" y="1166.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.04%)</title><rect x="904.5" y="1139.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="907.5" y="1150.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="904.5" y="1123.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="907.5" y="1134.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onNext (8 samples, 0.10%)</title><rect x="905.2" y="1571.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="908.2" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onNext (7 samples, 0.08%)</title><rect x="905.2" y="1555.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="908.2" y="1566.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onNext (7 samples, 0.08%)</title><rect x="905.2" y="1539.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="908.2" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onNext (7 samples, 0.08%)</title><rect x="905.2" y="1523.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="908.2" y="1534.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onNext (7 samples, 0.08%)</title><rect x="905.2" y="1507.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="908.2" y="1518.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onNext (7 samples, 0.08%)</title><rect x="905.2" y="1491.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="908.2" y="1502.0"></text>
</g>
<g>
<title>java/util/ArrayList.addAll (7 samples, 0.08%)</title><rect x="905.2" y="1475.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="908.2" y="1486.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (4 samples, 0.05%)</title><rect x="905.2" y="1459.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="908.2" y="1470.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$ListItr.next (2 samples, 0.02%)</title><rect x="905.5" y="1443.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="908.5" y="1454.0"></text>
</g>
<g>
<title>oop_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="905.9" y="1459.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="908.9" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.sliceWithLimitedCapacity (5 samples, 0.06%)</title><rect x="906.6" y="1571.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="909.6" y="1582.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.02%)</title><rect x="906.9" y="1555.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="909.9" y="1566.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.tryAsyncReceive (2 samples, 0.02%)</title><rect x="907.4" y="1667.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="910.4" y="1678.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (2 samples, 0.02%)</title><rect x="907.4" y="1651.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="910.4" y="1662.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (2 samples, 0.02%)</title><rect x="907.4" y="1635.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="910.4" y="1646.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (2 samples, 0.02%)</title><rect x="907.4" y="1619.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="910.4" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinWorkerThread.run (69 samples, 0.82%)</title><rect x="908.0" y="1827.0" width="9.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="911.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.runWorker (69 samples, 0.82%)</title><rect x="908.0" y="1811.0" width="9.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="911.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.scan (25 samples, 0.30%)</title><rect x="908.3" y="1795.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="911.3" y="1806.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LILL_Z (3 samples, 0.04%)</title><rect x="908.7" y="1779.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="911.7" y="1790.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$Array.compareAndSet (3 samples, 0.04%)</title><rect x="908.7" y="1763.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="911.7" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.topLevelExec (14 samples, 0.17%)</title><rect x="909.1" y="1779.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="912.1" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.doExec (13 samples, 0.15%)</title><rect x="909.3" y="1763.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="912.3" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.exec (9 samples, 0.11%)</title><rect x="909.8" y="1747.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="912.8" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (9 samples, 0.11%)</title><rect x="909.8" y="1731.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="912.8" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (9 samples, 0.11%)</title><rect x="909.8" y="1715.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="912.8" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (9 samples, 0.11%)</title><rect x="909.8" y="1699.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="912.8" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (9 samples, 0.11%)</title><rect x="909.8" y="1683.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="912.8" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (6 samples, 0.07%)</title><rect x="910.0" y="1667.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="913.0" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 0.07%)</title><rect x="910.0" y="1651.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="913.0" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.05%)</title><rect x="910.2" y="1635.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="913.2" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.02%)</title><rect x="910.4" y="1619.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="913.4" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.02%)</title><rect x="910.4" y="1603.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="913.4" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.02%)</title><rect x="910.4" y="1587.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="913.4" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.02%)</title><rect x="910.4" y="1571.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="913.4" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.02%)</title><rect x="910.8" y="1667.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="913.8" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.signalWork (5 samples, 0.06%)</title><rect x="911.1" y="1779.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="914.1" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.06%)</title><rect x="911.1" y="1763.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="914.1" y="1774.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.06%)</title><rect x="911.1" y="1747.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="914.1" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (5 samples, 0.06%)</title><rect x="911.1" y="1731.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="914.1" y="1742.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.05%)</title><rect x="911.2" y="1715.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="914.2" y="1726.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.05%)</title><rect x="911.2" y="1699.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="914.2" y="1710.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.05%)</title><rect x="911.2" y="1683.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="914.2" y="1694.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.05%)</title><rect x="911.2" y="1667.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="914.2" y="1678.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 0.05%)</title><rect x="911.2" y="1651.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="914.2" y="1662.0"></text>
</g>
<g>
<title>wake_up_q (4 samples, 0.05%)</title><rect x="911.2" y="1635.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="914.2" y="1646.0"></text>
</g>
<g>
<title>try_to_wake_up (4 samples, 0.05%)</title><rect x="911.2" y="1619.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="914.2" y="1630.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.05%)</title><rect x="911.2" y="1603.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="914.2" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (6 samples, 0.07%)</title><rect x="911.8" y="1795.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="914.8" y="1806.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (6 samples, 0.07%)</title><rect x="911.8" y="1779.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="914.8" y="1790.0"></text>
</g>
<g>
<title>Unsafe_Park (4 samples, 0.05%)</title><rect x="911.8" y="1763.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="914.8" y="1774.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.02%)</title><rect x="911.8" y="1747.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="914.8" y="1758.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.02%)</title><rect x="912.1" y="1747.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="915.1" y="1758.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="912.4" y="1763.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="915.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.parkUntil (35 samples, 0.42%)</title><rect x="912.6" y="1795.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="915.6" y="1806.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (34 samples, 0.40%)</title><rect x="912.8" y="1779.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="915.8" y="1790.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.02%)</title><rect x="912.9" y="1763.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="915.9" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Park (16 samples, 0.19%)</title><rect x="913.2" y="1763.0" width="2.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="916.2" y="1774.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.04%)</title><rect x="913.2" y="1747.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="916.2" y="1758.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.04%)</title><rect x="913.6" y="1747.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="916.6" y="1758.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (8 samples, 0.10%)</title><rect x="914.2" y="1747.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="917.2" y="1758.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.07%)</title><rect x="914.5" y="1731.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="917.5" y="1742.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 0.07%)</title><rect x="914.5" y="1715.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="917.5" y="1726.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 0.06%)</title><rect x="914.6" y="1699.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="917.6" y="1710.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.06%)</title><rect x="914.6" y="1683.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="917.6" y="1694.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 0.05%)</title><rect x="914.7" y="1667.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="917.7" y="1678.0"></text>
</g>
<g>
<title>get_futex_key (4 samples, 0.05%)</title><rect x="914.7" y="1651.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="917.7" y="1662.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.0 (3 samples, 0.04%)</title><rect x="914.9" y="1635.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="917.9" y="1646.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.18%)</title><rect x="915.4" y="1763.0" width="2.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="918.4" y="1774.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (14 samples, 0.17%)</title><rect x="915.6" y="1747.0" width="2.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="918.6" y="1758.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 0.14%)</title><rect x="915.9" y="1731.0" width="1.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="918.9" y="1742.0"></text>
</g>
<g>
<title>do_syscall_64 (12 samples, 0.14%)</title><rect x="915.9" y="1715.0" width="1.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="918.9" y="1726.0"></text>
</g>
<g>
<title>__x64_sys_futex (11 samples, 0.13%)</title><rect x="916.0" y="1699.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="919.0" y="1710.0"></text>
</g>
<g>
<title>do_futex (11 samples, 0.13%)</title><rect x="916.0" y="1683.0" width="1.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="919.0" y="1694.0"></text>
</g>
<g>
<title>futex_wait (11 samples, 0.13%)</title><rect x="916.0" y="1667.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="919.0" y="1678.0"></text>
</g>
<g>
<title>futex_wait_queue_me (4 samples, 0.05%)</title><rect x="916.1" y="1651.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="919.1" y="1662.0"></text>
</g>
<g>
<title>hrtimer_sleeper_start_expires (2 samples, 0.02%)</title><rect x="916.3" y="1635.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="919.3" y="1646.0"></text>
</g>
<g>
<title>hrtimer_start_range_ns (2 samples, 0.02%)</title><rect x="916.3" y="1619.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="919.3" y="1630.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.02%)</title><rect x="916.3" y="1603.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="919.3" y="1614.0"></text>
</g>
<g>
<title>futex_wait_setup (2 samples, 0.02%)</title><rect x="916.7" y="1651.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="919.7" y="1662.0"></text>
</g>
<g>
<title>plist_add (3 samples, 0.04%)</title><rect x="917.1" y="1651.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="920.1" y="1662.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.run (204 samples, 2.43%)</title><rect x="918.0" y="1827.0" width="28.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="921.0" y="1838.0">jd..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.keyFor (3 samples, 0.04%)</title><rect x="918.4" y="1811.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="921.4" y="1822.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (76 samples, 0.90%)</title><rect x="919.0" y="1811.0" width="10.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="922.0" y="1822.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$218/1870552244.accept (72 samples, 0.86%)</title><rect x="919.0" y="1795.0" width="10.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.0" y="1806.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$3 (72 samples, 0.86%)</title><rect x="919.0" y="1779.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="922.0" y="1790.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.handleEvent (72 samples, 0.86%)</title><rect x="919.0" y="1763.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="922.0" y="1774.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection$ConnectEvent.handle (3 samples, 0.04%)</title><rect x="919.0" y="1747.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.0" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (3 samples, 0.04%)</title><rect x="919.0" y="1731.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="922.0" y="1742.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (2 samples, 0.02%)</title><rect x="919.1" y="1715.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="922.1" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (2 samples, 0.02%)</title><rect x="919.1" y="1699.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="922.1" y="1710.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowEvent.handle (69 samples, 0.82%)</title><rect x="919.4" y="1747.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.4" y="1758.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadEvent.signalEvent (69 samples, 0.82%)</title><rect x="919.4" y="1731.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="922.4" y="1742.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (3 samples, 0.04%)</title><rect x="919.4" y="1715.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="922.4" y="1726.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (3 samples, 0.04%)</title><rect x="919.4" y="1699.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="922.4" y="1710.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (2 samples, 0.02%)</title><rect x="919.4" y="1683.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="922.4" y="1694.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.02%)</title><rect x="919.4" y="1667.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.4" y="1678.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.02%)</title><rect x="919.4" y="1651.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="922.4" y="1662.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.02%)</title><rect x="919.4" y="1635.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="922.4" y="1646.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalReadable (66 samples, 0.79%)</title><rect x="919.8" y="1715.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="922.8" y="1726.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (66 samples, 0.79%)</title><rect x="919.8" y="1699.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="922.8" y="1710.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (66 samples, 0.79%)</title><rect x="919.8" y="1683.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="922.8" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.compareAndSet (2 samples, 0.02%)</title><rect x="919.8" y="1667.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="922.8" y="1678.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (64 samples, 0.76%)</title><rect x="920.1" y="1667.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="923.1" y="1678.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowTask.run (64 samples, 0.76%)</title><rect x="920.1" y="1651.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="923.1" y="1662.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$173/511106131.run (64 samples, 0.76%)</title><rect x="920.1" y="1635.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="923.1" y="1646.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.read (64 samples, 0.76%)</title><rect x="920.1" y="1619.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="923.1" y="1630.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onNext (7 samples, 0.08%)</title><rect x="920.5" y="1603.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="923.5" y="1614.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onNext (6 samples, 0.07%)</title><rect x="920.6" y="1587.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="923.6" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.asyncReceive (6 samples, 0.07%)</title><rect x="920.6" y="1571.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="923.6" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (6 samples, 0.07%)</title><rect x="920.6" y="1555.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="923.6" y="1566.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (6 samples, 0.07%)</title><rect x="920.6" y="1539.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="923.6" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (5 samples, 0.06%)</title><rect x="920.8" y="1523.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="923.8" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 0.06%)</title><rect x="920.8" y="1507.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="923.8" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (5 samples, 0.06%)</title><rect x="920.8" y="1491.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="923.8" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.02%)</title><rect x="920.8" y="1475.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="923.8" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.02%)</title><rect x="921.2" y="1475.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="924.2" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.02%)</title><rect x="921.2" y="1459.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="924.2" y="1470.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (2 samples, 0.02%)</title><rect x="921.6" y="1603.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="924.6" y="1614.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.readAvailable (51 samples, 0.61%)</title><rect x="921.9" y="1603.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="924.9" y="1614.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SliceBufferSource.append (3 samples, 0.04%)</title><rect x="922.0" y="1587.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="925.0" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SliceBufferSource.getBuffer (4 samples, 0.05%)</title><rect x="922.5" y="1587.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="925.5" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection$$Lambda$167/656700011.get (4 samples, 0.05%)</title><rect x="922.5" y="1571.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="925.5" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.getBuffer (4 samples, 0.05%)</title><rect x="922.5" y="1555.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="925.5" y="1566.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (4 samples, 0.05%)</title><rect x="922.5" y="1539.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="925.5" y="1550.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="922.5" y="1523.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="925.5" y="1534.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="922.6" y="1507.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="925.6" y="1518.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (43 samples, 0.51%)</title><rect x="923.0" y="1587.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="926.0" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.02%)</title><rect x="923.0" y="1571.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="926.0" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.02%)</title><rect x="923.0" y="1555.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="926.0" y="1566.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (41 samples, 0.49%)</title><rect x="923.3" y="1571.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="926.3" y="1582.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (41 samples, 0.49%)</title><rect x="923.3" y="1555.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="926.3" y="1566.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (39 samples, 0.46%)</title><rect x="923.5" y="1539.0" width="5.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="926.5" y="1550.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="923.6" y="1523.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="926.6" y="1534.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.02%)</title><rect x="923.6" y="1507.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="926.6" y="1518.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.02%)</title><rect x="923.6" y="1491.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="926.6" y="1502.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (36 samples, 0.43%)</title><rect x="923.9" y="1523.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="926.9" y="1534.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (36 samples, 0.43%)</title><rect x="923.9" y="1507.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="926.9" y="1518.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.02%)</title><rect x="924.2" y="1491.0" width="0.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="927.2" y="1502.0"></text>
</g>
<g>
<title>read (32 samples, 0.38%)</title><rect x="924.4" y="1491.0" width="4.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="927.4" y="1502.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (31 samples, 0.37%)</title><rect x="924.6" y="1475.0" width="4.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="927.6" y="1486.0"></text>
</g>
<g>
<title>do_syscall_64 (30 samples, 0.36%)</title><rect x="924.7" y="1459.0" width="4.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="927.7" y="1470.0"></text>
</g>
<g>
<title>__x64_sys_read (28 samples, 0.33%)</title><rect x="925.0" y="1443.0" width="3.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="928.0" y="1454.0"></text>
</g>
<g>
<title>ksys_read (28 samples, 0.33%)</title><rect x="925.0" y="1427.0" width="3.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="928.0" y="1438.0"></text>
</g>
<g>
<title>vfs_read (28 samples, 0.33%)</title><rect x="925.0" y="1411.0" width="3.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="928.0" y="1422.0"></text>
</g>
<g>
<title>__vfs_read (26 samples, 0.31%)</title><rect x="925.0" y="1395.0" width="3.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="928.0" y="1406.0"></text>
</g>
<g>
<title>new_sync_read (24 samples, 0.29%)</title><rect x="925.3" y="1379.0" width="3.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="928.3" y="1390.0"></text>
</g>
<g>
<title>sock_read_iter (24 samples, 0.29%)</title><rect x="925.3" y="1363.0" width="3.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="928.3" y="1374.0"></text>
</g>
<g>
<title>sock_recvmsg (23 samples, 0.27%)</title><rect x="925.4" y="1347.0" width="3.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="928.4" y="1358.0"></text>
</g>
<g>
<title>inet6_recvmsg (21 samples, 0.25%)</title><rect x="925.6" y="1331.0" width="2.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="928.6" y="1342.0"></text>
</g>
<g>
<title>tcp_recvmsg (21 samples, 0.25%)</title><rect x="925.6" y="1315.0" width="2.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="928.6" y="1326.0"></text>
</g>
<g>
<title>__kfree_skb (7 samples, 0.08%)</title><rect x="925.8" y="1299.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="928.8" y="1310.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.02%)</title><rect x="925.8" y="1283.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="928.8" y="1294.0"></text>
</g>
<g>
<title>kmem_cache_free (2 samples, 0.02%)</title><rect x="925.8" y="1267.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="928.8" y="1278.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.02%)</title><rect x="925.8" y="1251.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="928.8" y="1262.0"></text>
</g>
<g>
<title>skb_release_all (5 samples, 0.06%)</title><rect x="926.1" y="1283.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="929.1" y="1294.0"></text>
</g>
<g>
<title>skb_release_data (4 samples, 0.05%)</title><rect x="926.3" y="1267.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="929.3" y="1278.0"></text>
</g>
<g>
<title>skb_free_head (2 samples, 0.02%)</title><rect x="926.5" y="1251.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="929.5" y="1262.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.02%)</title><rect x="926.5" y="1235.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="929.5" y="1246.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.04%)</title><rect x="927.0" y="1299.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="930.0" y="1310.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (4 samples, 0.05%)</title><rect x="927.4" y="1299.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="930.4" y="1310.0"></text>
</g>
<g>
<title>__skb_datagram_iter (4 samples, 0.05%)</title><rect x="927.4" y="1283.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="930.4" y="1294.0"></text>
</g>
<g>
<title>simple_copy_to_iter (2 samples, 0.02%)</title><rect x="927.7" y="1267.0" width="0.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="930.7" y="1278.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (3 samples, 0.04%)</title><rect x="928.1" y="1299.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="931.1" y="1310.0"></text>
</g>
<g>
<title>rw_verify_area (2 samples, 0.02%)</title><rect x="928.7" y="1395.0" width="0.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="931.7" y="1406.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$221/1514213842.accept (4 samples, 0.05%)</title><rect x="929.1" y="1795.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="932.1" y="1806.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$5 (4 samples, 0.05%)</title><rect x="929.1" y="1779.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="932.1" y="1790.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$217/1220093029.run (4 samples, 0.05%)</title><rect x="929.1" y="1763.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="932.1" y="1774.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$2 (4 samples, 0.05%)</title><rect x="929.1" y="1747.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="932.1" y="1758.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.resetInterestOps (3 samples, 0.04%)</title><rect x="929.2" y="1731.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="932.2" y="1742.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (2 samples, 0.02%)</title><rect x="929.4" y="1715.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="932.4" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEach (3 samples, 0.04%)</title><rect x="929.8" y="1811.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="932.8" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.04%)</title><rect x="929.8" y="1795.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="932.8" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.evaluateSequential (3 samples, 0.04%)</title><rect x="929.8" y="1779.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="932.8" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp.evaluateSequential (2 samples, 0.02%)</title><rect x="929.9" y="1763.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="932.9" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.02%)</title><rect x="929.9" y="1747.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="932.9" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.02%)</title><rect x="929.9" y="1731.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="932.9" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (2 samples, 0.02%)</title><rect x="929.9" y="1715.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="932.9" y="1726.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.02%)</title><rect x="929.9" y="1699.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="932.9" y="1710.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.accept (2 samples, 0.02%)</title><rect x="929.9" y="1683.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="932.9" y="1694.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$214/1699022569.accept (2 samples, 0.02%)</title><rect x="929.9" y="1667.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="932.9" y="1678.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.02%)</title><rect x="929.9" y="1651.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="932.9" y="1662.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.02%)</title><rect x="929.9" y="1635.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="932.9" y="1646.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.02%)</title><rect x="929.9" y="1619.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="932.9" y="1630.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.02%)</title><rect x="929.9" y="1603.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="932.9" y="1614.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AsyncTriggerEvent.handle (51 samples, 0.61%)</title><rect x="930.2" y="1811.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="933.2" y="1822.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$177/1640659448.run (42 samples, 0.50%)</title><rect x="930.5" y="1795.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="933.5" y="1806.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handleSubscribeEvent (42 samples, 0.50%)</title><rect x="930.5" y="1779.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="933.5" y="1790.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (36 samples, 0.43%)</title><rect x="931.3" y="1763.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="934.3" y="1774.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (36 samples, 0.43%)</title><rect x="931.3" y="1747.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="934.3" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.compareAndSet (2 samples, 0.02%)</title><rect x="931.3" y="1731.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="934.3" y="1742.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (34 samples, 0.40%)</title><rect x="931.6" y="1731.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="934.6" y="1742.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowTask.run (33 samples, 0.39%)</title><rect x="931.6" y="1715.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="934.6" y="1726.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$173/511106131.run (32 samples, 0.38%)</title><rect x="931.7" y="1699.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="934.7" y="1710.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.read (32 samples, 0.38%)</title><rect x="931.7" y="1683.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="934.7" y="1694.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handlePending (32 samples, 0.38%)</title><rect x="931.7" y="1667.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="934.7" y="1678.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.signalOnSubscribe (21 samples, 0.25%)</title><rect x="933.3" y="1651.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="936.3" y="1662.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="933.3" y="1635.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="936.3" y="1646.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.onSubscribe (17 samples, 0.20%)</title><rect x="933.6" y="1635.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="936.6" y="1646.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (17 samples, 0.20%)</title><rect x="933.6" y="1619.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="936.6" y="1630.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (17 samples, 0.20%)</title><rect x="933.6" y="1603.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="936.6" y="1614.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (11 samples, 0.13%)</title><rect x="933.9" y="1587.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="936.9" y="1598.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.resumeEvent (10 samples, 0.12%)</title><rect x="934.0" y="1571.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="937.0" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (10 samples, 0.12%)</title><rect x="934.0" y="1555.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="937.0" y="1566.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (10 samples, 0.12%)</title><rect x="934.0" y="1539.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="937.0" y="1550.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.keyFor (2 samples, 0.02%)</title><rect x="934.4" y="1523.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="937.4" y="1534.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (5 samples, 0.06%)</title><rect x="934.7" y="1523.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="937.7" y="1534.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.increase (4 samples, 0.05%)</title><rect x="935.4" y="1587.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="938.4" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.getAndAccumulate (3 samples, 0.04%)</title><rect x="935.5" y="1571.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="938.5" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onSubscribe (2 samples, 0.02%)</title><rect x="936.0" y="1635.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="939.0" y="1646.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.02%)</title><rect x="936.0" y="1619.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="939.0" y="1630.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.02%)</title><rect x="936.0" y="1603.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="939.0" y="1614.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (2 samples, 0.02%)</title><rect x="936.0" y="1587.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="939.0" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.02%)</title><rect x="936.0" y="1571.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="939.0" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.02%)</title><rect x="936.0" y="1555.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="939.0" y="1566.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$182/1441806659.run (7 samples, 0.08%)</title><rect x="936.4" y="1795.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="939.4" y="1806.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.startSubscription (7 samples, 0.08%)</title><rect x="936.4" y="1779.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="939.4" y="1790.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (3 samples, 0.04%)</title><rect x="936.4" y="1763.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="939.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.04%)</title><rect x="936.4" y="1747.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="939.4" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.02%)</title><rect x="936.5" y="1731.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="939.5" y="1742.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handlePending (4 samples, 0.05%)</title><rect x="936.8" y="1763.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="939.8" y="1774.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.purgeExpiredConnectionsAndReturnNextDeadline (18 samples, 0.21%)</title><rect x="937.4" y="1811.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="940.4" y="1822.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.purgeExpiredConnectionsAndReturnNextDeadline (17 samples, 0.20%)</title><rect x="937.5" y="1795.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="940.5" y="1806.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.08%)</title><rect x="938.3" y="1779.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="941.3" y="1790.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.07%)</title><rect x="938.3" y="1763.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="941.3" y="1774.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (6 samples, 0.07%)</title><rect x="938.3" y="1747.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="941.3" y="1758.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.nextExpiryDeadline (2 samples, 0.02%)</title><rect x="939.5" y="1779.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="942.5" y="1790.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.02%)</title><rect x="939.5" y="1763.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="942.5" y="1774.0"></text>
</g>
<g>
<title>java/util/Optional.&lt;init&gt; (2 samples, 0.02%)</title><rect x="939.5" y="1747.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="942.5" y="1758.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.isReferenced (4 samples, 0.05%)</title><rect x="939.9" y="1811.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="942.9" y="1822.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.facade (4 samples, 0.05%)</title><rect x="939.9" y="1795.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="942.9" y="1806.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.purgeTimeoutsAndReturnNextDeadline (5 samples, 0.06%)</title><rect x="940.5" y="1811.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="943.5" y="1822.0"></text>
</g>
<g>
<title>java/time/Instant.now (2 samples, 0.02%)</title><rect x="940.6" y="1795.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="943.6" y="1806.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (2 samples, 0.02%)</title><rect x="940.6" y="1779.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="943.6" y="1790.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (2 samples, 0.02%)</title><rect x="940.6" y="1763.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="943.6" y="1774.0"></text>
</g>
<g>
<title>java/lang/Math.floorMod (2 samples, 0.02%)</title><rect x="940.6" y="1747.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="943.6" y="1758.0"></text>
</g>
<g>
<title>java/lang/Math.floorDiv (2 samples, 0.02%)</title><rect x="940.6" y="1731.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="943.6" y="1742.0"></text>
</g>
<g>
<title>java/util/TreeSet.iterator (2 samples, 0.02%)</title><rect x="940.9" y="1795.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="943.9" y="1806.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (34 samples, 0.40%)</title><rect x="941.2" y="1811.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="944.2" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (34 samples, 0.40%)</title><rect x="941.2" y="1795.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="944.2" y="1806.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (33 samples, 0.39%)</title><rect x="941.2" y="1779.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="944.2" y="1790.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (19 samples, 0.23%)</title><rect x="941.2" y="1763.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="944.2" y="1774.0"></text>
</g>
<g>
<title>epoll_wait (17 samples, 0.20%)</title><rect x="941.4" y="1747.0" width="2.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="944.4" y="1758.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (13 samples, 0.15%)</title><rect x="942.0" y="1731.0" width="1.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="945.0" y="1742.0"></text>
</g>
<g>
<title>do_syscall_64 (13 samples, 0.15%)</title><rect x="942.0" y="1715.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="945.0" y="1726.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (10 samples, 0.12%)</title><rect x="942.1" y="1699.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="945.1" y="1710.0"></text>
</g>
<g>
<title>do_epoll_wait (10 samples, 0.12%)</title><rect x="942.1" y="1683.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="945.1" y="1694.0"></text>
</g>
<g>
<title>ep_poll (10 samples, 0.12%)</title><rect x="942.1" y="1667.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="945.1" y="1678.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (8 samples, 0.10%)</title><rect x="942.3" y="1651.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="945.3" y="1662.0"></text>
</g>
<g>
<title>ep_send_events_proc (8 samples, 0.10%)</title><rect x="942.3" y="1635.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="945.3" y="1646.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (6 samples, 0.07%)</title><rect x="942.6" y="1619.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="945.6" y="1630.0"></text>
</g>
<g>
<title>pipe_poll (2 samples, 0.02%)</title><rect x="942.8" y="1603.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="945.8" y="1614.0"></text>
</g>
<g>
<title>sock_poll (2 samples, 0.02%)</title><rect x="943.1" y="1603.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="946.1" y="1614.0"></text>
</g>
<g>
<title>do_epoll_wait (2 samples, 0.02%)</title><rect x="943.5" y="1699.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="946.5" y="1710.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (12 samples, 0.14%)</title><rect x="943.8" y="1763.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="946.8" y="1774.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.04%)</title><rect x="944.0" y="1747.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="947.0" y="1758.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.clearInterrupt (6 samples, 0.07%)</title><rect x="944.4" y="1747.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="947.4" y="1758.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (5 samples, 0.06%)</title><rect x="944.5" y="1731.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="947.5" y="1742.0"></text>
</g>
<g>
<title>read (5 samples, 0.06%)</title><rect x="944.5" y="1715.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="947.5" y="1726.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="944.8" y="1699.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="947.8" y="1710.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.04%)</title><rect x="944.8" y="1683.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="947.8" y="1694.0"></text>
</g>
<g>
<title>__x64_sys_read (3 samples, 0.04%)</title><rect x="944.8" y="1667.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="947.8" y="1678.0"></text>
</g>
<g>
<title>ksys_read (3 samples, 0.04%)</title><rect x="944.8" y="1651.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="947.8" y="1662.0"></text>
</g>
<g>
<title>vfs_read (3 samples, 0.04%)</title><rect x="944.8" y="1635.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="947.8" y="1646.0"></text>
</g>
<g>
<title>__vfs_read (3 samples, 0.04%)</title><rect x="944.8" y="1619.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="947.8" y="1630.0"></text>
</g>
<g>
<title>new_sync_read (3 samples, 0.04%)</title><rect x="944.8" y="1603.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="947.8" y="1614.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.02%)</title><rect x="945.2" y="1747.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="948.2" y="1758.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (4 samples, 0.05%)</title><rect x="945.9" y="1811.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="948.9" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (4 samples, 0.05%)</title><rect x="945.9" y="1795.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="948.9" y="1806.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (4 samples, 0.05%)</title><rect x="945.9" y="1779.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="948.9" y="1790.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (3 samples, 0.04%)</title><rect x="945.9" y="1763.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="948.9" y="1774.0"></text>
</g>
<g>
<title>epoll_wait (2 samples, 0.02%)</title><rect x="946.1" y="1747.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="949.1" y="1758.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.02%)</title><rect x="946.1" y="1731.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="949.1" y="1742.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.02%)</title><rect x="946.1" y="1715.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="949.1" y="1726.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (2 samples, 0.02%)</title><rect x="946.1" y="1699.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="949.1" y="1710.0"></text>
</g>
<g>
<title>do_epoll_wait (2 samples, 0.02%)</title><rect x="946.1" y="1683.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="949.1" y="1694.0"></text>
</g>
<g>
<title>ep_poll (2 samples, 0.02%)</title><rect x="946.1" y="1667.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="949.1" y="1678.0"></text>
</g>
<g>
<title>start_thread (1,730 samples, 20.60%)</title><rect x="946.8" y="1827.0" width="243.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="949.8" y="1838.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (1,730 samples, 20.60%)</title><rect x="946.8" y="1811.0" width="243.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="949.8" y="1822.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (1,730 samples, 20.60%)</title><rect x="946.8" y="1795.0" width="243.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="949.8" y="1806.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (151 samples, 1.80%)</title><rect x="946.8" y="1779.0" width="21.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="949.8" y="1790.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (149 samples, 1.77%)</title><rect x="946.8" y="1763.0" width="20.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="949.8" y="1774.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (29 samples, 0.35%)</title><rect x="946.8" y="1747.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="949.8" y="1758.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 0.06%)</title><rect x="946.9" y="1731.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="949.9" y="1742.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.02%)</title><rect x="947.3" y="1715.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="950.3" y="1726.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.02%)</title><rect x="947.3" y="1699.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="950.3" y="1710.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.02%)</title><rect x="947.8" y="1731.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="950.8" y="1742.0"></text>
</g>
<g>
<title>SpinPause (20 samples, 0.24%)</title><rect x="948.0" y="1731.0" width="2.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="951.0" y="1742.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (107 samples, 1.27%)</title><rect x="950.9" y="1747.0" width="15.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="953.9" y="1758.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (107 samples, 1.27%)</title><rect x="950.9" y="1731.0" width="15.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="953.9" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (107 samples, 1.27%)</title><rect x="950.9" y="1715.0" width="15.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="953.9" y="1726.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (107 samples, 1.27%)</title><rect x="950.9" y="1699.0" width="15.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="953.9" y="1710.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (107 samples, 1.27%)</title><rect x="950.9" y="1683.0" width="15.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="953.9" y="1694.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (55 samples, 0.65%)</title><rect x="951.1" y="1667.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="954.1" y="1678.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (6 samples, 0.07%)</title><rect x="952.7" y="1651.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="955.7" y="1662.0"></text>
</g>
<g>
<title>page_fault (2 samples, 0.02%)</title><rect x="953.2" y="1635.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="956.2" y="1646.0"></text>
</g>
<g>
<title>do_page_fault (2 samples, 0.02%)</title><rect x="953.2" y="1619.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="956.2" y="1630.0"></text>
</g>
<g>
<title>__do_page_fault (2 samples, 0.02%)</title><rect x="953.2" y="1603.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="956.2" y="1614.0"></text>
</g>
<g>
<title>do_user_addr_fault (2 samples, 0.02%)</title><rect x="953.2" y="1587.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="956.2" y="1598.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (38 samples, 0.45%)</title><rect x="953.5" y="1651.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="956.5" y="1662.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (12 samples, 0.14%)</title><rect x="957.2" y="1635.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.2" y="1646.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.0] (50 samples, 0.60%)</title><rect x="958.9" y="1667.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="961.9" y="1678.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (42 samples, 0.50%)</title><rect x="958.9" y="1651.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="961.9" y="1662.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (6 samples, 0.07%)</title><rect x="960.4" y="1635.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="963.4" y="1646.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.02%)</title><rect x="960.8" y="1619.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="963.8" y="1630.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.04%)</title><rect x="961.3" y="1635.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="964.3" y="1646.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (21 samples, 0.25%)</title><rect x="961.7" y="1635.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="964.7" y="1646.0"></text>
</g>
<g>
<title>oopDesc::size() (7 samples, 0.08%)</title><rect x="964.8" y="1651.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="967.8" y="1662.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (12 samples, 0.14%)</title><rect x="966.0" y="1747.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="969.0" y="1758.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (10 samples, 0.12%)</title><rect x="966.2" y="1731.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="969.2" y="1742.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.04%)</title><rect x="966.2" y="1715.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="969.2" y="1726.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (7 samples, 0.08%)</title><rect x="966.6" y="1715.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="969.6" y="1726.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (7 samples, 0.08%)</title><rect x="966.6" y="1699.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="969.6" y="1710.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (3 samples, 0.04%)</title><rect x="966.7" y="1683.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="969.7" y="1694.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (3 samples, 0.04%)</title><rect x="966.7" y="1667.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="969.7" y="1678.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.04%)</title><rect x="967.2" y="1683.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="970.2" y="1694.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (3 samples, 0.04%)</title><rect x="967.2" y="1667.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="970.2" y="1678.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1,568 samples, 18.67%)</title><rect x="968.0" y="1779.0" width="220.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="971.0" y="1790.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1,553 samples, 18.49%)</title><rect x="968.0" y="1763.0" width="218.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="971.0" y="1774.0">CompileBroker::compiler_threa..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (1,552 samples, 18.48%)</title><rect x="968.0" y="1747.0" width="218.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="971.0" y="1758.0">CompileBroker::invoke_compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1,540 samples, 18.34%)</title><rect x="968.1" y="1731.0" width="216.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="971.1" y="1742.0">C2Compiler::compile_method(c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (1,539 samples, 18.33%)</title><rect x="968.3" y="1715.0" width="216.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="971.3" y="1726.0">Compile::Compile(ciEnv*, C2C..</text>
</g>
<g>
<title>Compile::Code_Gen() (937 samples, 11.16%)</title><rect x="968.4" y="1699.0" width="131.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="971.4" y="1710.0">Compile::Code_Ge..</text>
</g>
<g>
<title>Compile::Output() (44 samples, 0.52%)</title><rect x="968.6" y="1683.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="971.6" y="1694.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.05%)</title><rect x="968.6" y="1667.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="971.6" y="1678.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (27 samples, 0.32%)</title><rect x="969.1" y="1667.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="972.1" y="1678.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (11 samples, 0.13%)</title><rect x="971.2" y="1651.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="974.2" y="1662.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (7 samples, 0.08%)</title><rect x="971.8" y="1635.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="974.8" y="1646.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (12 samples, 0.14%)</title><rect x="972.9" y="1667.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="975.9" y="1678.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (10 samples, 0.12%)</title><rect x="973.2" y="1651.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.2" y="1662.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (7 samples, 0.08%)</title><rect x="973.6" y="1635.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="976.6" y="1646.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (3 samples, 0.04%)</title><rect x="973.6" y="1619.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="976.6" y="1630.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (26 samples, 0.31%)</title><rect x="974.7" y="1683.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="977.7" y="1694.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (9 samples, 0.11%)</title><rect x="975.2" y="1667.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="978.2" y="1678.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.02%)</title><rect x="975.2" y="1651.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="978.2" y="1662.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (4 samples, 0.05%)</title><rect x="975.4" y="1651.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="978.4" y="1662.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.02%)</title><rect x="975.6" y="1635.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="978.6" y="1646.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (8 samples, 0.10%)</title><rect x="976.8" y="1667.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.8" y="1678.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (8 samples, 0.10%)</title><rect x="976.8" y="1651.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="979.8" y="1662.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (4 samples, 0.05%)</title><rect x="977.3" y="1635.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.3" y="1646.0"></text>
</g>
<g>
<title>Matcher::match() (108 samples, 1.29%)</title><rect x="978.7" y="1683.0" width="15.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.7" y="1694.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (40 samples, 0.48%)</title><rect x="978.7" y="1667.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.7" y="1678.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (8 samples, 0.10%)</title><rect x="985.1" y="1667.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="988.1" y="1678.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (51 samples, 0.61%)</title><rect x="986.3" y="1667.0" width="7.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="989.3" y="1678.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (3 samples, 0.04%)</title><rect x="987.8" y="1651.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.8" y="1662.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.02%)</title><rect x="987.9" y="1635.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="990.9" y="1646.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (32 samples, 0.38%)</title><rect x="988.2" y="1651.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="991.2" y="1662.0"></text>
</g>
<g>
<title>Chunk::next_chop() (2 samples, 0.02%)</title><rect x="988.9" y="1635.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="991.9" y="1646.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (15 samples, 0.18%)</title><rect x="989.2" y="1635.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="992.2" y="1646.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (10 samples, 0.12%)</title><rect x="989.5" y="1619.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.5" y="1630.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (5 samples, 0.06%)</title><rect x="989.6" y="1603.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.6" y="1614.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (3 samples, 0.04%)</title><rect x="989.9" y="1587.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.9" y="1598.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (2 samples, 0.02%)</title><rect x="990.1" y="1571.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="993.1" y="1582.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (4 samples, 0.05%)</title><rect x="990.3" y="1603.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="993.3" y="1614.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (2 samples, 0.02%)</title><rect x="990.5" y="1587.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="993.5" y="1598.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (7 samples, 0.08%)</title><rect x="991.3" y="1635.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="994.3" y="1646.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (4 samples, 0.05%)</title><rect x="991.3" y="1619.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="994.3" y="1630.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 0.04%)</title><rect x="991.3" y="1603.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="994.3" y="1614.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.02%)</title><rect x="991.3" y="1587.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="994.3" y="1598.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (2 samples, 0.02%)</title><rect x="992.7" y="1651.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="995.7" y="1662.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (2 samples, 0.02%)</title><rect x="993.4" y="1667.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="996.4" y="1678.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (2 samples, 0.02%)</title><rect x="993.8" y="1683.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="996.8" y="1694.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (2 samples, 0.02%)</title><rect x="994.1" y="1683.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="997.1" y="1694.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (2 samples, 0.02%)</title><rect x="994.1" y="1667.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="997.1" y="1678.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (105 samples, 1.25%)</title><rect x="994.4" y="1683.0" width="14.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="997.4" y="1694.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (103 samples, 1.23%)</title><rect x="994.6" y="1667.0" width="14.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="997.6" y="1678.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.06%)</title><rect x="994.7" y="1651.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="997.7" y="1662.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (23 samples, 0.27%)</title><rect x="995.4" y="1651.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="998.4" y="1662.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (3 samples, 0.04%)</title><rect x="995.8" y="1635.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="998.8" y="1646.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (5 samples, 0.06%)</title><rect x="996.2" y="1635.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="999.2" y="1646.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (7 samples, 0.08%)</title><rect x="996.9" y="1635.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="999.9" y="1646.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::grow(int) (2 samples, 0.02%)</title><rect x="997.6" y="1619.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1000.6" y="1630.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (4 samples, 0.05%)</title><rect x="997.9" y="1635.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1000.9" y="1646.0"></text>
</g>
<g>
<title>Compile::can_alias(TypePtr const*, int) (2 samples, 0.02%)</title><rect x="998.1" y="1619.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1001.1" y="1630.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (23 samples, 0.27%)</title><rect x="998.6" y="1651.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1001.6" y="1662.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (3 samples, 0.04%)</title><rect x="1000.2" y="1635.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1003.2" y="1646.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (6 samples, 0.07%)</title><rect x="1000.6" y="1635.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1003.6" y="1646.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (2 samples, 0.02%)</title><rect x="1001.4" y="1635.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1004.4" y="1646.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (6 samples, 0.07%)</title><rect x="1001.9" y="1651.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1004.9" y="1662.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (2 samples, 0.02%)</title><rect x="1002.4" y="1635.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1005.4" y="1646.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.07%)</title><rect x="1002.8" y="1651.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1005.8" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::mark_ssa() (3 samples, 0.04%)</title><rect x="1003.7" y="1651.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1006.7" y="1662.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.04%)</title><rect x="1004.1" y="1651.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1007.1" y="1662.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.04%)</title><rect x="1004.1" y="1635.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1007.1" y="1646.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (24 samples, 0.29%)</title><rect x="1004.5" y="1651.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1007.5" y="1662.0"></text>
</g>
<g>
<title>PhaseLive::add_livein(Block*, IndexSet*) (5 samples, 0.06%)</title><rect x="1006.2" y="1635.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1009.2" y="1646.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (7 samples, 0.08%)</title><rect x="1006.9" y="1635.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1009.9" y="1646.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.04%)</title><rect x="1007.5" y="1619.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1010.5" y="1630.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (2 samples, 0.02%)</title><rect x="1009.3" y="1683.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1012.3" y="1694.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (641 samples, 7.63%)</title><rect x="1009.6" y="1683.0" width="90.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1012.6" y="1694.0">PhaseChait..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (14 samples, 0.17%)</title><rect x="1009.7" y="1667.0" width="2.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1012.7" y="1678.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (4 samples, 0.05%)</title><rect x="1011.7" y="1667.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1014.7" y="1678.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.02%)</title><rect x="1012.3" y="1667.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1015.3" y="1678.0"></text>
</g>
<g>
<title>Node::rematerialize() const (5 samples, 0.06%)</title><rect x="1013.8" y="1667.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1016.8" y="1678.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (22 samples, 0.26%)</title><rect x="1014.5" y="1667.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1017.5" y="1678.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (21 samples, 0.25%)</title><rect x="1017.6" y="1667.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1020.6" y="1678.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (2 samples, 0.02%)</title><rect x="1018.9" y="1651.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1021.9" y="1662.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.05%)</title><rect x="1019.1" y="1651.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1022.1" y="1662.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (5 samples, 0.06%)</title><rect x="1019.7" y="1651.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1022.7" y="1662.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.02%)</title><rect x="1020.1" y="1635.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1023.1" y="1646.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (24 samples, 0.29%)</title><rect x="1020.5" y="1667.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1023.5" y="1678.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (3 samples, 0.04%)</title><rect x="1021.0" y="1651.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.0" y="1662.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.04%)</title><rect x="1021.4" y="1651.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1024.4" y="1662.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (15 samples, 0.18%)</title><rect x="1021.8" y="1651.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1024.8" y="1662.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (9 samples, 0.11%)</title><rect x="1022.7" y="1635.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1025.7" y="1646.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (73 samples, 0.87%)</title><rect x="1023.9" y="1667.0" width="10.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1026.9" y="1678.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (8 samples, 0.10%)</title><rect x="1031.8" y="1651.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.8" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.02%)</title><rect x="1033.3" y="1651.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1036.3" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (149 samples, 1.77%)</title><rect x="1034.3" y="1667.0" width="21.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1037.3" y="1678.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (3 samples, 0.04%)</title><rect x="1036.7" y="1651.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1039.7" y="1662.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 0.07%)</title><rect x="1037.3" y="1651.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1040.3" y="1662.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (2 samples, 0.02%)</title><rect x="1038.1" y="1651.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1041.1" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (21 samples, 0.25%)</title><rect x="1038.8" y="1651.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1041.8" y="1662.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.02%)</title><rect x="1041.3" y="1635.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1044.3" y="1646.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (58 samples, 0.69%)</title><rect x="1041.8" y="1651.0" width="8.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1044.8" y="1662.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (4 samples, 0.05%)</title><rect x="1046.4" y="1635.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1049.4" y="1646.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (21 samples, 0.25%)</title><rect x="1047.0" y="1635.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1050.0" y="1646.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (17 samples, 0.20%)</title><rect x="1049.9" y="1651.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.9" y="1662.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (7 samples, 0.08%)</title><rect x="1051.3" y="1635.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1054.3" y="1646.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.04%)</title><rect x="1052.3" y="1651.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.3" y="1662.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.02%)</title><rect x="1052.7" y="1651.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1055.7" y="1662.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (15 samples, 0.18%)</title><rect x="1053.0" y="1651.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1056.0" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (11 samples, 0.13%)</title><rect x="1055.3" y="1667.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1058.3" y="1678.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (9 samples, 0.11%)</title><rect x="1055.5" y="1651.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1058.5" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (3 samples, 0.04%)</title><rect x="1056.8" y="1667.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1059.8" y="1678.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (2 samples, 0.02%)</title><rect x="1057.5" y="1667.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1060.5" y="1678.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (39 samples, 0.46%)</title><rect x="1057.8" y="1667.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1060.8" y="1678.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.0] (9 samples, 0.11%)</title><rect x="1063.3" y="1667.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1066.3" y="1678.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (2 samples, 0.02%)</title><rect x="1064.2" y="1651.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1067.2" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (10 samples, 0.12%)</title><rect x="1064.5" y="1667.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1067.5" y="1678.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (82 samples, 0.98%)</title><rect x="1065.9" y="1667.0" width="11.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1068.9" y="1678.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (44 samples, 0.52%)</title><rect x="1071.0" y="1651.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1074.0" y="1662.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (4 samples, 0.05%)</title><rect x="1077.5" y="1667.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.5" y="1678.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (10 samples, 0.12%)</title><rect x="1078.0" y="1667.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1081.0" y="1678.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.02%)</title><rect x="1078.2" y="1651.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1081.2" y="1662.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (7 samples, 0.08%)</title><rect x="1078.4" y="1651.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1081.4" y="1662.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (3 samples, 0.04%)</title><rect x="1078.6" y="1635.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.6" y="1646.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (2 samples, 0.02%)</title><rect x="1078.7" y="1619.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1081.7" y="1630.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) [clone .part.0] (3 samples, 0.04%)</title><rect x="1079.0" y="1635.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1082.0" y="1646.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.02%)</title><rect x="1079.0" y="1619.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1082.0" y="1630.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (10 samples, 0.12%)</title><rect x="1079.4" y="1667.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1082.4" y="1678.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 0.07%)</title><rect x="1080.0" y="1651.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1083.0" y="1662.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (14 samples, 0.17%)</title><rect x="1080.8" y="1667.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1083.8" y="1678.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.04%)</title><rect x="1082.2" y="1651.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.2" y="1662.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (6 samples, 0.07%)</title><rect x="1082.8" y="1667.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1085.8" y="1678.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (4 samples, 0.05%)</title><rect x="1083.1" y="1651.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1086.1" y="1662.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (57 samples, 0.68%)</title><rect x="1083.6" y="1667.0" width="8.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.6" y="1678.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.02%)</title><rect x="1086.9" y="1651.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.9" y="1662.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (4 samples, 0.05%)</title><rect x="1087.3" y="1651.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.3" y="1662.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (27 samples, 0.32%)</title><rect x="1087.8" y="1651.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.8" y="1662.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.02%)</title><rect x="1090.5" y="1635.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.5" y="1646.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (2 samples, 0.02%)</title><rect x="1090.8" y="1635.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.8" y="1646.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.04%)</title><rect x="1091.1" y="1635.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.1" y="1646.0"></text>
</g>
<g>
<title>RegMask::Size() const (23 samples, 0.27%)</title><rect x="1091.6" y="1667.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1094.6" y="1678.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (4 samples, 0.05%)</title><rect x="1094.9" y="1667.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.9" y="1678.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (4 samples, 0.05%)</title><rect x="1095.6" y="1667.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1098.6" y="1678.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (2 samples, 0.02%)</title><rect x="1096.1" y="1667.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1099.1" y="1678.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (5 samples, 0.06%)</title><rect x="1096.4" y="1667.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1099.4" y="1678.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (9 samples, 0.11%)</title><rect x="1097.5" y="1667.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1100.5" y="1678.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (4 samples, 0.05%)</title><rect x="1098.8" y="1667.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1101.8" y="1678.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (2 samples, 0.02%)</title><rect x="1099.7" y="1683.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.7" y="1694.0"></text>
</g>
<g>
<title>Compile::Optimize() (427 samples, 5.08%)</title><rect x="1100.1" y="1699.0" width="60.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.1" y="1710.0">Compil..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (8 samples, 0.10%)</title><rect x="1100.2" y="1683.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.2" y="1694.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (8 samples, 0.10%)</title><rect x="1100.2" y="1667.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1103.2" y="1678.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) [clone .part.0] (2 samples, 0.02%)</title><rect x="1101.1" y="1651.0" width="0.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.1" y="1662.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (6 samples, 0.07%)</title><rect x="1101.3" y="1683.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.3" y="1694.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (6 samples, 0.07%)</title><rect x="1101.3" y="1667.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.3" y="1678.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (3 samples, 0.04%)</title><rect x="1101.3" y="1651.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.3" y="1662.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.0] (106 samples, 1.26%)</title><rect x="1102.2" y="1683.0" width="14.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1105.2" y="1694.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (105 samples, 1.25%)</title><rect x="1102.3" y="1667.0" width="14.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.3" y="1678.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (13 samples, 0.15%)</title><rect x="1103.6" y="1651.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.6" y="1662.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (6 samples, 0.07%)</title><rect x="1104.3" y="1635.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1107.3" y="1646.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.10%)</title><rect x="1105.4" y="1651.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.4" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (40 samples, 0.48%)</title><rect x="1106.5" y="1651.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.5" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (32 samples, 0.38%)</title><rect x="1107.5" y="1635.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.5" y="1646.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (3 samples, 0.04%)</title><rect x="1108.6" y="1619.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.6" y="1630.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (3 samples, 0.04%)</title><rect x="1109.3" y="1619.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.3" y="1630.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (14 samples, 0.17%)</title><rect x="1109.8" y="1619.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.8" y="1630.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (4 samples, 0.05%)</title><rect x="1109.9" y="1603.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.9" y="1614.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (4 samples, 0.05%)</title><rect x="1109.9" y="1587.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.9" y="1598.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (7 samples, 0.08%)</title><rect x="1110.8" y="1603.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.8" y="1614.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (6 samples, 0.07%)</title><rect x="1112.2" y="1651.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.2" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.02%)</title><rect x="1112.7" y="1635.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.7" y="1646.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (18 samples, 0.21%)</title><rect x="1113.0" y="1651.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.0" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (4 samples, 0.05%)</title><rect x="1114.1" y="1635.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.1" y="1646.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (5 samples, 0.06%)</title><rect x="1114.7" y="1635.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.7" y="1646.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.02%)</title><rect x="1115.0" y="1619.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1118.0" y="1630.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.10%)</title><rect x="1115.5" y="1651.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1118.5" y="1662.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.07%)</title><rect x="1115.8" y="1635.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.8" y="1646.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.0] (16 samples, 0.19%)</title><rect x="1117.1" y="1683.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.1" y="1694.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 0.13%)</title><rect x="1117.5" y="1667.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1120.5" y="1678.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 0.12%)</title><rect x="1117.6" y="1651.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.6" y="1662.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.02%)</title><rect x="1117.6" y="1635.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.6" y="1646.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (8 samples, 0.10%)</title><rect x="1117.9" y="1635.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.9" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.0] (8 samples, 0.10%)</title><rect x="1117.9" y="1619.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.9" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (8 samples, 0.10%)</title><rect x="1117.9" y="1603.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1120.9" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (8 samples, 0.10%)</title><rect x="1117.9" y="1587.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.9" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (8 samples, 0.10%)</title><rect x="1117.9" y="1571.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.9" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (8 samples, 0.10%)</title><rect x="1117.9" y="1555.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1120.9" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (8 samples, 0.10%)</title><rect x="1117.9" y="1539.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1120.9" y="1550.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (8 samples, 0.10%)</title><rect x="1117.9" y="1523.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1120.9" y="1534.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (6 samples, 0.07%)</title><rect x="1117.9" y="1507.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.9" y="1518.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.06%)</title><rect x="1117.9" y="1491.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.9" y="1502.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.04%)</title><rect x="1117.9" y="1475.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.9" y="1486.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.04%)</title><rect x="1117.9" y="1459.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.9" y="1470.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.04%)</title><rect x="1117.9" y="1443.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.9" y="1454.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.04%)</title><rect x="1117.9" y="1427.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.9" y="1438.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.04%)</title><rect x="1117.9" y="1411.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.9" y="1422.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (2 samples, 0.02%)</title><rect x="1118.1" y="1395.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.1" y="1406.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.02%)</title><rect x="1118.1" y="1379.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.1" y="1390.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (2 samples, 0.02%)</title><rect x="1118.3" y="1475.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.3" y="1486.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.02%)</title><rect x="1118.3" y="1459.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.3" y="1470.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (2 samples, 0.02%)</title><rect x="1118.8" y="1507.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1121.8" y="1518.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.02%)</title><rect x="1118.8" y="1491.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.8" y="1502.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (2 samples, 0.02%)</title><rect x="1119.0" y="1667.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (17 samples, 0.20%)</title><rect x="1119.3" y="1683.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.3" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (16 samples, 0.19%)</title><rect x="1119.5" y="1667.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.5" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) [clone .part.0] (4 samples, 0.05%)</title><rect x="1120.2" y="1651.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.2" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) [clone .constprop.0] (3 samples, 0.04%)</title><rect x="1120.3" y="1635.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.3" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (6 samples, 0.07%)</title><rect x="1120.9" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.9" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.02%)</title><rect x="1121.0" y="1635.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.0" y="1646.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (2 samples, 0.02%)</title><rect x="1121.3" y="1635.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.3" y="1646.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (10 samples, 0.12%)</title><rect x="1122.0" y="1683.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.0" y="1694.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (2 samples, 0.02%)</title><rect x="1123.0" y="1667.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.0" y="1678.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (9 samples, 0.11%)</title><rect x="1123.4" y="1683.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.4" y="1694.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (9 samples, 0.11%)</title><rect x="1123.4" y="1667.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.4" y="1678.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (5 samples, 0.06%)</title><rect x="1123.8" y="1651.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.8" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (120 samples, 1.43%)</title><rect x="1124.7" y="1683.0" width="16.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.7" y="1694.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (2 samples, 0.02%)</title><rect x="1124.8" y="1667.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.8" y="1678.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (10 samples, 0.12%)</title><rect x="1126.3" y="1667.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.3" y="1678.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (4 samples, 0.05%)</title><rect x="1127.2" y="1651.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.2" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 0.23%)</title><rect x="1127.8" y="1667.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.8" y="1678.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (4 samples, 0.05%)</title><rect x="1129.9" y="1651.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.9" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (32 samples, 0.38%)</title><rect x="1130.4" y="1667.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1133.4" y="1678.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (22 samples, 0.26%)</title><rect x="1131.8" y="1651.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.8" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (15 samples, 0.18%)</title><rect x="1132.7" y="1635.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.7" y="1646.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (3 samples, 0.04%)</title><rect x="1133.0" y="1619.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.0" y="1630.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (3 samples, 0.04%)</title><rect x="1133.0" y="1603.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.0" y="1614.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (2 samples, 0.02%)</title><rect x="1133.1" y="1587.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.1" y="1598.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (2 samples, 0.02%)</title><rect x="1133.1" y="1571.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.1" y="1582.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (5 samples, 0.06%)</title><rect x="1133.5" y="1619.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.5" y="1630.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.04%)</title><rect x="1133.7" y="1603.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.7" y="1614.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (4 samples, 0.05%)</title><rect x="1134.2" y="1619.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1137.2" y="1630.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (7 samples, 0.08%)</title><rect x="1134.9" y="1667.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.9" y="1678.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (10 samples, 0.12%)</title><rect x="1136.0" y="1667.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.0" y="1678.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (2 samples, 0.02%)</title><rect x="1136.6" y="1651.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.6" y="1662.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.05%)</title><rect x="1136.9" y="1651.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.9" y="1662.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (22 samples, 0.26%)</title><rect x="1137.4" y="1667.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.4" y="1678.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (19 samples, 0.23%)</title><rect x="1137.6" y="1651.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.6" y="1662.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.04%)</title><rect x="1138.7" y="1635.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.7" y="1646.0"></text>
</g>
<g>
<title>NodeHash::grow() (2 samples, 0.02%)</title><rect x="1138.9" y="1619.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.9" y="1630.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (5 samples, 0.06%)</title><rect x="1139.4" y="1635.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.4" y="1646.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (3 samples, 0.04%)</title><rect x="1139.7" y="1619.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.7" y="1630.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (3 samples, 0.04%)</title><rect x="1140.8" y="1667.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.8" y="1678.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (5 samples, 0.06%)</title><rect x="1141.5" y="1683.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.5" y="1694.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (107 samples, 1.27%)</title><rect x="1142.2" y="1683.0" width="15.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.2" y="1694.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (102 samples, 1.21%)</title><rect x="1142.8" y="1667.0" width="14.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.8" y="1678.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (9 samples, 0.11%)</title><rect x="1143.6" y="1651.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.6" y="1662.0"></text>
</g>
<g>
<title>IfNode::fold_compares(PhaseIterGVN*) (2 samples, 0.02%)</title><rect x="1143.9" y="1635.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.9" y="1646.0"></text>
</g>
<g>
<title>IfNode::search_identical(int) (2 samples, 0.02%)</title><rect x="1144.2" y="1635.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.2" y="1646.0"></text>
</g>
<g>
<title>idealize_test(PhaseGVN*, IfNode*) (2 samples, 0.02%)</title><rect x="1144.5" y="1635.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1147.5" y="1646.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.02%)</title><rect x="1144.5" y="1619.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.5" y="1630.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.02%)</title><rect x="1144.5" y="1603.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.5" y="1614.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (2 samples, 0.02%)</title><rect x="1144.5" y="1587.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.5" y="1598.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (7 samples, 0.08%)</title><rect x="1145.0" y="1651.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.0" y="1662.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (6 samples, 0.07%)</title><rect x="1145.2" y="1635.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.2" y="1646.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (5 samples, 0.06%)</title><rect x="1145.3" y="1619.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.3" y="1630.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (5 samples, 0.06%)</title><rect x="1145.3" y="1603.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.3" y="1614.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (2 samples, 0.02%)</title><rect x="1146.0" y="1651.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.0" y="1662.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (2 samples, 0.02%)</title><rect x="1146.0" y="1635.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.0" y="1646.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.02%)</title><rect x="1146.4" y="1651.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.4" y="1662.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (4 samples, 0.05%)</title><rect x="1147.1" y="1651.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.1" y="1662.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (10 samples, 0.12%)</title><rect x="1147.8" y="1651.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.8" y="1662.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.02%)</title><rect x="1148.8" y="1635.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.8" y="1646.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (5 samples, 0.06%)</title><rect x="1149.3" y="1651.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.3" y="1662.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (2 samples, 0.02%)</title><rect x="1149.5" y="1635.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.5" y="1646.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (9 samples, 0.11%)</title><rect x="1150.1" y="1651.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.1" y="1662.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (6 samples, 0.07%)</title><rect x="1150.1" y="1635.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.1" y="1646.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (4 samples, 0.05%)</title><rect x="1150.4" y="1619.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.4" y="1630.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (4 samples, 0.05%)</title><rect x="1150.4" y="1603.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.4" y="1614.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.02%)</title><rect x="1151.1" y="1635.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.1" y="1646.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (39 samples, 0.46%)</title><rect x="1151.4" y="1651.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.4" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.0] (39 samples, 0.46%)</title><rect x="1151.4" y="1635.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.4" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (39 samples, 0.46%)</title><rect x="1151.4" y="1619.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.4" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (39 samples, 0.46%)</title><rect x="1151.4" y="1603.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.4" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (33 samples, 0.39%)</title><rect x="1151.4" y="1587.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.4" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (31 samples, 0.37%)</title><rect x="1151.4" y="1571.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.4" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (31 samples, 0.37%)</title><rect x="1151.4" y="1555.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.4" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (31 samples, 0.37%)</title><rect x="1151.4" y="1539.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.4" y="1550.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (29 samples, 0.35%)</title><rect x="1151.4" y="1523.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.4" y="1534.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (27 samples, 0.32%)</title><rect x="1151.4" y="1507.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.4" y="1518.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (24 samples, 0.29%)</title><rect x="1151.4" y="1491.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.4" y="1502.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (21 samples, 0.25%)</title><rect x="1151.4" y="1475.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.4" y="1486.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (20 samples, 0.24%)</title><rect x="1151.4" y="1459.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.4" y="1470.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (16 samples, 0.19%)</title><rect x="1151.4" y="1443.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.4" y="1454.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (16 samples, 0.19%)</title><rect x="1151.4" y="1427.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.4" y="1438.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (12 samples, 0.14%)</title><rect x="1151.4" y="1411.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.4" y="1422.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (10 samples, 0.12%)</title><rect x="1151.4" y="1395.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.4" y="1406.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (8 samples, 0.10%)</title><rect x="1151.4" y="1379.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.4" y="1390.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (6 samples, 0.07%)</title><rect x="1151.4" y="1363.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.4" y="1374.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (6 samples, 0.07%)</title><rect x="1151.4" y="1347.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.4" y="1358.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (6 samples, 0.07%)</title><rect x="1151.4" y="1331.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.4" y="1342.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.06%)</title><rect x="1151.4" y="1315.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.4" y="1326.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.04%)</title><rect x="1151.4" y="1299.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.4" y="1310.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (3 samples, 0.04%)</title><rect x="1151.4" y="1283.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.4" y="1294.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (3 samples, 0.04%)</title><rect x="1151.4" y="1267.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.4" y="1278.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (2 samples, 0.02%)</title><rect x="1151.8" y="1299.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.8" y="1310.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.02%)</title><rect x="1151.8" y="1283.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.8" y="1294.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (2 samples, 0.02%)</title><rect x="1152.2" y="1363.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.2" y="1374.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (2 samples, 0.02%)</title><rect x="1152.5" y="1379.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.5" y="1390.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.02%)</title><rect x="1152.5" y="1363.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.5" y="1374.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (2 samples, 0.02%)</title><rect x="1152.8" y="1395.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.8" y="1406.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.02%)</title><rect x="1152.8" y="1379.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.8" y="1390.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (4 samples, 0.05%)</title><rect x="1153.0" y="1411.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.0" y="1422.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (4 samples, 0.05%)</title><rect x="1153.0" y="1395.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.0" y="1406.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (4 samples, 0.05%)</title><rect x="1153.6" y="1443.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.6" y="1454.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (4 samples, 0.05%)</title><rect x="1153.6" y="1427.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.6" y="1438.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (3 samples, 0.04%)</title><rect x="1154.3" y="1475.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.3" y="1486.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (3 samples, 0.04%)</title><rect x="1154.3" y="1459.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.3" y="1470.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (3 samples, 0.04%)</title><rect x="1154.7" y="1491.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.7" y="1502.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.02%)</title><rect x="1154.7" y="1475.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.7" y="1486.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (2 samples, 0.02%)</title><rect x="1155.2" y="1507.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.2" y="1518.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.02%)</title><rect x="1155.2" y="1491.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.2" y="1502.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (2 samples, 0.02%)</title><rect x="1155.4" y="1523.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.4" y="1534.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.02%)</title><rect x="1155.4" y="1507.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.4" y="1518.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (2 samples, 0.02%)</title><rect x="1155.7" y="1571.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.7" y="1582.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.02%)</title><rect x="1155.7" y="1555.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.7" y="1566.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.0] (6 samples, 0.07%)</title><rect x="1156.0" y="1587.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="1598.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (6 samples, 0.07%)</title><rect x="1156.0" y="1571.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="1582.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (11 samples, 0.13%)</title><rect x="1157.4" y="1683.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.4" y="1694.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.11%)</title><rect x="1157.4" y="1667.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.4" y="1678.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.11%)</title><rect x="1157.4" y="1651.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.4" y="1662.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.02%)</title><rect x="1157.8" y="1635.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.8" y="1646.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.02%)</title><rect x="1158.1" y="1635.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.1" y="1646.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*) (2 samples, 0.02%)</title><rect x="1158.7" y="1667.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.7" y="1678.0"></text>
</g>
<g>
<title>PhaseMacroExpand::generate_arraycopy(ArrayCopyNode*, AllocateArrayNode*, Node**, MergeMemNode*, Node**, TypePtr const*, BasicType, Node*, Node*, Node*, Node*, Node*, bool, bool, RegionNode*) (2 samples, 0.02%)</title><rect x="1158.7" y="1651.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.7" y="1662.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (5 samples, 0.06%)</title><rect x="1158.9" y="1683.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.9" y="1694.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.02%)</title><rect x="1158.9" y="1667.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.9" y="1678.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (3 samples, 0.04%)</title><rect x="1159.2" y="1667.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.2" y="1678.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (2 samples, 0.02%)</title><rect x="1160.1" y="1699.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.1" y="1710.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (4 samples, 0.05%)</title><rect x="1160.4" y="1699.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.4" y="1710.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (162 samples, 1.93%)</title><rect x="1161.1" y="1699.0" width="22.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.1" y="1710.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (162 samples, 1.93%)</title><rect x="1161.1" y="1683.0" width="22.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.1" y="1694.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (160 samples, 1.91%)</title><rect x="1161.1" y="1667.0" width="22.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.1" y="1678.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (157 samples, 1.87%)</title><rect x="1161.2" y="1651.0" width="22.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.2" y="1662.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (157 samples, 1.87%)</title><rect x="1161.2" y="1635.0" width="22.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.2" y="1646.0">P..</text>
</g>
<g>
<title>Parse::do_call() (156 samples, 1.86%)</title><rect x="1161.2" y="1619.0" width="21.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.2" y="1630.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (5 samples, 0.06%)</title><rect x="1161.2" y="1603.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.2" y="1614.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (4 samples, 0.05%)</title><rect x="1161.3" y="1587.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.3" y="1598.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (3 samples, 0.04%)</title><rect x="1161.5" y="1571.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.5" y="1582.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (3 samples, 0.04%)</title><rect x="1161.5" y="1555.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.5" y="1566.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (3 samples, 0.04%)</title><rect x="1161.5" y="1539.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.5" y="1550.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.04%)</title><rect x="1161.5" y="1523.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.5" y="1534.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (3 samples, 0.04%)</title><rect x="1161.5" y="1507.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.5" y="1518.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (3 samples, 0.04%)</title><rect x="1161.5" y="1491.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.5" y="1502.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_new(ciBytecodeStream*) (2 samples, 0.02%)</title><rect x="1161.6" y="1475.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.6" y="1486.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (2 samples, 0.02%)</title><rect x="1161.6" y="1459.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.6" y="1470.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (2 samples, 0.02%)</title><rect x="1161.6" y="1443.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.6" y="1454.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (2 samples, 0.02%)</title><rect x="1161.9" y="1603.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.9" y="1614.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (2 samples, 0.02%)</title><rect x="1161.9" y="1587.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.9" y="1598.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (118 samples, 1.41%)</title><rect x="1162.2" y="1603.0" width="16.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.2" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (118 samples, 1.41%)</title><rect x="1162.2" y="1587.0" width="16.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.2" y="1598.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (2 samples, 0.02%)</title><rect x="1162.2" y="1571.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.2" y="1582.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.0] (2 samples, 0.02%)</title><rect x="1162.2" y="1555.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.2" y="1566.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) [clone .part.0] (2 samples, 0.02%)</title><rect x="1162.2" y="1539.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.2" y="1550.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (114 samples, 1.36%)</title><rect x="1162.5" y="1571.0" width="16.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (114 samples, 1.36%)</title><rect x="1162.5" y="1555.0" width="16.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (114 samples, 1.36%)</title><rect x="1162.5" y="1539.0" width="16.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.5" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (111 samples, 1.32%)</title><rect x="1162.5" y="1523.0" width="15.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.5" y="1534.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (3 samples, 0.04%)</title><rect x="1162.5" y="1507.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.5" y="1518.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.02%)</title><rect x="1162.6" y="1491.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.6" y="1502.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.02%)</title><rect x="1162.6" y="1475.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.6" y="1486.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.02%)</title><rect x="1162.6" y="1459.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="1470.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.02%)</title><rect x="1162.6" y="1443.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.6" y="1454.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.02%)</title><rect x="1162.6" y="1427.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (91 samples, 1.08%)</title><rect x="1163.0" y="1507.0" width="12.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.0" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (91 samples, 1.08%)</title><rect x="1163.0" y="1491.0" width="12.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.0" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (88 samples, 1.05%)</title><rect x="1163.2" y="1475.0" width="12.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (87 samples, 1.04%)</title><rect x="1163.2" y="1459.0" width="12.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (86 samples, 1.02%)</title><rect x="1163.3" y="1443.0" width="12.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.3" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (81 samples, 0.96%)</title><rect x="1163.3" y="1427.0" width="11.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.3" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (61 samples, 0.73%)</title><rect x="1163.4" y="1411.0" width="8.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.4" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (61 samples, 0.73%)</title><rect x="1163.4" y="1395.0" width="8.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.4" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (61 samples, 0.73%)</title><rect x="1163.4" y="1379.0" width="8.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (61 samples, 0.73%)</title><rect x="1163.4" y="1363.0" width="8.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.4" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (60 samples, 0.71%)</title><rect x="1163.6" y="1347.0" width="8.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.6" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (53 samples, 0.63%)</title><rect x="1163.7" y="1331.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.7" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (50 samples, 0.60%)</title><rect x="1163.9" y="1315.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.9" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (50 samples, 0.60%)</title><rect x="1163.9" y="1299.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (50 samples, 0.60%)</title><rect x="1163.9" y="1283.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (49 samples, 0.58%)</title><rect x="1163.9" y="1267.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (48 samples, 0.57%)</title><rect x="1164.0" y="1251.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.0" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (45 samples, 0.54%)</title><rect x="1164.1" y="1235.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.1" y="1246.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.02%)</title><rect x="1164.1" y="1219.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.1" y="1230.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.02%)</title><rect x="1164.1" y="1203.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.1" y="1214.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.02%)</title><rect x="1164.1" y="1187.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.1" y="1198.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.02%)</title><rect x="1164.1" y="1171.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.1" y="1182.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.02%)</title><rect x="1164.1" y="1155.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.1" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.02%)</title><rect x="1164.1" y="1139.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.1" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.02%)</title><rect x="1164.1" y="1123.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.1" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.02%)</title><rect x="1164.1" y="1107.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.1" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (38 samples, 0.45%)</title><rect x="1164.4" y="1219.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.4" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (38 samples, 0.45%)</title><rect x="1164.4" y="1203.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.4" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (38 samples, 0.45%)</title><rect x="1164.4" y="1187.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (38 samples, 0.45%)</title><rect x="1164.4" y="1171.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (38 samples, 0.45%)</title><rect x="1164.4" y="1155.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (36 samples, 0.43%)</title><rect x="1164.4" y="1139.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.4" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (34 samples, 0.40%)</title><rect x="1164.7" y="1123.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.7" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (34 samples, 0.40%)</title><rect x="1164.7" y="1107.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (31 samples, 0.37%)</title><rect x="1164.8" y="1091.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (31 samples, 0.37%)</title><rect x="1164.8" y="1075.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (31 samples, 0.37%)</title><rect x="1164.8" y="1059.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (25 samples, 0.30%)</title><rect x="1165.0" y="1043.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.0" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (24 samples, 0.29%)</title><rect x="1165.1" y="1027.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.1" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (24 samples, 0.29%)</title><rect x="1165.1" y="1011.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.1" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (23 samples, 0.27%)</title><rect x="1165.3" y="995.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (23 samples, 0.27%)</title><rect x="1165.3" y="979.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (23 samples, 0.27%)</title><rect x="1165.3" y="963.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (19 samples, 0.23%)</title><rect x="1165.3" y="947.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.3" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (19 samples, 0.23%)</title><rect x="1165.3" y="931.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.3" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (19 samples, 0.23%)</title><rect x="1165.3" y="915.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (18 samples, 0.21%)</title><rect x="1165.3" y="899.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (18 samples, 0.21%)</title><rect x="1165.3" y="883.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (18 samples, 0.21%)</title><rect x="1165.3" y="867.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.13%)</title><rect x="1165.3" y="851.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.3" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.13%)</title><rect x="1165.3" y="835.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.3" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.13%)</title><rect x="1165.3" y="819.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.13%)</title><rect x="1165.3" y="803.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.13%)</title><rect x="1165.3" y="787.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.13%)</title><rect x="1165.3" y="771.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.08%)</title><rect x="1165.3" y="755.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.3" y="766.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1165.4" y="739.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.4" y="750.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (2 samples, 0.02%)</title><rect x="1165.4" y="723.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.4" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1165.8" y="739.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.8" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1165.8" y="723.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.8" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1165.8" y="707.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1165.8" y="691.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1165.8" y="675.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1165.8" y="659.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1165.8" y="643.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.02%)</title><rect x="1166.3" y="755.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (4 samples, 0.05%)</title><rect x="1166.8" y="851.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (4 samples, 0.05%)</title><rect x="1166.8" y="835.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.8" y="846.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (4 samples, 0.05%)</title><rect x="1166.8" y="819.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.8" y="830.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (4 samples, 0.05%)</title><rect x="1166.8" y="803.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.8" y="814.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (3 samples, 0.04%)</title><rect x="1167.0" y="787.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.0" y="798.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (3 samples, 0.04%)</title><rect x="1167.0" y="771.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.0" y="782.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool, bool) (3 samples, 0.04%)</title><rect x="1167.0" y="755.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.0" y="766.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (3 samples, 0.04%)</title><rect x="1167.0" y="739.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.0" y="750.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.04%)</title><rect x="1167.0" y="723.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.0" y="734.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.0] (3 samples, 0.04%)</title><rect x="1167.0" y="707.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.0" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.04%)</title><rect x="1167.0" y="691.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.0" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.04%)</title><rect x="1167.0" y="675.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.0" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.02%)</title><rect x="1167.0" y="659.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.02%)</title><rect x="1167.9" y="947.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.02%)</title><rect x="1167.9" y="931.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.9" y="942.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (2 samples, 0.02%)</title><rect x="1167.9" y="915.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.9" y="926.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.02%)</title><rect x="1167.9" y="899.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.9" y="910.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.02%)</title><rect x="1167.9" y="883.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.9" y="894.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool, bool) (2 samples, 0.02%)</title><rect x="1167.9" y="867.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.9" y="878.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (2 samples, 0.02%)</title><rect x="1167.9" y="851.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.9" y="862.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.02%)</title><rect x="1167.9" y="835.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.9" y="846.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.0] (2 samples, 0.02%)</title><rect x="1167.9" y="819.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.9" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.02%)</title><rect x="1167.9" y="803.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.9" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.02%)</title><rect x="1167.9" y="787.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.9" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.02%)</title><rect x="1167.9" y="771.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.9" y="782.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (2 samples, 0.02%)</title><rect x="1168.6" y="1043.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.6" y="1054.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (2 samples, 0.02%)</title><rect x="1168.9" y="1043.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.9" y="1054.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1169.8" y="1219.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.8" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1169.8" y="1203.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.8" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.05%)</title><rect x="1169.8" y="1187.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.05%)</title><rect x="1169.8" y="1171.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.05%)</title><rect x="1169.8" y="1155.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.05%)</title><rect x="1169.8" y="1139.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1169.8" y="1123.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.8" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1169.8" y="1107.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.8" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1169.8" y="1091.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1169.8" y="1075.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1169.8" y="1059.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1169.8" y="1043.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1169.9" y="1027.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (3 samples, 0.04%)</title><rect x="1171.3" y="1331.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.3" y="1342.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.02%)</title><rect x="1171.5" y="1315.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.5" y="1326.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (2 samples, 0.02%)</title><rect x="1171.5" y="1299.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.5" y="1310.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.02%)</title><rect x="1171.5" y="1283.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.5" y="1294.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.02%)</title><rect x="1171.5" y="1267.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.5" y="1278.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (2 samples, 0.02%)</title><rect x="1171.5" y="1251.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.5" y="1262.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (2 samples, 0.02%)</title><rect x="1171.5" y="1235.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.5" y="1246.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (2 samples, 0.02%)</title><rect x="1171.5" y="1219.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.5" y="1230.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (18 samples, 0.21%)</title><rect x="1172.0" y="1411.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.0" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (17 samples, 0.20%)</title><rect x="1172.0" y="1395.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.0" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (17 samples, 0.20%)</title><rect x="1172.0" y="1379.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.0" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (17 samples, 0.20%)</title><rect x="1172.0" y="1363.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.0" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (17 samples, 0.20%)</title><rect x="1172.0" y="1347.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.0" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (17 samples, 0.20%)</title><rect x="1172.0" y="1331.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.0" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (16 samples, 0.19%)</title><rect x="1172.0" y="1315.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.0" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 0.17%)</title><rect x="1172.2" y="1299.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.2" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 0.17%)</title><rect x="1172.2" y="1283.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 0.17%)</title><rect x="1172.2" y="1267.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 0.17%)</title><rect x="1172.2" y="1251.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 0.17%)</title><rect x="1172.2" y="1235.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.2" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 0.17%)</title><rect x="1172.2" y="1219.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.2" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.10%)</title><rect x="1172.2" y="1203.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.2" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.10%)</title><rect x="1172.2" y="1187.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.2" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.10%)</title><rect x="1172.2" y="1171.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.10%)</title><rect x="1172.2" y="1155.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.10%)</title><rect x="1172.2" y="1139.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.2" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.07%)</title><rect x="1172.2" y="1123.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.2" y="1134.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.02%)</title><rect x="1172.2" y="1107.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.2" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1172.4" y="1107.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.4" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.05%)</title><rect x="1172.4" y="1091.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1172.7" y="1075.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1172.7" y="1059.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.02%)</title><rect x="1173.0" y="1123.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.02%)</title><rect x="1173.0" y="1107.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.0" y="1118.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (2 samples, 0.02%)</title><rect x="1173.0" y="1091.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.0" y="1102.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.02%)</title><rect x="1173.0" y="1075.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.0" y="1086.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (2 samples, 0.02%)</title><rect x="1173.0" y="1059.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.0" y="1070.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.07%)</title><rect x="1173.3" y="1203.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.3" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.06%)</title><rect x="1173.3" y="1187.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.3" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.06%)</title><rect x="1173.3" y="1171.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.06%)</title><rect x="1173.3" y="1155.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.06%)</title><rect x="1173.3" y="1139.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.3" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.06%)</title><rect x="1173.3" y="1123.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.3" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.06%)</title><rect x="1173.3" y="1107.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.3" y="1118.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1173.4" y="1091.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.4" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1173.4" y="1075.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.4" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.05%)</title><rect x="1173.4" y="1059.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.05%)</title><rect x="1173.4" y="1043.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.05%)</title><rect x="1173.4" y="1027.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.05%)</title><rect x="1173.4" y="1011.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.05%)</title><rect x="1173.4" y="995.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.4" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1173.4" y="979.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.4" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.05%)</title><rect x="1173.4" y="963.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.05%)</title><rect x="1173.4" y="947.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.05%)</title><rect x="1173.4" y="931.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.05%)</title><rect x="1173.4" y="915.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.05%)</title><rect x="1173.4" y="899.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.4" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1173.6" y="883.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.6" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1173.6" y="867.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1173.6" y="851.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1173.6" y="835.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1173.6" y="819.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1173.6" y="803.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1173.6" y="787.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.6" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1173.6" y="771.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.02%)</title><rect x="1174.7" y="1427.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.7" y="1438.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (2 samples, 0.02%)</title><rect x="1175.0" y="1427.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.0" y="1438.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (14 samples, 0.17%)</title><rect x="1175.8" y="1507.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.8" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.13%)</title><rect x="1175.9" y="1491.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.9" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.13%)</title><rect x="1175.9" y="1475.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.13%)</title><rect x="1175.9" y="1459.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.13%)</title><rect x="1175.9" y="1443.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.13%)</title><rect x="1175.9" y="1427.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.9" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.13%)</title><rect x="1175.9" y="1411.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.9" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.12%)</title><rect x="1175.9" y="1395.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.12%)</title><rect x="1175.9" y="1379.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.12%)</title><rect x="1175.9" y="1363.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.12%)</title><rect x="1175.9" y="1347.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.12%)</title><rect x="1175.9" y="1331.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.11%)</title><rect x="1175.9" y="1315.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.9" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.08%)</title><rect x="1176.1" y="1299.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.1" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.08%)</title><rect x="1176.1" y="1283.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.1" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.08%)</title><rect x="1176.1" y="1267.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.1" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.08%)</title><rect x="1176.1" y="1251.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.1" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.08%)</title><rect x="1176.1" y="1235.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.08%)</title><rect x="1176.1" y="1219.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.1" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.07%)</title><rect x="1176.1" y="1203.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.1" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.07%)</title><rect x="1176.1" y="1187.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.07%)</title><rect x="1176.1" y="1171.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.1" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.07%)</title><rect x="1176.1" y="1155.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.07%)</title><rect x="1176.1" y="1139.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.1" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.07%)</title><rect x="1176.1" y="1123.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.1" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.06%)</title><rect x="1176.2" y="1107.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.2" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.06%)</title><rect x="1176.2" y="1091.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.06%)</title><rect x="1176.2" y="1075.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.06%)</title><rect x="1176.2" y="1059.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.06%)</title><rect x="1176.2" y="1043.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1176.2" y="1027.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.2" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1176.2" y="1011.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.2" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1176.2" y="995.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1176.4" y="979.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1176.4" y="963.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1176.4" y="947.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1176.4" y="931.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (2 samples, 0.02%)</title><rect x="1176.7" y="1027.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="1038.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1177.5" y="1491.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.5" y="1502.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1177.5" y="1475.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.5" y="1486.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1177.5" y="1459.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.5" y="1470.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (3 samples, 0.04%)</title><rect x="1178.1" y="1523.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.1" y="1534.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (2 samples, 0.02%)</title><rect x="1178.2" y="1507.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.2" y="1518.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (31 samples, 0.37%)</title><rect x="1178.8" y="1603.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (26 samples, 0.31%)</title><rect x="1178.9" y="1587.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.9" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (26 samples, 0.31%)</title><rect x="1178.9" y="1571.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (26 samples, 0.31%)</title><rect x="1178.9" y="1555.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (26 samples, 0.31%)</title><rect x="1178.9" y="1539.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (25 samples, 0.30%)</title><rect x="1179.0" y="1523.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.0" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (25 samples, 0.30%)</title><rect x="1179.0" y="1507.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.0" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (21 samples, 0.25%)</title><rect x="1179.2" y="1491.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.2" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (21 samples, 0.25%)</title><rect x="1179.2" y="1475.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (21 samples, 0.25%)</title><rect x="1179.2" y="1459.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (21 samples, 0.25%)</title><rect x="1179.2" y="1443.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (21 samples, 0.25%)</title><rect x="1179.2" y="1427.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.2" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (19 samples, 0.23%)</title><rect x="1179.3" y="1411.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.13%)</title><rect x="1179.5" y="1395.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.13%)</title><rect x="1179.5" y="1379.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.12%)</title><rect x="1179.5" y="1363.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.12%)</title><rect x="1179.5" y="1347.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.5" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.12%)</title><rect x="1179.5" y="1331.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.5" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.10%)</title><rect x="1179.6" y="1315.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.06%)</title><rect x="1179.6" y="1299.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.6" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.06%)</title><rect x="1179.6" y="1283.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.6" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.06%)</title><rect x="1179.6" y="1267.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.06%)</title><rect x="1179.6" y="1251.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.06%)</title><rect x="1179.6" y="1235.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.6" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.05%)</title><rect x="1179.6" y="1219.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.6" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1179.6" y="1203.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.6" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1179.6" y="1187.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1179.6" y="1171.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.6" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1179.6" y="1155.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1179.6" y="1139.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1179.6" y="1123.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1179.6" y="1107.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.6" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1179.6" y="1091.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="1102.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1180.3" y="1299.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.3" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1180.3" y="1283.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.3" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1180.3" y="1267.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1180.3" y="1251.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1180.3" y="1235.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1180.3" y="1219.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1180.3" y="1203.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1180.4" y="1187.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1180.4" y="1171.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1180.4" y="1155.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1180.4" y="1139.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1180.4" y="1123.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.4" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1180.4" y="1107.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.4" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1180.4" y="1091.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.4" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1180.4" y="1075.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1180.4" y="1059.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1180.4" y="1043.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1180.4" y="1027.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1180.4" y="1011.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="1022.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (7 samples, 0.08%)</title><rect x="1181.0" y="1395.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="1406.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.08%)</title><rect x="1181.0" y="1379.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.0" y="1390.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.08%)</title><rect x="1181.0" y="1363.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.0" y="1374.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.08%)</title><rect x="1181.0" y="1347.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.08%)</title><rect x="1181.0" y="1331.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.0" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.08%)</title><rect x="1181.0" y="1315.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="1326.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.08%)</title><rect x="1181.0" y="1299.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1181.1" y="1283.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.1" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1181.1" y="1267.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.1" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1181.1" y="1251.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.1" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1181.1" y="1235.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.1" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1181.1" y="1219.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.1" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1181.1" y="1203.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1181.1" y="1187.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.1" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1181.1" y="1171.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.1" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1181.1" y="1155.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1181.1" y="1139.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.1" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1181.1" y="1123.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="1134.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1181.4" y="1283.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.4" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1181.4" y="1267.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.4" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.05%)</title><rect x="1181.4" y="1251.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.4" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.05%)</title><rect x="1181.4" y="1235.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.4" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.05%)</title><rect x="1181.4" y="1219.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.4" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.05%)</title><rect x="1181.4" y="1203.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.4" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.05%)</title><rect x="1181.4" y="1187.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.4" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1181.6" y="1171.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.6" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1181.6" y="1155.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1181.6" y="1139.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1181.6" y="1123.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1181.6" y="1107.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1181.6" y="1091.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.6" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1181.7" y="1075.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.7" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1181.7" y="1059.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1181.7" y="1043.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1181.7" y="1027.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1181.7" y="1011.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1181.7" y="995.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1181.7" y="979.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1181.7" y="963.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1181.7" y="947.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1181.7" y="931.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1181.7" y="915.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1181.7" y="899.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1181.7" y="883.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1181.7" y="867.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1181.7" y="851.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1181.7" y="835.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1181.7" y="819.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1181.7" y="803.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1181.7" y="787.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1181.7" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1181.7" y="755.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1181.7" y="739.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1181.7" y="723.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1181.7" y="707.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1181.7" y="691.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.7" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1181.7" y="675.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1181.7" y="659.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.02%)</title><rect x="1181.7" y="643.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.02%)</title><rect x="1181.7" y="627.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.02%)</title><rect x="1181.7" y="611.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1182.1" y="1491.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.1" y="1502.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1182.1" y="1475.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.1" y="1486.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1182.1" y="1459.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.1" y="1470.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1182.6" y="1587.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.6" y="1598.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.05%)</title><rect x="1182.6" y="1571.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.6" y="1582.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.05%)</title><rect x="1182.6" y="1555.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.6" y="1566.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.05%)</title><rect x="1182.6" y="1539.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.05%)</title><rect x="1182.6" y="1523.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.6" y="1534.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.05%)</title><rect x="1182.6" y="1507.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.6" y="1518.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1182.6" y="1491.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.6" y="1502.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1182.6" y="1475.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.6" y="1486.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1182.6" y="1459.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="1470.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1182.6" y="1443.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.6" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1182.6" y="1427.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.6" y="1438.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1182.6" y="1411.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.6" y="1422.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1182.6" y="1395.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="1406.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1182.6" y="1379.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="1390.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.04%)</title><rect x="1182.6" y="1363.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.6" y="1374.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.04%)</title><rect x="1182.6" y="1347.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.6" y="1358.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.04%)</title><rect x="1182.6" y="1331.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.04%)</title><rect x="1182.6" y="1315.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.6" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.04%)</title><rect x="1182.6" y="1299.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="1310.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.04%)</title><rect x="1182.6" y="1283.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="1294.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1182.7" y="1267.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.02%)</title><rect x="1182.7" y="1251.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.7" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.02%)</title><rect x="1182.7" y="1235.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.7" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.02%)</title><rect x="1182.7" y="1219.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.7" y="1230.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.02%)</title><rect x="1183.8" y="1699.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="1710.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.02%)</title><rect x="1183.8" y="1683.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="1694.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (3 samples, 0.04%)</title><rect x="1184.1" y="1699.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.1" y="1710.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (3 samples, 0.04%)</title><rect x="1184.1" y="1683.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.1" y="1694.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (2 samples, 0.02%)</title><rect x="1184.2" y="1667.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.2" y="1678.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (7 samples, 0.08%)</title><rect x="1184.5" y="1731.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.5" y="1742.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (7 samples, 0.08%)</title><rect x="1184.5" y="1715.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.5" y="1726.0"></text>
</g>
<g>
<title>Compilation::compile_method() (7 samples, 0.08%)</title><rect x="1184.5" y="1699.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.5" y="1710.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (7 samples, 0.08%)</title><rect x="1184.5" y="1683.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="1694.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.0] (3 samples, 0.04%)</title><rect x="1184.5" y="1667.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.5" y="1678.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 0.04%)</title><rect x="1184.5" y="1651.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.5" y="1662.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 0.04%)</title><rect x="1184.5" y="1635.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.5" y="1646.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 0.04%)</title><rect x="1184.5" y="1619.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.5" y="1630.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.02%)</title><rect x="1184.7" y="1603.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.7" y="1614.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.02%)</title><rect x="1184.7" y="1587.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.7" y="1598.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.02%)</title><rect x="1184.7" y="1571.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.7" y="1582.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (3 samples, 0.04%)</title><rect x="1184.9" y="1667.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.9" y="1678.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (2 samples, 0.02%)</title><rect x="1185.6" y="1731.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.6" y="1742.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (2 samples, 0.02%)</title><rect x="1185.6" y="1715.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.6" y="1726.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (15 samples, 0.18%)</title><rect x="1186.2" y="1763.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.2" y="1774.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (15 samples, 0.18%)</title><rect x="1186.2" y="1747.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.2" y="1758.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (15 samples, 0.18%)</title><rect x="1186.2" y="1731.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.2" y="1742.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (3 samples, 0.04%)</title><rect x="1186.2" y="1715.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.2" y="1726.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (2 samples, 0.02%)</title><rect x="1186.2" y="1699.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.2" y="1710.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (11 samples, 0.13%)</title><rect x="1186.8" y="1715.0" width="1.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1189.8" y="1726.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (2 samples, 0.02%)</title><rect x="1187.0" y="1699.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.0" y="1710.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (7 samples, 0.08%)</title><rect x="1187.3" y="1699.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.3" y="1710.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (6 samples, 0.07%)</title><rect x="1187.3" y="1683.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.3" y="1694.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.02%)</title><rect x="1187.9" y="1667.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.9" y="1678.0"></text>
</g>
<g>
<title>VMThread::run() (11 samples, 0.13%)</title><rect x="1188.3" y="1779.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.3" y="1790.0"></text>
</g>
<g>
<title>VMThread::loop() (11 samples, 0.13%)</title><rect x="1188.3" y="1763.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.3" y="1774.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (4 samples, 0.05%)</title><rect x="1188.3" y="1747.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.3" y="1758.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.0] (3 samples, 0.04%)</title><rect x="1188.9" y="1747.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="1758.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (3 samples, 0.04%)</title><rect x="1188.9" y="1731.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="1742.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (3 samples, 0.04%)</title><rect x="1188.9" y="1715.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.9" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (3 samples, 0.04%)</title><rect x="1188.9" y="1699.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (2 samples, 0.02%)</title><rect x="1189.0" y="1683.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.0" y="1694.0"></text>
</g>
<g>
<title>__sched_yield (4 samples, 0.05%)</title><rect x="1189.3" y="1747.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1192.3" y="1758.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="1189.4" y="1731.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1192.4" y="1742.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.04%)</title><rect x="1189.4" y="1715.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1192.4" y="1726.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (3 samples, 0.04%)</title><rect x="1189.4" y="1699.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1192.4" y="1710.0"></text>
</g>
<g>
<title>do_sched_yield (3 samples, 0.04%)</title><rect x="1189.4" y="1683.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1192.4" y="1694.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.04%)</title><rect x="1189.4" y="1667.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1192.4" y="1678.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.04%)</title><rect x="1189.4" y="1651.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1192.4" y="1662.0"></text>
</g>
</g>
</svg>
