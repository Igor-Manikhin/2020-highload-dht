<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (11,808 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.06%)</title><rect x="10.1" y="995.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.1" y="1006.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (7 samples, 0.06%)</title><rect x="10.1" y="979.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.1" y="990.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (7 samples, 0.06%)</title><rect x="10.1" y="963.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.1" y="974.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (5 samples, 0.04%)</title><rect x="10.2" y="947.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.2" y="958.0"></text>
</g>
<g>
<title>[not_walkable_Java] (8 samples, 0.07%)</title><rect x="10.9" y="995.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.9" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.06%)</title><rect x="11.0" y="979.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.0" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.05%)</title><rect x="11.1" y="963.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.1" y="974.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.03%)</title><rect x="11.3" y="947.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.3" y="958.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.06%)</title><rect x="11.7" y="995.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="14.7" y="1006.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (4 samples, 0.03%)</title><rect x="12.0" y="979.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="15.0" y="990.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.04%)</title><rect x="12.4" y="995.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="15.4" y="1006.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (11,662 samples, 98.76%)</title><rect x="13.0" y="995.0" width="1165.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="1006.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (4 samples, 0.03%)</title><rect x="15.0" y="979.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.0" y="990.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (530 samples, 4.49%)</title><rect x="15.4" y="979.0" width="53.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.4" y="990.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (519 samples, 4.40%)</title><rect x="16.5" y="963.0" width="51.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.5" y="974.0">one/n..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (22 samples, 0.19%)</title><rect x="20.9" y="947.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="23.9" y="958.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (3 samples, 0.03%)</title><rect x="23.1" y="947.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="26.1" y="958.0"></text>
</g>
<g>
<title>clock_gettime (42 samples, 0.36%)</title><rect x="23.4" y="947.0" width="4.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="26.4" y="958.0"></text>
</g>
<g>
<title>clock_gettime (26 samples, 0.22%)</title><rect x="25.0" y="931.0" width="2.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="28.0" y="942.0"></text>
</g>
<g>
<title>[vdso] (25 samples, 0.21%)</title><rect x="25.1" y="915.0" width="2.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="28.1" y="926.0"></text>
</g>
<g>
<title>epoll_wait (407 samples, 3.45%)</title><rect x="27.6" y="947.0" width="40.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="30.6" y="958.0">epo..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (292 samples, 2.47%)</title><rect x="39.1" y="931.0" width="29.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="42.1" y="942.0">en..</text>
</g>
<g>
<title>do_syscall_64 (289 samples, 2.45%)</title><rect x="39.4" y="915.0" width="28.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="42.4" y="926.0">do..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (271 samples, 2.30%)</title><rect x="40.9" y="899.0" width="27.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="43.9" y="910.0">_..</text>
</g>
<g>
<title>do_epoll_wait (267 samples, 2.26%)</title><rect x="41.0" y="883.0" width="26.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="44.0" y="894.0">d..</text>
</g>
<g>
<title>__fdget (11 samples, 0.09%)</title><rect x="41.2" y="867.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="44.2" y="878.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.08%)</title><rect x="41.3" y="851.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="44.3" y="862.0"></text>
</g>
<g>
<title>__fget (10 samples, 0.08%)</title><rect x="41.3" y="835.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="44.3" y="846.0"></text>
</g>
<g>
<title>ep_poll (243 samples, 2.06%)</title><rect x="42.5" y="867.0" width="24.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="45.5" y="878.0">e..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (6 samples, 0.05%)</title><rect x="43.9" y="851.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="46.9" y="862.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (160 samples, 1.36%)</title><rect x="44.7" y="851.0" width="16.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="47.7" y="862.0"></text>
</g>
<g>
<title>ep_send_events_proc (101 samples, 0.86%)</title><rect x="48.7" y="835.0" width="10.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="51.7" y="846.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (21 samples, 0.18%)</title><rect x="49.5" y="819.0" width="2.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="52.5" y="830.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (71 samples, 0.60%)</title><rect x="51.6" y="819.0" width="7.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="54.6" y="830.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (11 samples, 0.09%)</title><rect x="52.0" y="803.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="55.0" y="814.0"></text>
</g>
<g>
<title>sock_poll (55 samples, 0.47%)</title><rect x="53.1" y="803.0" width="5.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="56.1" y="814.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (19 samples, 0.16%)</title><rect x="54.0" y="787.0" width="1.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="57.0" y="798.0"></text>
</g>
<g>
<title>tcp_poll (19 samples, 0.16%)</title><rect x="55.9" y="787.0" width="1.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="58.9" y="798.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (8 samples, 0.07%)</title><rect x="57.8" y="787.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="60.8" y="798.0"></text>
</g>
<g>
<title>mutex_lock (18 samples, 0.15%)</title><rect x="58.8" y="835.0" width="1.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="61.8" y="846.0"></text>
</g>
<g>
<title>mutex_unlock (7 samples, 0.06%)</title><rect x="60.9" y="851.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="63.9" y="862.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (50 samples, 0.42%)</title><rect x="61.6" y="851.0" width="5.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="64.6" y="862.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (50 samples, 0.42%)</title><rect x="61.6" y="835.0" width="5.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="64.6" y="846.0"></text>
</g>
<g>
<title>schedule (50 samples, 0.42%)</title><rect x="61.6" y="819.0" width="5.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="64.6" y="830.0"></text>
</g>
<g>
<title>__sched_text_start (49 samples, 0.41%)</title><rect x="61.7" y="803.0" width="4.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="64.7" y="814.0"></text>
</g>
<g>
<title>finish_task_switch (46 samples, 0.39%)</title><rect x="62.0" y="787.0" width="4.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="65.0" y="798.0"></text>
</g>
<g>
<title>apic_timer_interrupt (6 samples, 0.05%)</title><rect x="66.0" y="771.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="69.0" y="782.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (6 samples, 0.05%)</title><rect x="66.0" y="755.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="69.0" y="766.0"></text>
</g>
<g>
<title>irq_exit (6 samples, 0.05%)</title><rect x="66.0" y="739.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="69.0" y="750.0"></text>
</g>
<g>
<title>__softirqentry_text_start (6 samples, 0.05%)</title><rect x="66.0" y="723.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="69.0" y="734.0"></text>
</g>
<g>
<title>run_rebalance_domains (4 samples, 0.03%)</title><rect x="66.0" y="707.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="69.0" y="718.0"></text>
</g>
<g>
<title>update_blocked_averages (4 samples, 0.03%)</title><rect x="66.0" y="691.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="69.0" y="702.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.03%)</title><rect x="66.0" y="675.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="69.0" y="686.0"></text>
</g>
<g>
<title>fput_many (9 samples, 0.08%)</title><rect x="66.8" y="867.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="69.8" y="878.0"></text>
</g>
<g>
<title>fput (3 samples, 0.03%)</title><rect x="67.7" y="883.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="70.7" y="894.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.03%)</title><rect x="68.0" y="899.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="71.0" y="910.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (11,093 samples, 93.94%)</title><rect x="68.4" y="979.0" width="1108.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="71.4" y="990.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (11,060 samples, 93.67%)</title><rect x="71.7" y="963.0" width="1105.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.7" y="974.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (10,339 samples, 87.56%)</title><rect x="71.7" y="947.0" width="1033.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.7" y="958.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (15 samples, 0.13%)</title><rect x="79.4" y="931.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="82.4" y="942.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (9,961 samples, 84.36%)</title><rect x="80.9" y="931.0" width="995.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.9" y="942.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (9,961 samples, 84.36%)</title><rect x="80.9" y="915.0" width="995.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.9" y="926.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (9,871 samples, 83.60%)</title><rect x="80.9" y="899.0" width="986.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="83.9" y="910.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (21 samples, 0.18%)</title><rect x="81.1" y="883.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="84.1" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.05%)</title><rect x="82.5" y="867.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="85.5" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (58 samples, 0.49%)</title><rect x="83.2" y="883.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="86.2" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (57 samples, 0.48%)</title><rect x="83.3" y="867.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="86.3" y="878.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.05%)</title><rect x="84.7" y="851.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.7" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.05%)</title><rect x="84.7" y="835.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.7" y="846.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.06%)</title><rect x="85.3" y="851.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.3" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.06%)</title><rect x="85.3" y="835.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="88.3" y="846.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.03%)</title><rect x="85.7" y="819.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.7" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (18 samples, 0.15%)</title><rect x="86.0" y="851.0" width="1.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="89.0" y="862.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (10 samples, 0.08%)</title><rect x="87.8" y="851.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.8" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="88.5" y="835.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="91.5" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="88.5" y="819.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.5" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.03%)</title><rect x="88.5" y="803.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.5" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/AsyncServiceImpl.entity (9,790 samples, 82.91%)</title><rect x="88.9" y="883.0" width="978.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="91.9" y="894.0">ru/mail/polis/service/manikhin/AsyncServiceImpl.entity</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (22 samples, 0.19%)</title><rect x="90.8" y="867.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.8" y="878.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (14 samples, 0.12%)</title><rect x="91.5" y="851.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.5" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (14 samples, 0.12%)</title><rect x="91.5" y="835.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.5" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Replicas.replicaFactor (50 samples, 0.42%)</title><rect x="93.0" y="867.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.0" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Replicas.parser (50 samples, 0.42%)</title><rect x="93.0" y="851.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.0" y="862.0"></text>
</g>
<g>
<title>java/lang/String.split (50 samples, 0.42%)</title><rect x="93.0" y="835.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="96.0" y="846.0"></text>
</g>
<g>
<title>java/lang/String.split (50 samples, 0.42%)</title><rect x="93.0" y="819.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.0" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (13 samples, 0.11%)</title><rect x="94.6" y="803.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (13 samples, 0.11%)</title><rect x="94.6" y="787.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.6" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (14 samples, 0.12%)</title><rect x="96.1" y="803.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="99.1" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (14 samples, 0.12%)</title><rect x="96.1" y="787.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.1" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (14 samples, 0.12%)</title><rect x="96.1" y="771.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="99.1" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (14 samples, 0.12%)</title><rect x="96.1" y="755.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="99.1" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (14 samples, 0.12%)</title><rect x="96.1" y="739.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.1" y="750.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_array_post_entry(HeapWord*, unsigned long) (11 samples, 0.09%)</title><rect x="96.2" y="723.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="99.2" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.03%)</title><rect x="97.6" y="803.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="100.6" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.handleMultiRequest (9,653 samples, 81.75%)</title><rect x="98.0" y="867.0" width="964.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.0" y="878.0">ru/mail/polis/service/manikhin/ReplicasRequests.handleMultiRequest</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (15 samples, 0.13%)</title><rect x="99.6" y="851.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="102.6" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.multiPut (9,622 samples, 81.49%)</title><rect x="101.1" y="851.0" width="961.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="104.1" y="862.0">ru/mail/polis/service/manikhin/ReplicasRequests.multiPut</text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 0.10%)</title><rect x="103.2" y="835.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="106.2" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (12 samples, 0.10%)</title><rect x="103.2" y="819.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.2" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.put (3,154 samples, 26.71%)</title><rect x="104.7" y="835.0" width="315.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="107.7" y="846.0">one/nio/http/HttpClient.put</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (22 samples, 0.19%)</title><rect x="107.2" y="819.0" width="2.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="110.2" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (13 samples, 0.11%)</title><rect x="109.4" y="819.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="112.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.04%)</title><rect x="110.2" y="803.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.03%)</title><rect x="110.3" y="787.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.03%)</title><rect x="110.3" y="771.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="113.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.03%)</title><rect x="110.3" y="755.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="113.3" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3,094 samples, 26.20%)</title><rect x="110.7" y="819.0" width="309.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="113.7" y="830.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3,092 samples, 26.19%)</title><rect x="110.9" y="803.0" width="309.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="113.9" y="814.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (27 samples, 0.23%)</title><rect x="113.0" y="787.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (5 samples, 0.04%)</title><rect x="114.7" y="771.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.7" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.03%)</title><rect x="115.2" y="771.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="118.2" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (679 samples, 5.75%)</title><rect x="115.7" y="787.0" width="67.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="118.7" y="798.0">one/nio..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (17 samples, 0.14%)</title><rect x="116.5" y="771.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="119.5" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (17 samples, 0.14%)</title><rect x="116.5" y="755.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="119.5" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (17 samples, 0.14%)</title><rect x="116.5" y="739.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="119.5" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (17 samples, 0.14%)</title><rect x="116.5" y="723.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="119.5" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (9 samples, 0.08%)</title><rect x="116.5" y="707.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="119.5" y="718.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (8 samples, 0.07%)</title><rect x="117.4" y="707.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="120.4" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (3 samples, 0.03%)</title><rect x="117.5" y="691.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="120.5" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (3 samples, 0.03%)</title><rect x="117.5" y="675.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="120.5" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (650 samples, 5.50%)</title><rect x="118.3" y="771.0" width="65.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="121.3" y="782.0">one/nio..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (25 samples, 0.21%)</title><rect x="121.7" y="755.0" width="2.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="124.7" y="766.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (30 samples, 0.25%)</title><rect x="124.2" y="755.0" width="3.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="127.2" y="766.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.04%)</title><rect x="124.6" y="739.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="127.6" y="750.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (6 samples, 0.05%)</title><rect x="125.1" y="739.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="128.1" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (14 samples, 0.12%)</title><rect x="125.7" y="739.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="128.7" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.03%)</title><rect x="126.3" y="723.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="129.3" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (3 samples, 0.03%)</title><rect x="126.6" y="723.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="129.6" y="734.0"></text>
</g>
<g>
<title>__recv (559 samples, 4.73%)</title><rect x="127.2" y="755.0" width="55.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="130.2" y="766.0">__recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (505 samples, 4.28%)</title><rect x="132.6" y="739.0" width="50.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="135.6" y="750.0">entry..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (7 samples, 0.06%)</title><rect x="132.7" y="723.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="135.7" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (497 samples, 4.21%)</title><rect x="133.4" y="723.0" width="49.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="136.4" y="734.0">do_sy..</text>
</g>
<g>
<title>__x64_sys_recvfrom (455 samples, 3.85%)</title><rect x="137.4" y="707.0" width="45.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="140.4" y="718.0">__x6..</text>
</g>
<g>
<title>__sys_recvfrom (452 samples, 3.83%)</title><rect x="137.4" y="691.0" width="45.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="140.4" y="702.0">__sy..</text>
</g>
<g>
<title>fput_many (5 samples, 0.04%)</title><rect x="137.9" y="675.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="140.9" y="686.0"></text>
</g>
<g>
<title>sock_recvmsg (427 samples, 3.62%)</title><rect x="138.6" y="675.0" width="42.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="141.6" y="686.0">sock..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.07%)</title><rect x="138.6" y="659.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="141.6" y="670.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (3 samples, 0.03%)</title><rect x="139.4" y="659.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="142.4" y="670.0"></text>
</g>
<g>
<title>inet6_recvmsg (387 samples, 3.28%)</title><rect x="139.7" y="659.0" width="38.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="142.7" y="670.0">ine..</text>
</g>
<g>
<title>tcp_recvmsg (382 samples, 3.24%)</title><rect x="140.2" y="643.0" width="38.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="143.2" y="654.0">tcp..</text>
</g>
<g>
<title>__kfree_skb (69 samples, 0.58%)</title><rect x="142.8" y="627.0" width="6.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="145.8" y="638.0"></text>
</g>
<g>
<title>kfree_skbmem (9 samples, 0.08%)</title><rect x="142.8" y="611.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="145.8" y="622.0"></text>
</g>
<g>
<title>skb_release_all (60 samples, 0.51%)</title><rect x="143.7" y="611.0" width="6.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="146.7" y="622.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (4 samples, 0.03%)</title><rect x="143.7" y="595.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="146.7" y="606.0"></text>
</g>
<g>
<title>skb_release_data (19 samples, 0.16%)</title><rect x="144.3" y="595.0" width="1.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="147.3" y="606.0"></text>
</g>
<g>
<title>skb_release_head_state (30 samples, 0.25%)</title><rect x="146.2" y="595.0" width="3.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="149.2" y="606.0"></text>
</g>
<g>
<title>dst_release (29 samples, 0.25%)</title><rect x="146.3" y="579.0" width="2.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="149.3" y="590.0"></text>
</g>
<g>
<title>sock_rfree (5 samples, 0.04%)</title><rect x="149.2" y="595.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="152.2" y="606.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (19 samples, 0.16%)</title><rect x="150.0" y="627.0" width="1.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="153.0" y="638.0"></text>
</g>
<g>
<title>sk_wait_data (121 samples, 1.02%)</title><rect x="152.5" y="627.0" width="12.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="155.5" y="638.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (13 samples, 0.11%)</title><rect x="153.0" y="611.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="156.0" y="622.0"></text>
</g>
<g>
<title>add_wait_queue (6 samples, 0.05%)</title><rect x="154.4" y="611.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="157.4" y="622.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (4 samples, 0.03%)</title><rect x="154.6" y="595.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="157.6" y="606.0"></text>
</g>
<g>
<title>lock_sock_nested (9 samples, 0.08%)</title><rect x="155.0" y="611.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="158.0" y="622.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (9 samples, 0.08%)</title><rect x="155.0" y="595.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="158.0" y="606.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (9 samples, 0.08%)</title><rect x="155.0" y="579.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="158.0" y="590.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.03%)</title><rect x="155.9" y="611.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="158.9" y="622.0"></text>
</g>
<g>
<title>remove_wait_queue (5 samples, 0.04%)</title><rect x="156.3" y="611.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="159.3" y="622.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (3 samples, 0.03%)</title><rect x="156.5" y="595.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="159.5" y="606.0"></text>
</g>
<g>
<title>wait_woken (75 samples, 0.64%)</title><rect x="157.1" y="611.0" width="7.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="160.1" y="622.0"></text>
</g>
<g>
<title>schedule_timeout (68 samples, 0.58%)</title><rect x="157.8" y="595.0" width="6.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="160.8" y="606.0"></text>
</g>
<g>
<title>__mod_timer (16 samples, 0.14%)</title><rect x="157.9" y="579.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="160.9" y="590.0"></text>
</g>
<g>
<title>__lock_text_start (13 samples, 0.11%)</title><rect x="158.1" y="563.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="161.1" y="574.0"></text>
</g>
<g>
<title>del_timer_sync (12 samples, 0.10%)</title><rect x="159.5" y="579.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="162.5" y="590.0"></text>
</g>
<g>
<title>try_to_del_timer_sync (12 samples, 0.10%)</title><rect x="159.5" y="563.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="162.5" y="574.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.04%)</title><rect x="159.5" y="547.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="162.5" y="558.0"></text>
</g>
<g>
<title>lock_timer_base (7 samples, 0.06%)</title><rect x="160.0" y="547.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="163.0" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (7 samples, 0.06%)</title><rect x="160.0" y="531.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="163.0" y="542.0"></text>
</g>
<g>
<title>schedule (39 samples, 0.33%)</title><rect x="160.7" y="579.0" width="3.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="163.7" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (39 samples, 0.33%)</title><rect x="160.7" y="563.0" width="3.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="163.7" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (35 samples, 0.30%)</title><rect x="161.1" y="547.0" width="3.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="164.1" y="558.0"></text>
</g>
<g>
<title>apic_timer_interrupt (4 samples, 0.03%)</title><rect x="164.2" y="531.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="167.2" y="542.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (4 samples, 0.03%)</title><rect x="164.2" y="515.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="167.2" y="526.0"></text>
</g>
<g>
<title>irq_exit (4 samples, 0.03%)</title><rect x="164.2" y="499.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="167.2" y="510.0"></text>
</g>
<g>
<title>__softirqentry_text_start (4 samples, 0.03%)</title><rect x="164.2" y="483.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="167.2" y="494.0"></text>
</g>
<g>
<title>run_rebalance_domains (3 samples, 0.03%)</title><rect x="164.3" y="467.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="167.3" y="478.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (42 samples, 0.36%)</title><rect x="164.6" y="627.0" width="4.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="167.6" y="638.0"></text>
</g>
<g>
<title>__skb_datagram_iter (42 samples, 0.36%)</title><rect x="164.6" y="611.0" width="4.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="167.6" y="622.0"></text>
</g>
<g>
<title>simple_copy_to_iter (35 samples, 0.30%)</title><rect x="165.3" y="595.0" width="3.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="168.3" y="606.0"></text>
</g>
<g>
<title>__check_object_size (14 samples, 0.12%)</title><rect x="165.3" y="579.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="168.3" y="590.0"></text>
</g>
<g>
<title>__virt_addr_valid (7 samples, 0.06%)</title><rect x="166.0" y="563.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="169.0" y="574.0"></text>
</g>
<g>
<title>_copy_to_iter (20 samples, 0.17%)</title><rect x="166.7" y="579.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="169.7" y="590.0"></text>
</g>
<g>
<title>copy_user_generic_string (14 samples, 0.12%)</title><rect x="167.3" y="563.0" width="1.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="170.3" y="574.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (62 samples, 0.53%)</title><rect x="168.9" y="627.0" width="6.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="171.9" y="638.0"></text>
</g>
<g>
<title>tcp_send_ack (47 samples, 0.40%)</title><rect x="170.4" y="611.0" width="4.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="173.4" y="622.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (47 samples, 0.40%)</title><rect x="170.4" y="595.0" width="4.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="173.4" y="606.0"></text>
</g>
<g>
<title>__alloc_skb (10 samples, 0.08%)</title><rect x="170.4" y="579.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="173.4" y="590.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (6 samples, 0.05%)</title><rect x="170.6" y="563.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="173.6" y="574.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (5 samples, 0.04%)</title><rect x="170.6" y="547.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="173.6" y="558.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (35 samples, 0.30%)</title><rect x="171.4" y="579.0" width="3.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="174.4" y="590.0"></text>
</g>
<g>
<title>ip_queue_xmit (33 samples, 0.28%)</title><rect x="171.5" y="563.0" width="3.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="174.5" y="574.0"></text>
</g>
<g>
<title>__ip_queue_xmit (33 samples, 0.28%)</title><rect x="171.5" y="547.0" width="3.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="174.5" y="558.0"></text>
</g>
<g>
<title>ip_local_out (30 samples, 0.25%)</title><rect x="171.5" y="531.0" width="3.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="174.5" y="542.0"></text>
</g>
<g>
<title>ip_output (30 samples, 0.25%)</title><rect x="171.5" y="515.0" width="3.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="174.5" y="526.0"></text>
</g>
<g>
<title>ip_finish_output (30 samples, 0.25%)</title><rect x="171.5" y="499.0" width="3.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="174.5" y="510.0"></text>
</g>
<g>
<title>__ip_finish_output (29 samples, 0.25%)</title><rect x="171.6" y="483.0" width="2.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="174.6" y="494.0"></text>
</g>
<g>
<title>ip_finish_output2 (29 samples, 0.25%)</title><rect x="171.6" y="467.0" width="2.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="174.6" y="478.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (23 samples, 0.19%)</title><rect x="171.6" y="451.0" width="2.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="174.6" y="462.0"></text>
</g>
<g>
<title>do_softirq.part.0 (23 samples, 0.19%)</title><rect x="171.6" y="435.0" width="2.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="174.6" y="446.0"></text>
</g>
<g>
<title>do_softirq_own_stack (20 samples, 0.17%)</title><rect x="171.8" y="419.0" width="2.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="174.8" y="430.0"></text>
</g>
<g>
<title>__softirqentry_text_start (19 samples, 0.16%)</title><rect x="171.8" y="403.0" width="1.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="174.8" y="414.0"></text>
</g>
<g>
<title>net_rx_action (19 samples, 0.16%)</title><rect x="171.8" y="387.0" width="1.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="174.8" y="398.0"></text>
</g>
<g>
<title>process_backlog (19 samples, 0.16%)</title><rect x="171.8" y="371.0" width="1.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="174.8" y="382.0"></text>
</g>
<g>
<title>__netif_receive_skb (18 samples, 0.15%)</title><rect x="171.9" y="355.0" width="1.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="174.9" y="366.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (18 samples, 0.15%)</title><rect x="171.9" y="339.0" width="1.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="174.9" y="350.0"></text>
</g>
<g>
<title>ip_rcv (18 samples, 0.15%)</title><rect x="171.9" y="323.0" width="1.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="174.9" y="334.0"></text>
</g>
<g>
<title>ip_rcv_finish (18 samples, 0.15%)</title><rect x="171.9" y="307.0" width="1.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="174.9" y="318.0"></text>
</g>
<g>
<title>ip_local_deliver (18 samples, 0.15%)</title><rect x="171.9" y="291.0" width="1.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="174.9" y="302.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (18 samples, 0.15%)</title><rect x="171.9" y="275.0" width="1.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="174.9" y="286.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (18 samples, 0.15%)</title><rect x="171.9" y="259.0" width="1.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="174.9" y="270.0"></text>
</g>
<g>
<title>tcp_v4_rcv (18 samples, 0.15%)</title><rect x="171.9" y="243.0" width="1.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="174.9" y="254.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (15 samples, 0.13%)</title><rect x="172.2" y="227.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="175.2" y="238.0"></text>
</g>
<g>
<title>tcp_rcv_established (15 samples, 0.13%)</title><rect x="172.2" y="211.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="175.2" y="222.0"></text>
</g>
<g>
<title>__kfree_skb (6 samples, 0.05%)</title><rect x="172.2" y="195.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="175.2" y="206.0"></text>
</g>
<g>
<title>skb_release_all (5 samples, 0.04%)</title><rect x="172.3" y="179.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="175.3" y="190.0"></text>
</g>
<g>
<title>skb_release_data (4 samples, 0.03%)</title><rect x="172.3" y="163.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="175.3" y="174.0"></text>
</g>
<g>
<title>skb_free_head (4 samples, 0.03%)</title><rect x="172.3" y="147.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="175.3" y="158.0"></text>
</g>
<g>
<title>kfree (4 samples, 0.03%)</title><rect x="172.3" y="131.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="175.3" y="142.0"></text>
</g>
<g>
<title>tcp_ack (9 samples, 0.08%)</title><rect x="172.8" y="195.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="175.8" y="206.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (3 samples, 0.03%)</title><rect x="173.1" y="179.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="176.1" y="190.0"></text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.03%)</title><rect x="173.1" y="163.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="176.1" y="174.0"></text>
</g>
<g>
<title>dev_queue_xmit (6 samples, 0.05%)</title><rect x="173.9" y="451.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="176.9" y="462.0"></text>
</g>
<g>
<title>__dev_queue_xmit (6 samples, 0.05%)</title><rect x="173.9" y="435.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="176.9" y="446.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (31 samples, 0.26%)</title><rect x="175.1" y="627.0" width="3.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="178.1" y="638.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (29 samples, 0.25%)</title><rect x="175.3" y="611.0" width="2.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="178.3" y="622.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (17 samples, 0.14%)</title><rect x="175.5" y="595.0" width="1.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="178.5" y="606.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.03%)</title><rect x="177.2" y="595.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="180.2" y="606.0"></text>
</g>
<g>
<title>read_tsc (6 samples, 0.05%)</title><rect x="177.6" y="595.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="180.6" y="606.0"></text>
</g>
<g>
<title>security_socket_recvmsg (28 samples, 0.24%)</title><rect x="178.4" y="659.0" width="2.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="181.4" y="670.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (25 samples, 0.21%)</title><rect x="178.7" y="643.0" width="2.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="181.7" y="654.0"></text>
</g>
<g>
<title>aa_sk_perm (25 samples, 0.21%)</title><rect x="178.7" y="627.0" width="2.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="181.7" y="638.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (19 samples, 0.16%)</title><rect x="179.3" y="611.0" width="1.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="182.3" y="622.0"></text>
</g>
<g>
<title>aa_profile_af_perm (9 samples, 0.08%)</title><rect x="180.3" y="595.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="183.3" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (13 samples, 0.11%)</title><rect x="181.3" y="675.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="184.3" y="686.0"></text>
</g>
<g>
<title>__fdget (8 samples, 0.07%)</title><rect x="181.4" y="659.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="184.4" y="670.0"></text>
</g>
<g>
<title>__fget_light (8 samples, 0.07%)</title><rect x="181.4" y="643.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="184.4" y="654.0"></text>
</g>
<g>
<title>__fget (8 samples, 0.07%)</title><rect x="181.4" y="627.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="184.4" y="638.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.03%)</title><rect x="182.2" y="659.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="185.2" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (367 samples, 3.11%)</title><rect x="183.6" y="787.0" width="36.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="186.6" y="798.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (14 samples, 0.12%)</title><rect x="183.9" y="771.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.9" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (12 samples, 0.10%)</title><rect x="184.1" y="755.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="187.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.05%)</title><rect x="184.2" y="739.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="187.2" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.03%)</title><rect x="184.5" y="723.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="187.5" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.04%)</title><rect x="184.8" y="739.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="187.8" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (109 samples, 0.92%)</title><rect x="185.3" y="771.0" width="10.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="188.3" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (11 samples, 0.09%)</title><rect x="189.1" y="755.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="192.1" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (60 samples, 0.51%)</title><rect x="190.2" y="755.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="193.2" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (60 samples, 0.51%)</title><rect x="190.2" y="739.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="193.2" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (11 samples, 0.09%)</title><rect x="196.2" y="771.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.2" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (149 samples, 1.26%)</title><rect x="197.3" y="771.0" width="14.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.3" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (50 samples, 0.42%)</title><rect x="212.2" y="771.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="215.2" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (39 samples, 0.33%)</title><rect x="213.3" y="755.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="216.3" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (39 samples, 0.33%)</title><rect x="213.3" y="739.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="216.3" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (15 samples, 0.13%)</title><rect x="215.7" y="723.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="218.7" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (3 samples, 0.03%)</title><rect x="217.2" y="771.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="220.2" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.setBody (28 samples, 0.24%)</title><rect x="217.5" y="771.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="220.5" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (132 samples, 1.12%)</title><rect x="220.3" y="787.0" width="13.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.3" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (22 samples, 0.19%)</title><rect x="221.6" y="771.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.6" y="782.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (12 samples, 0.10%)</title><rect x="222.6" y="755.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.6" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (12 samples, 0.10%)</title><rect x="222.6" y="739.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="225.6" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (84 samples, 0.71%)</title><rect x="223.8" y="771.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.8" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (14 samples, 0.12%)</title><rect x="225.7" y="755.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.7" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (8 samples, 0.07%)</title><rect x="226.3" y="739.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.3" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (14 samples, 0.12%)</title><rect x="227.2" y="755.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.03%)</title><rect x="228.0" y="739.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.0" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="228.3" y="739.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="231.3" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (36 samples, 0.30%)</title><rect x="228.6" y="755.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.6" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (36 samples, 0.30%)</title><rect x="228.6" y="739.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.6" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (33 samples, 0.28%)</title><rect x="228.9" y="723.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.9" y="734.0"></text>
</g>
<g>
<title>java/lang/String.length (10 samples, 0.08%)</title><rect x="231.2" y="707.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.2" y="718.0"></text>
</g>
<g>
<title>java/lang/String.coder (6 samples, 0.05%)</title><rect x="231.5" y="691.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.5" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (13 samples, 0.11%)</title><rect x="232.1" y="771.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.1" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.03%)</title><rect x="233.0" y="755.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.0" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.03%)</title><rect x="233.0" y="739.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="236.0" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (34 samples, 0.29%)</title><rect x="233.4" y="787.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (29 samples, 0.25%)</title><rect x="233.9" y="771.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="236.9" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (29 samples, 0.25%)</title><rect x="233.9" y="755.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.9" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (20 samples, 0.17%)</title><rect x="234.8" y="739.0" width="2.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="237.8" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (299 samples, 2.53%)</title><rect x="236.8" y="787.0" width="29.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="239.8" y="798.0">on..</text>
</g>
<g>
<title>setsockopt (282 samples, 2.39%)</title><rect x="238.5" y="771.0" width="28.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="241.5" y="782.0">se..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (248 samples, 2.10%)</title><rect x="241.9" y="755.0" width="24.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="244.9" y="766.0">e..</text>
</g>
<g>
<title>do_syscall_64 (244 samples, 2.07%)</title><rect x="242.3" y="739.0" width="24.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="245.3" y="750.0">d..</text>
</g>
<g>
<title>__x64_sys_setsockopt (193 samples, 1.63%)</title><rect x="247.1" y="723.0" width="19.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="250.1" y="734.0"></text>
</g>
<g>
<title>__sys_setsockopt (189 samples, 1.60%)</title><rect x="247.1" y="707.0" width="18.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="250.1" y="718.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_setsockopt (7 samples, 0.06%)</title><rect x="248.0" y="691.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="251.0" y="702.0"></text>
</g>
<g>
<title>__get_user_4 (5 samples, 0.04%)</title><rect x="248.8" y="691.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="251.8" y="702.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="249.3" y="691.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="252.3" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (16 samples, 0.14%)</title><rect x="249.6" y="691.0" width="1.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="252.6" y="702.0"></text>
</g>
<g>
<title>security_socket_setsockopt (54 samples, 0.46%)</title><rect x="251.4" y="691.0" width="5.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="254.4" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (47 samples, 0.40%)</title><rect x="252.1" y="675.0" width="4.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="255.1" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (46 samples, 0.39%)</title><rect x="252.2" y="659.0" width="4.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="255.2" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (38 samples, 0.32%)</title><rect x="252.7" y="643.0" width="3.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="255.7" y="654.0"></text>
</g>
<g>
<title>aa_profile_af_perm (14 samples, 0.12%)</title><rect x="255.1" y="627.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="258.1" y="638.0"></text>
</g>
<g>
<title>rcu_all_qs (3 samples, 0.03%)</title><rect x="256.5" y="643.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="259.5" y="654.0"></text>
</g>
<g>
<title>sock_setsockopt (71 samples, 0.60%)</title><rect x="256.8" y="691.0" width="7.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="259.8" y="702.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="257.3" y="675.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="260.3" y="686.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (34 samples, 0.29%)</title><rect x="257.7" y="675.0" width="3.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="260.7" y="686.0"></text>
</g>
<g>
<title>lock_sock_nested (4 samples, 0.03%)</title><rect x="261.1" y="675.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="264.1" y="686.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (4 samples, 0.03%)</title><rect x="261.1" y="659.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="264.1" y="670.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.03%)</title><rect x="261.5" y="675.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="264.5" y="686.0"></text>
</g>
<g>
<title>sock_set_timeout (15 samples, 0.13%)</title><rect x="261.9" y="675.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="264.9" y="686.0"></text>
</g>
<g>
<title>copy_user_generic_string (10 samples, 0.08%)</title><rect x="262.4" y="659.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="265.4" y="670.0"></text>
</g>
<g>
<title>tcp_release_cb (5 samples, 0.04%)</title><rect x="263.4" y="675.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="266.4" y="686.0"></text>
</g>
<g>
<title>sockfd_lookup_light (21 samples, 0.18%)</title><rect x="263.9" y="691.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="266.9" y="702.0"></text>
</g>
<g>
<title>__fdget (18 samples, 0.15%)</title><rect x="263.9" y="675.0" width="1.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="266.9" y="686.0"></text>
</g>
<g>
<title>__fget_light (18 samples, 0.15%)</title><rect x="263.9" y="659.0" width="1.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="266.9" y="670.0"></text>
</g>
<g>
<title>__fget (18 samples, 0.15%)</title><rect x="263.9" y="643.0" width="1.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="266.9" y="654.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.03%)</title><rect x="265.7" y="675.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="268.7" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.03%)</title><rect x="266.4" y="723.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="269.4" y="734.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.03%)</title><rect x="266.4" y="707.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="269.4" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.03%)</title><rect x="266.4" y="691.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="269.4" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.03%)</title><rect x="266.4" y="675.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="269.4" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (1,509 samples, 12.78%)</title><rect x="266.7" y="787.0" width="150.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.7" y="798.0">one/nio/net/NativeS..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (14 samples, 0.12%)</title><rect x="268.9" y="771.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="271.9" y="782.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (36 samples, 0.30%)</title><rect x="270.3" y="771.0" width="3.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="273.3" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (11 samples, 0.09%)</title><rect x="270.7" y="755.0" width="1.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="273.7" y="766.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.04%)</title><rect x="271.8" y="755.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="274.8" y="766.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (15 samples, 0.13%)</title><rect x="272.3" y="755.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="275.3" y="766.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.03%)</title><rect x="272.9" y="739.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="275.9" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (5 samples, 0.04%)</title><rect x="273.2" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="276.2" y="750.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.06%)</title><rect x="273.9" y="771.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="276.9" y="782.0"></text>
</g>
<g>
<title>send (1,430 samples, 12.11%)</title><rect x="274.6" y="771.0" width="142.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="277.6" y="782.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,401 samples, 11.86%)</title><rect x="277.5" y="755.0" width="140.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="280.5" y="766.0">entry_SYSCALL_64_a..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="277.7" y="739.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="280.7" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (1,396 samples, 11.82%)</title><rect x="278.0" y="739.0" width="139.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="281.0" y="750.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (1,365 samples, 11.56%)</title><rect x="279.9" y="723.0" width="136.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="282.9" y="734.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,361 samples, 11.53%)</title><rect x="279.9" y="707.0" width="136.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="282.9" y="718.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (4 samples, 0.03%)</title><rect x="280.1" y="691.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="283.1" y="702.0"></text>
</g>
<g>
<title>sock_sendmsg (1,342 samples, 11.37%)</title><rect x="280.6" y="691.0" width="134.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="283.6" y="702.0">sock_sendmsg</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="280.7" y="675.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="283.7" y="686.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (3 samples, 0.03%)</title><rect x="281.0" y="675.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="284.0" y="686.0"></text>
</g>
<g>
<title>inet6_sendmsg (1,308 samples, 11.08%)</title><rect x="281.3" y="675.0" width="130.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="284.3" y="686.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (1,305 samples, 11.05%)</title><rect x="281.4" y="659.0" width="130.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="284.4" y="670.0">tcp_sendmsg</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (5 samples, 0.04%)</title><rect x="281.5" y="643.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="284.5" y="654.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (16 samples, 0.14%)</title><rect x="282.1" y="643.0" width="1.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="285.1" y="654.0"></text>
</g>
<g>
<title>release_sock (26 samples, 0.22%)</title><rect x="283.7" y="643.0" width="2.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="286.7" y="654.0"></text>
</g>
<g>
<title>__release_sock (25 samples, 0.21%)</title><rect x="283.8" y="627.0" width="2.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="286.8" y="638.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (23 samples, 0.19%)</title><rect x="284.0" y="611.0" width="2.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="287.0" y="622.0"></text>
</g>
<g>
<title>tcp_rcv_established (21 samples, 0.18%)</title><rect x="284.2" y="595.0" width="2.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="287.2" y="606.0"></text>
</g>
<g>
<title>__tcp_ack_snd_check (4 samples, 0.03%)</title><rect x="284.3" y="579.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="287.3" y="590.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (4 samples, 0.03%)</title><rect x="284.3" y="563.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="287.3" y="574.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.03%)</title><rect x="284.4" y="547.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="287.4" y="558.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.03%)</title><rect x="284.4" y="531.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="287.4" y="542.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.03%)</title><rect x="284.4" y="515.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="287.4" y="526.0"></text>
</g>
<g>
<title>tcp_ack (11 samples, 0.09%)</title><rect x="284.7" y="579.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="287.7" y="590.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (7 samples, 0.06%)</title><rect x="285.1" y="563.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="288.1" y="574.0"></text>
</g>
<g>
<title>__kfree_skb (4 samples, 0.03%)</title><rect x="285.4" y="547.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="288.4" y="558.0"></text>
</g>
<g>
<title>tcp_queue_rcv (3 samples, 0.03%)</title><rect x="285.9" y="579.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="288.9" y="590.0"></text>
</g>
<g>
<title>tcp_push (4 samples, 0.03%)</title><rect x="286.4" y="643.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="289.4" y="654.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,243 samples, 10.53%)</title><rect x="287.0" y="643.0" width="124.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="290.0" y="654.0">tcp_sendmsg_loc..</text>
</g>
<g>
<title>__check_object_size (6 samples, 0.05%)</title><rect x="289.0" y="627.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="292.0" y="638.0"></text>
</g>
<g>
<title>__virt_addr_valid (5 samples, 0.04%)</title><rect x="289.1" y="611.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="292.1" y="622.0"></text>
</g>
<g>
<title>_copy_from_iter_full (13 samples, 0.11%)</title><rect x="289.8" y="627.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="292.8" y="638.0"></text>
</g>
<g>
<title>copy_user_generic_string (12 samples, 0.10%)</title><rect x="289.8" y="611.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="292.8" y="622.0"></text>
</g>
<g>
<title>sk_page_frag_refill (4 samples, 0.03%)</title><rect x="291.6" y="627.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="294.6" y="638.0"></text>
</g>
<g>
<title>skb_page_frag_refill (4 samples, 0.03%)</title><rect x="291.6" y="611.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="294.6" y="622.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (85 samples, 0.72%)</title><rect x="292.0" y="627.0" width="8.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="295.0" y="638.0"></text>
</g>
<g>
<title>__alloc_skb (82 samples, 0.69%)</title><rect x="292.2" y="611.0" width="8.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="295.2" y="622.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (38 samples, 0.32%)</title><rect x="293.1" y="595.0" width="3.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="296.1" y="606.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (26 samples, 0.22%)</title><rect x="293.1" y="579.0" width="2.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="296.1" y="590.0"></text>
</g>
<g>
<title>__slab_alloc (5 samples, 0.04%)</title><rect x="294.5" y="563.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="297.5" y="574.0"></text>
</g>
<g>
<title>kmalloc_slab (7 samples, 0.06%)</title><rect x="295.0" y="563.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="298.0" y="574.0"></text>
</g>
<g>
<title>memset (9 samples, 0.08%)</title><rect x="295.9" y="579.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="298.9" y="590.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (17 samples, 0.14%)</title><rect x="297.0" y="595.0" width="1.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="300.0" y="606.0"></text>
</g>
<g>
<title>__slab_alloc (3 samples, 0.03%)</title><rect x="298.4" y="579.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="301.4" y="590.0"></text>
</g>
<g>
<title>ksize (5 samples, 0.04%)</title><rect x="298.7" y="595.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="301.7" y="606.0"></text>
</g>
<g>
<title>__ksize (5 samples, 0.04%)</title><rect x="298.7" y="579.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="301.7" y="590.0"></text>
</g>
<g>
<title>memset (10 samples, 0.08%)</title><rect x="299.3" y="595.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="302.3" y="606.0"></text>
</g>
<g>
<title>skb_entail (4 samples, 0.03%)</title><rect x="300.5" y="627.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="303.5" y="638.0"></text>
</g>
<g>
<title>tcp_push (1,078 samples, 9.13%)</title><rect x="301.0" y="627.0" width="107.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="304.0" y="638.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (1,078 samples, 9.13%)</title><rect x="301.0" y="611.0" width="107.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="304.0" y="622.0">__tcp_push_pe..</text>
</g>
<g>
<title>tcp_chrono_stop (3 samples, 0.03%)</title><rect x="301.2" y="595.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="304.2" y="606.0"></text>
</g>
<g>
<title>tcp_write_xmit (1,070 samples, 9.06%)</title><rect x="301.8" y="595.0" width="106.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="304.8" y="606.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (968 samples, 8.20%)</title><rect x="303.2" y="579.0" width="96.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="306.2" y="590.0">__tcp_trans..</text>
</g>
<g>
<title>ip_queue_xmit (938 samples, 7.94%)</title><rect x="305.0" y="563.0" width="93.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="308.0" y="574.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (937 samples, 7.94%)</title><rect x="305.0" y="547.0" width="93.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="308.0" y="558.0">__ip_queue_..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (14 samples, 0.12%)</title><rect x="305.7" y="531.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="308.7" y="542.0"></text>
</g>
<g>
<title>ip_local_out (914 samples, 7.74%)</title><rect x="307.1" y="531.0" width="91.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="310.1" y="542.0">ip_local_out</text>
</g>
<g>
<title>ip_output (912 samples, 7.72%)</title><rect x="307.2" y="515.0" width="91.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="310.2" y="526.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (907 samples, 7.68%)</title><rect x="307.7" y="499.0" width="90.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="310.7" y="510.0">ip_finish_..</text>
</g>
<g>
<title>__ip_finish_output (897 samples, 7.60%)</title><rect x="308.0" y="483.0" width="89.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="311.0" y="494.0">__ip_finis..</text>
</g>
<g>
<title>ip_finish_output2 (896 samples, 7.59%)</title><rect x="308.1" y="467.0" width="89.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="311.1" y="478.0">ip_finish_..</text>
</g>
<g>
<title>__local_bh_enable_ip (814 samples, 6.89%)</title><rect x="309.3" y="451.0" width="81.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="312.3" y="462.0">__local_b..</text>
</g>
<g>
<title>do_softirq.part.0 (813 samples, 6.89%)</title><rect x="309.3" y="435.0" width="81.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="312.3" y="446.0">do_softir..</text>
</g>
<g>
<title>do_softirq_own_stack (790 samples, 6.69%)</title><rect x="311.2" y="419.0" width="78.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="314.2" y="430.0">do_softir..</text>
</g>
<g>
<title>__softirqentry_text_start (787 samples, 6.66%)</title><rect x="311.2" y="403.0" width="78.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="314.2" y="414.0">__softirq..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (4 samples, 0.03%)</title><rect x="313.1" y="387.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="316.1" y="398.0"></text>
</g>
<g>
<title>net_rx_action (764 samples, 6.47%)</title><rect x="313.5" y="387.0" width="76.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="316.5" y="398.0">net_rx_a..</text>
</g>
<g>
<title>process_backlog (749 samples, 6.34%)</title><rect x="315.0" y="371.0" width="74.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="318.0" y="382.0">process_..</text>
</g>
<g>
<title>__netif_receive_skb (723 samples, 6.12%)</title><rect x="317.6" y="355.0" width="72.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="320.6" y="366.0">__netif_..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (719 samples, 6.09%)</title><rect x="317.8" y="339.0" width="71.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="320.8" y="350.0">__netif_..</text>
</g>
<g>
<title>__netif_receive_skb_core (7 samples, 0.06%)</title><rect x="317.9" y="323.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="320.9" y="334.0"></text>
</g>
<g>
<title>ip_rcv (709 samples, 6.00%)</title><rect x="318.6" y="323.0" width="70.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="321.6" y="334.0">ip_rcv</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (4 samples, 0.03%)</title><rect x="318.8" y="307.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="321.8" y="318.0"></text>
</g>
<g>
<title>ip_rcv_finish (702 samples, 5.95%)</title><rect x="319.3" y="307.0" width="70.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="322.3" y="318.0">ip_rcv_f..</text>
</g>
<g>
<title>ip_local_deliver (699 samples, 5.92%)</title><rect x="319.4" y="291.0" width="69.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="322.4" y="302.0">ip_loca..</text>
</g>
<g>
<title>ip_local_deliver_finish (698 samples, 5.91%)</title><rect x="319.5" y="275.0" width="69.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="322.5" y="286.0">ip_loca..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (696 samples, 5.89%)</title><rect x="319.6" y="259.0" width="69.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="322.6" y="270.0">ip_prot..</text>
</g>
<g>
<title>_raw_spin_lock (7 samples, 0.06%)</title><rect x="319.9" y="243.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="322.9" y="254.0"></text>
</g>
<g>
<title>tcp_v4_rcv (684 samples, 5.79%)</title><rect x="320.8" y="243.0" width="68.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="323.8" y="254.0">tcp_v4_..</text>
</g>
<g>
<title>__inet_lookup_established (18 samples, 0.15%)</title><rect x="322.7" y="227.0" width="1.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="325.7" y="238.0"></text>
</g>
<g>
<title>inet_ehashfn (4 samples, 0.03%)</title><rect x="324.1" y="211.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="327.1" y="222.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="324.5" y="227.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="327.5" y="238.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (15 samples, 0.13%)</title><rect x="324.9" y="227.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="327.9" y="238.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (3 samples, 0.03%)</title><rect x="325.0" y="211.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="328.0" y="222.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.07%)</title><rect x="325.3" y="211.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="328.3" y="222.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (627 samples, 5.31%)</title><rect x="326.5" y="227.0" width="62.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="329.5" y="238.0">tcp_v4..</text>
</g>
<g>
<title>tcp_check_space (13 samples, 0.11%)</title><rect x="326.8" y="211.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="329.8" y="222.0"></text>
</g>
<g>
<title>tcp_rcv_established (608 samples, 5.15%)</title><rect x="328.4" y="211.0" width="60.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="331.4" y="222.0">tcp_rc..</text>
</g>
<g>
<title>__tcp_ack_snd_check (25 samples, 0.21%)</title><rect x="329.1" y="195.0" width="2.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="332.1" y="206.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (24 samples, 0.20%)</title><rect x="329.2" y="179.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="332.2" y="190.0"></text>
</g>
<g>
<title>sk_reset_timer (21 samples, 0.18%)</title><rect x="329.5" y="163.0" width="2.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="332.5" y="174.0"></text>
</g>
<g>
<title>mod_timer (19 samples, 0.16%)</title><rect x="329.7" y="147.0" width="1.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="332.7" y="158.0"></text>
</g>
<g>
<title>__lock_text_start (13 samples, 0.11%)</title><rect x="329.7" y="131.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="332.7" y="142.0"></text>
</g>
<g>
<title>lock_timer_base (6 samples, 0.05%)</title><rect x="331.0" y="131.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="334.0" y="142.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (5 samples, 0.04%)</title><rect x="331.1" y="115.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="334.1" y="126.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (11 samples, 0.09%)</title><rect x="331.6" y="195.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="334.6" y="206.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (3 samples, 0.03%)</title><rect x="332.7" y="195.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="335.7" y="206.0"></text>
</g>
<g>
<title>tcp_ack (125 samples, 1.06%)</title><rect x="333.1" y="195.0" width="12.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="336.1" y="206.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.07%)</title><rect x="334.7" y="179.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="337.7" y="190.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (3 samples, 0.03%)</title><rect x="335.7" y="179.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="338.7" y="190.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (85 samples, 0.72%)</title><rect x="336.4" y="179.0" width="8.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="339.4" y="190.0"></text>
</g>
<g>
<title>__kfree_skb (70 samples, 0.59%)</title><rect x="337.6" y="163.0" width="7.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="340.6" y="174.0"></text>
</g>
<g>
<title>kfree_skbmem (18 samples, 0.15%)</title><rect x="337.6" y="147.0" width="1.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="340.6" y="158.0"></text>
</g>
<g>
<title>kmem_cache_free (17 samples, 0.14%)</title><rect x="337.7" y="131.0" width="1.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="340.7" y="142.0"></text>
</g>
<g>
<title>__slab_free (9 samples, 0.08%)</title><rect x="338.5" y="115.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="341.5" y="126.0"></text>
</g>
<g>
<title>skb_release_all (51 samples, 0.43%)</title><rect x="339.5" y="147.0" width="5.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="342.5" y="158.0"></text>
</g>
<g>
<title>skb_release_data (51 samples, 0.43%)</title><rect x="339.5" y="131.0" width="5.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="342.5" y="142.0"></text>
</g>
<g>
<title>skb_free_head (30 samples, 0.25%)</title><rect x="341.6" y="115.0" width="3.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="344.6" y="126.0"></text>
</g>
<g>
<title>kfree (30 samples, 0.25%)</title><rect x="341.6" y="99.0" width="3.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="344.6" y="110.0"></text>
</g>
<g>
<title>__slab_free (21 samples, 0.18%)</title><rect x="342.4" y="83.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="345.4" y="94.0"></text>
</g>
<g>
<title>put_cpu_partial (4 samples, 0.03%)</title><rect x="344.1" y="67.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="347.1" y="78.0"></text>
</g>
<g>
<title>tcp_rate_gen (3 samples, 0.03%)</title><rect x="345.3" y="179.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="348.3" y="190.0"></text>
</g>
<g>
<title>tcp_data_ready (416 samples, 3.52%)</title><rect x="345.7" y="195.0" width="41.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="348.7" y="206.0">tcp..</text>
</g>
<g>
<title>sock_def_readable (416 samples, 3.52%)</title><rect x="345.7" y="179.0" width="41.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="348.7" y="190.0">soc..</text>
</g>
<g>
<title>__wake_up_sync_key (412 samples, 3.49%)</title><rect x="346.1" y="163.0" width="41.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="349.1" y="174.0">__w..</text>
</g>
<g>
<title>__wake_up_common_lock (412 samples, 3.49%)</title><rect x="346.1" y="147.0" width="41.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="349.1" y="158.0">__w..</text>
</g>
<g>
<title>__lock_text_start (410 samples, 3.47%)</title><rect x="346.1" y="131.0" width="40.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="349.1" y="142.0">__l..</text>
</g>
<g>
<title>tcp_event_data_recv (5 samples, 0.04%)</title><rect x="387.2" y="195.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="390.2" y="206.0"></text>
</g>
<g>
<title>tcp_grow_window.isra.0 (3 samples, 0.03%)</title><rect x="387.4" y="179.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="390.4" y="190.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (8 samples, 0.07%)</title><rect x="387.9" y="195.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="390.9" y="206.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="387.9" y="179.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="390.9" y="190.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.03%)</title><rect x="388.3" y="179.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="391.3" y="190.0"></text>
</g>
<g>
<title>net_rx_action (3 samples, 0.03%)</title><rect x="389.8" y="403.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="392.8" y="414.0"></text>
</g>
<g>
<title>ret_from_intr (4 samples, 0.03%)</title><rect x="390.1" y="419.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="393.1" y="430.0"></text>
</g>
<g>
<title>do_IRQ (4 samples, 0.03%)</title><rect x="390.1" y="403.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="393.1" y="414.0"></text>
</g>
<g>
<title>irq_exit (4 samples, 0.03%)</title><rect x="390.1" y="387.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="393.1" y="398.0"></text>
</g>
<g>
<title>__softirqentry_text_start (4 samples, 0.03%)</title><rect x="390.1" y="371.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="393.1" y="382.0"></text>
</g>
<g>
<title>net_rx_action (4 samples, 0.03%)</title><rect x="390.1" y="355.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="393.1" y="366.0"></text>
</g>
<g>
<title>process_backlog (4 samples, 0.03%)</title><rect x="390.1" y="339.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="393.1" y="350.0"></text>
</g>
<g>
<title>__netif_receive_skb (4 samples, 0.03%)</title><rect x="390.1" y="323.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="393.1" y="334.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (4 samples, 0.03%)</title><rect x="390.1" y="307.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="393.1" y="318.0"></text>
</g>
<g>
<title>ip_rcv (4 samples, 0.03%)</title><rect x="390.1" y="291.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="393.1" y="302.0"></text>
</g>
<g>
<title>ip_rcv_finish (4 samples, 0.03%)</title><rect x="390.1" y="275.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="393.1" y="286.0"></text>
</g>
<g>
<title>ip_local_deliver (4 samples, 0.03%)</title><rect x="390.1" y="259.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="393.1" y="270.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (4 samples, 0.03%)</title><rect x="390.1" y="243.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="393.1" y="254.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (4 samples, 0.03%)</title><rect x="390.1" y="227.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="393.1" y="238.0"></text>
</g>
<g>
<title>tcp_v4_rcv (4 samples, 0.03%)</title><rect x="390.1" y="211.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="393.1" y="222.0"></text>
</g>
<g>
<title>dev_queue_xmit (66 samples, 0.56%)</title><rect x="390.6" y="451.0" width="6.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="393.6" y="462.0"></text>
</g>
<g>
<title>__dev_queue_xmit (66 samples, 0.56%)</title><rect x="390.6" y="435.0" width="6.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="393.6" y="446.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (5 samples, 0.04%)</title><rect x="392.2" y="419.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="395.2" y="430.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (34 samples, 0.29%)</title><rect x="392.7" y="419.0" width="3.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="395.7" y="430.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="393.2" y="403.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="396.2" y="414.0"></text>
</g>
<g>
<title>loopback_xmit (25 samples, 0.21%)</title><rect x="393.5" y="403.0" width="2.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="396.5" y="414.0"></text>
</g>
<g>
<title>netif_rx (15 samples, 0.13%)</title><rect x="393.9" y="387.0" width="1.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="396.9" y="398.0"></text>
</g>
<g>
<title>netif_rx_internal (14 samples, 0.12%)</title><rect x="394.0" y="371.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="397.0" y="382.0"></text>
</g>
<g>
<title>enqueue_to_backlog (13 samples, 0.11%)</title><rect x="394.1" y="355.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="397.1" y="366.0"></text>
</g>
<g>
<title>tcp_wfree (3 samples, 0.03%)</title><rect x="395.7" y="387.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="398.7" y="398.0"></text>
</g>
<g>
<title>validate_xmit_skb (10 samples, 0.08%)</title><rect x="396.2" y="419.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="399.2" y="430.0"></text>
</g>
<g>
<title>do_softirq.part.0 (4 samples, 0.03%)</title><rect x="397.2" y="451.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="400.2" y="462.0"></text>
</g>
<g>
<title>ret_from_intr (3 samples, 0.03%)</title><rect x="397.3" y="435.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="400.3" y="446.0"></text>
</g>
<g>
<title>do_IRQ (3 samples, 0.03%)</title><rect x="397.3" y="419.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="400.3" y="430.0"></text>
</g>
<g>
<title>irq_exit (3 samples, 0.03%)</title><rect x="397.3" y="403.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="400.3" y="414.0"></text>
</g>
<g>
<title>__softirqentry_text_start (3 samples, 0.03%)</title><rect x="397.3" y="387.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="400.3" y="398.0"></text>
</g>
<g>
<title>net_rx_action (3 samples, 0.03%)</title><rect x="397.3" y="371.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="400.3" y="382.0"></text>
</g>
<g>
<title>process_backlog (3 samples, 0.03%)</title><rect x="397.3" y="355.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="400.3" y="366.0"></text>
</g>
<g>
<title>__netif_receive_skb (3 samples, 0.03%)</title><rect x="397.3" y="339.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="400.3" y="350.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (3 samples, 0.03%)</title><rect x="397.3" y="323.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="400.3" y="334.0"></text>
</g>
<g>
<title>ip_rcv (3 samples, 0.03%)</title><rect x="397.3" y="307.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="400.3" y="318.0"></text>
</g>
<g>
<title>ip_rcv_finish (3 samples, 0.03%)</title><rect x="397.3" y="291.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="400.3" y="302.0"></text>
</g>
<g>
<title>ip_local_deliver (3 samples, 0.03%)</title><rect x="397.3" y="275.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="400.3" y="286.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (3 samples, 0.03%)</title><rect x="397.3" y="259.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="400.3" y="270.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (3 samples, 0.03%)</title><rect x="397.3" y="243.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="400.3" y="254.0"></text>
</g>
<g>
<title>tcp_v4_rcv (3 samples, 0.03%)</title><rect x="397.3" y="227.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="400.3" y="238.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (3 samples, 0.03%)</title><rect x="397.3" y="211.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="400.3" y="222.0"></text>
</g>
<g>
<title>tcp_rcv_established (3 samples, 0.03%)</title><rect x="397.3" y="195.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="400.3" y="206.0"></text>
</g>
<g>
<title>tcp_ack (3 samples, 0.03%)</title><rect x="397.3" y="179.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="400.3" y="190.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (3 samples, 0.03%)</title><rect x="397.3" y="163.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="400.3" y="174.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (7 samples, 0.06%)</title><rect x="397.6" y="483.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="400.6" y="494.0"></text>
</g>
<g>
<title>skb_clone (7 samples, 0.06%)</title><rect x="398.7" y="563.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="401.7" y="574.0"></text>
</g>
<g>
<title>__skb_clone (3 samples, 0.03%)</title><rect x="399.1" y="547.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="402.1" y="558.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (3 samples, 0.03%)</title><rect x="399.9" y="579.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="402.9" y="590.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (38 samples, 0.32%)</title><rect x="400.2" y="579.0" width="3.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="403.2" y="590.0"></text>
</g>
<g>
<title>read_tsc (5 samples, 0.04%)</title><rect x="404.7" y="579.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="407.7" y="590.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (25 samples, 0.21%)</title><rect x="405.3" y="579.0" width="2.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="408.3" y="590.0"></text>
</g>
<g>
<title>tcp_rearm_rto (18 samples, 0.15%)</title><rect x="406.0" y="563.0" width="1.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="409.0" y="574.0"></text>
</g>
<g>
<title>sk_reset_timer (13 samples, 0.11%)</title><rect x="406.5" y="547.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="409.5" y="558.0"></text>
</g>
<g>
<title>mod_timer (13 samples, 0.11%)</title><rect x="406.5" y="531.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="409.5" y="542.0"></text>
</g>
<g>
<title>__lock_text_start (9 samples, 0.08%)</title><rect x="406.7" y="515.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="409.7" y="526.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (4 samples, 0.03%)</title><rect x="408.0" y="579.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="411.0" y="590.0"></text>
</g>
<g>
<title>tcp_send_mss (22 samples, 0.19%)</title><rect x="408.8" y="627.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="411.8" y="638.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (7 samples, 0.06%)</title><rect x="408.9" y="611.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="411.9" y="622.0"></text>
</g>
<g>
<title>tcp_current_mss (12 samples, 0.10%)</title><rect x="409.8" y="611.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="412.8" y="622.0"></text>
</g>
<g>
<title>ipv4_mtu (4 samples, 0.03%)</title><rect x="410.5" y="595.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="413.5" y="606.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (5 samples, 0.04%)</title><rect x="411.2" y="643.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="414.2" y="654.0"></text>
</g>
<g>
<title>security_socket_sendmsg (26 samples, 0.22%)</title><rect x="412.1" y="675.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="415.1" y="686.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (24 samples, 0.20%)</title><rect x="412.3" y="659.0" width="2.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="415.3" y="670.0"></text>
</g>
<g>
<title>aa_sk_perm (24 samples, 0.20%)</title><rect x="412.3" y="643.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="415.3" y="654.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (18 samples, 0.15%)</title><rect x="412.9" y="627.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="415.9" y="638.0"></text>
</g>
<g>
<title>aa_label_next_confined (3 samples, 0.03%)</title><rect x="414.1" y="611.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="417.1" y="622.0"></text>
</g>
<g>
<title>aa_profile_af_perm (3 samples, 0.03%)</title><rect x="414.4" y="611.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="417.4" y="622.0"></text>
</g>
<g>
<title>sockfd_lookup_light (12 samples, 0.10%)</title><rect x="414.7" y="691.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="417.7" y="702.0"></text>
</g>
<g>
<title>__fdget (10 samples, 0.08%)</title><rect x="414.8" y="675.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="417.8" y="686.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.08%)</title><rect x="414.8" y="659.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="417.8" y="670.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.08%)</title><rect x="414.9" y="643.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="417.9" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (12 samples, 0.10%)</title><rect x="416.3" y="723.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="419.3" y="734.0"></text>
</g>
<g>
<title>schedule (8 samples, 0.07%)</title><rect x="416.7" y="707.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="419.7" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (8 samples, 0.07%)</title><rect x="416.7" y="691.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="419.7" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (8 samples, 0.07%)</title><rect x="416.7" y="675.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="419.7" y="686.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (20 samples, 0.17%)</title><rect x="417.5" y="787.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="420.5" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.03%)</title><rect x="418.1" y="771.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="421.1" y="782.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (11 samples, 0.09%)</title><rect x="418.4" y="771.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="421.4" y="782.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (10 samples, 0.08%)</title><rect x="418.5" y="755.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="421.5" y="766.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (3 samples, 0.03%)</title><rect x="419.2" y="739.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="422.2" y="750.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (4 samples, 0.03%)</title><rect x="419.5" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="422.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (17 samples, 0.14%)</title><rect x="419.9" y="835.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="422.9" y="846.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (12 samples, 0.10%)</title><rect x="420.3" y="819.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="423.3" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (12 samples, 0.10%)</title><rect x="420.3" y="803.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="423.3" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (31 samples, 0.26%)</title><rect x="421.6" y="835.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="424.6" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (14 samples, 0.12%)</title><rect x="422.9" y="819.0" width="1.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="425.9" y="830.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.03%)</title><rect x="424.3" y="819.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="427.3" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.putTimestamp (3,822 samples, 32.37%)</title><rect x="424.8" y="835.0" width="382.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="427.8" y="846.0">ru/mail/polis/service/manikhin/ReplicasRequests.putT..</text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/DAOImpl.upsertTimestampRecord (3,822 samples, 32.37%)</title><rect x="424.8" y="819.0" width="382.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="427.8" y="830.0">ru/mail/polis/dao/manikhin/DAOImpl.upsertTimestampRe..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (3,730 samples, 31.59%)</title><rect x="424.8" y="803.0" width="372.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="427.8" y="814.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (12 samples, 0.10%)</title><rect x="425.5" y="787.0" width="1.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="428.5" y="798.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (3,710 samples, 31.42%)</title><rect x="426.7" y="787.0" width="370.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="429.7" y="798.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (8 samples, 0.07%)</title><rect x="430.5" y="771.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="433.5" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (3 samples, 0.03%)</title><rect x="431.3" y="771.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="434.3" y="782.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (3,223 samples, 27.30%)</title><rect x="431.6" y="771.0" width="322.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="434.6" y="782.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (4 samples, 0.03%)</title><rect x="432.7" y="755.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="435.7" y="766.0"></text>
</g>
<g>
<title>__libc_malloc (3 samples, 0.03%)</title><rect x="433.1" y="755.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="436.1" y="766.0"></text>
</g>
<g>
<title>cfree (3 samples, 0.03%)</title><rect x="433.4" y="755.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="436.4" y="766.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (17 samples, 0.14%)</title><rect x="433.7" y="755.0" width="1.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="436.7" y="766.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (10 samples, 0.08%)</title><rect x="435.4" y="755.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="438.4" y="766.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (10 samples, 0.08%)</title><rect x="436.4" y="755.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="439.4" y="766.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (18 samples, 0.15%)</title><rect x="437.4" y="755.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="440.4" y="766.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (3,146 samples, 26.64%)</title><rect x="439.3" y="755.0" width="314.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="442.3" y="766.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*,..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (10 samples, 0.08%)</title><rect x="440.7" y="739.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="443.7" y="750.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (6 samples, 0.05%)</title><rect x="441.7" y="739.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="444.7" y="750.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (21 samples, 0.18%)</title><rect x="442.3" y="739.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="445.3" y="750.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (6 samples, 0.05%)</title><rect x="443.8" y="723.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="446.8" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (34 samples, 0.29%)</title><rect x="444.4" y="739.0" width="3.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="447.4" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (10 samples, 0.08%)</title><rect x="445.2" y="723.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="448.2" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (11 samples, 0.09%)</title><rect x="446.2" y="723.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="449.2" y="734.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.04%)</title><rect x="447.3" y="723.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="450.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3,036 samples, 25.71%)</title><rect x="447.8" y="739.0" width="303.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="450.8" y="750.0">rocksdb::DB::Put(rocksdb::WriteOptions co..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.06%)</title><rect x="448.4" y="723.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="451.4" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3,023 samples, 25.60%)</title><rect x="449.1" y="723.0" width="302.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="452.1" y="734.0">rocksdb::DBImpl::Put(rocksdb::WriteOption..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,991 samples, 25.33%)</title><rect x="449.5" y="707.0" width="298.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="452.5" y="718.0">rocksdb::DB::Put(rocksdb::WriteOptions c..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (7 samples, 0.06%)</title><rect x="450.8" y="691.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="453.8" y="702.0"></text>
</g>
<g>
<title>cfree (12 samples, 0.10%)</title><rect x="451.5" y="691.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="454.5" y="702.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (4 samples, 0.03%)</title><rect x="452.8" y="691.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="455.8" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2,853 samples, 24.16%)</title><rect x="453.2" y="691.0" width="285.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="456.2" y="702.0">rocksdb::DBImpl::Write(rocksdb::WriteO..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (9 samples, 0.08%)</title><rect x="453.6" y="675.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="456.6" y="686.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context [clone .plt] (3 samples, 0.03%)</title><rect x="454.5" y="675.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="457.5" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.03%)</title><rect x="454.8" y="675.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="457.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (3 samples, 0.03%)</title><rect x="455.6" y="675.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="458.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (4 samples, 0.03%)</title><rect x="455.9" y="675.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="458.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (2,754 samples, 23.32%)</title><rect x="456.3" y="675.0" width="275.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="459.3" y="686.0">rocksdb::DBImpl::WriteImpl(rocksdb::W..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (8 samples, 0.07%)</title><rect x="466.4" y="659.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="469.4" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (58 samples, 0.49%)</title><rect x="467.3" y="659.0" width="5.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="470.3" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (43 samples, 0.36%)</title><rect x="468.7" y="643.0" width="4.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="471.7" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (41 samples, 0.35%)</title><rect x="468.9" y="627.0" width="4.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="471.9" y="638.0"></text>
</g>
<g>
<title>__x64_sys_futex (37 samples, 0.31%)</title><rect x="469.2" y="611.0" width="3.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="472.2" y="622.0"></text>
</g>
<g>
<title>do_futex (37 samples, 0.31%)</title><rect x="469.2" y="595.0" width="3.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="472.2" y="606.0"></text>
</g>
<g>
<title>_raw_spin_lock (3 samples, 0.03%)</title><rect x="469.2" y="579.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="472.2" y="590.0"></text>
</g>
<g>
<title>futex_wake (34 samples, 0.29%)</title><rect x="469.5" y="579.0" width="3.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="472.5" y="590.0"></text>
</g>
<g>
<title>mark_wake_futex (4 samples, 0.03%)</title><rect x="469.8" y="563.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="472.8" y="574.0"></text>
</g>
<g>
<title>__unqueue_futex (4 samples, 0.03%)</title><rect x="469.8" y="547.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="472.8" y="558.0"></text>
</g>
<g>
<title>wake_up_q (27 samples, 0.23%)</title><rect x="470.2" y="563.0" width="2.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="473.2" y="574.0"></text>
</g>
<g>
<title>try_to_wake_up (27 samples, 0.23%)</title><rect x="470.2" y="547.0" width="2.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="473.2" y="558.0"></text>
</g>
<g>
<title>__lock_text_start (27 samples, 0.23%)</title><rect x="470.2" y="531.0" width="2.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="473.2" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (8 samples, 0.07%)</title><rect x="473.1" y="659.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="476.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (13 samples, 0.11%)</title><rect x="474.2" y="659.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="477.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (4 samples, 0.03%)</title><rect x="475.7" y="659.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="478.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (1,239 samples, 10.49%)</title><rect x="476.1" y="659.0" width="123.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="479.1" y="670.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (7 samples, 0.06%)</title><rect x="477.3" y="643.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="480.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (3 samples, 0.03%)</title><rect x="477.7" y="627.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="480.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (1,208 samples, 10.23%)</title><rect x="478.0" y="643.0" width="120.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="481.0" y="654.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (3 samples, 0.03%)</title><rect x="479.3" y="627.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="482.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1,192 samples, 10.09%)</title><rect x="479.6" y="627.0" width="119.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="482.6" y="638.0">rocksdb::log::W..</text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (48 samples, 0.41%)</title><rect x="480.7" y="611.0" width="4.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="483.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Flush(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (3 samples, 0.03%)</title><rect x="485.5" y="611.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="488.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (32 samples, 0.27%)</title><rect x="485.8" y="611.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="488.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (999 samples, 8.46%)</title><rect x="489.1" y="611.0" width="99.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="492.1" y="622.0">rocksdb::Wri..</text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.06%)</title><rect x="490.0" y="595.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="493.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (3 samples, 0.03%)</title><rect x="490.8" y="595.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="493.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (975 samples, 8.26%)</title><rect x="491.5" y="595.0" width="97.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="494.5" y="606.0">rocksdb::Wr..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (24 samples, 0.20%)</title><rect x="493.0" y="579.0" width="2.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="496.0" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.05%)</title><rect x="495.4" y="579.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="498.4" y="590.0"></text>
</g>
<g>
<title>__write (915 samples, 7.75%)</title><rect x="496.0" y="579.0" width="91.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="499.0" y="590.0">__write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (846 samples, 7.16%)</title><rect x="502.9" y="563.0" width="84.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="505.9" y="574.0">entry_SYSC..</text>
</g>
<g>
<title>__x64_sys_write (3 samples, 0.03%)</title><rect x="502.9" y="547.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="505.9" y="558.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="503.2" y="547.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="506.2" y="558.0"></text>
</g>
<g>
<title>do_syscall_64 (840 samples, 7.11%)</title><rect x="503.5" y="547.0" width="83.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="506.5" y="558.0">do_syscal..</text>
</g>
<g>
<title>__x64_sys_write (821 samples, 6.95%)</title><rect x="505.3" y="531.0" width="82.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="508.3" y="542.0">__x64_sys..</text>
</g>
<g>
<title>ksys_write (820 samples, 6.94%)</title><rect x="505.4" y="515.0" width="81.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="508.4" y="526.0">ksys_write</text>
</g>
<g>
<title>__fdget_pos (35 samples, 0.30%)</title><rect x="505.8" y="499.0" width="3.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="508.8" y="510.0"></text>
</g>
<g>
<title>__fget_light (24 samples, 0.20%)</title><rect x="505.9" y="483.0" width="2.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="508.9" y="494.0"></text>
</g>
<g>
<title>__fget (24 samples, 0.20%)</title><rect x="505.9" y="467.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="508.9" y="478.0"></text>
</g>
<g>
<title>mutex_lock (9 samples, 0.08%)</title><rect x="508.4" y="483.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="511.4" y="494.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.03%)</title><rect x="509.3" y="499.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="512.3" y="510.0"></text>
</g>
<g>
<title>mutex_unlock (6 samples, 0.05%)</title><rect x="510.1" y="499.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="513.1" y="510.0"></text>
</g>
<g>
<title>vfs_write (767 samples, 6.50%)</title><rect x="510.7" y="499.0" width="76.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="513.7" y="510.0">vfs_write</text>
</g>
<g>
<title>__sb_start_write (9 samples, 0.08%)</title><rect x="512.1" y="483.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="515.1" y="494.0"></text>
</g>
<g>
<title>__vfs_write (719 samples, 6.09%)</title><rect x="513.0" y="483.0" width="71.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="516.0" y="494.0">__vfs_wr..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (11 samples, 0.09%)</title><rect x="513.0" y="467.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="516.0" y="478.0"></text>
</g>
<g>
<title>new_sync_write (706 samples, 5.98%)</title><rect x="514.3" y="467.0" width="70.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="517.3" y="478.0">new_sync..</text>
</g>
<g>
<title>ext4_file_write_iter (691 samples, 5.85%)</title><rect x="514.7" y="451.0" width="69.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="517.7" y="462.0">ext4_fi..</text>
</g>
<g>
<title>__generic_file_write_iter (659 samples, 5.58%)</title><rect x="515.3" y="435.0" width="65.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="518.3" y="446.0">__gener..</text>
</g>
<g>
<title>__x86_indirect_thunk_r11 (4 samples, 0.03%)</title><rect x="516.2" y="419.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="519.2" y="430.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (6 samples, 0.05%)</title><rect x="516.6" y="419.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="519.6" y="430.0"></text>
</g>
<g>
<title>file_update_time (63 samples, 0.53%)</title><rect x="517.5" y="419.0" width="6.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="520.5" y="430.0"></text>
</g>
<g>
<title>current_time (8 samples, 0.07%)</title><rect x="517.8" y="403.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="520.8" y="414.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (3 samples, 0.03%)</title><rect x="518.1" y="387.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="521.1" y="398.0"></text>
</g>
<g>
<title>generic_update_time (46 samples, 0.39%)</title><rect x="518.6" y="403.0" width="4.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="521.6" y="414.0"></text>
</g>
<g>
<title>__mark_inode_dirty (43 samples, 0.36%)</title><rect x="518.7" y="387.0" width="4.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="521.7" y="398.0"></text>
</g>
<g>
<title>ext4_dirty_inode (41 samples, 0.35%)</title><rect x="518.9" y="371.0" width="4.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="521.9" y="382.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (11 samples, 0.09%)</title><rect x="518.9" y="355.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="521.9" y="366.0"></text>
</g>
<g>
<title>jbd2__journal_start (9 samples, 0.08%)</title><rect x="519.1" y="339.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="522.1" y="350.0"></text>
</g>
<g>
<title>kmem_cache_alloc (3 samples, 0.03%)</title><rect x="519.3" y="323.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="522.3" y="334.0"></text>
</g>
<g>
<title>start_this_handle (4 samples, 0.03%)</title><rect x="519.6" y="323.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="522.6" y="334.0"></text>
</g>
<g>
<title>__ext4_journal_stop (4 samples, 0.03%)</title><rect x="520.0" y="355.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="523.0" y="366.0"></text>
</g>
<g>
<title>jbd2_journal_stop (3 samples, 0.03%)</title><rect x="520.0" y="339.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="523.0" y="350.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (26 samples, 0.22%)</title><rect x="520.4" y="355.0" width="2.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="523.4" y="366.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (20 samples, 0.17%)</title><rect x="520.4" y="339.0" width="2.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="523.4" y="350.0"></text>
</g>
<g>
<title>ext4_do_update_inode (17 samples, 0.14%)</title><rect x="520.7" y="323.0" width="1.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="523.7" y="334.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (12 samples, 0.10%)</title><rect x="521.2" y="307.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="524.2" y="318.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.0 (10 samples, 0.08%)</title><rect x="521.4" y="291.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="524.4" y="302.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="521.4" y="275.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="524.4" y="286.0"></text>
</g>
<g>
<title>crypto_shash_update (7 samples, 0.06%)</title><rect x="521.7" y="275.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="524.7" y="286.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (7 samples, 0.06%)</title><rect x="521.7" y="259.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="524.7" y="270.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (6 samples, 0.05%)</title><rect x="522.4" y="339.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="525.4" y="350.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (5 samples, 0.04%)</title><rect x="522.4" y="323.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="525.4" y="334.0"></text>
</g>
<g>
<title>__getblk_gfp (4 samples, 0.03%)</title><rect x="522.4" y="307.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="525.4" y="318.0"></text>
</g>
<g>
<title>__find_get_block (4 samples, 0.03%)</title><rect x="522.4" y="291.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="525.4" y="302.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (6 samples, 0.05%)</title><rect x="523.2" y="403.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="526.2" y="414.0"></text>
</g>
<g>
<title>generic_perform_write (570 samples, 4.83%)</title><rect x="523.8" y="419.0" width="56.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="526.8" y="430.0">generi..</text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (7 samples, 0.06%)</title><rect x="524.4" y="403.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="527.4" y="414.0"></text>
</g>
<g>
<title>ext4_da_write_begin (188 samples, 1.59%)</title><rect x="525.3" y="403.0" width="18.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="528.3" y="414.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (90 samples, 0.76%)</title><rect x="526.7" y="387.0" width="9.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="529.7" y="398.0"></text>
</g>
<g>
<title>jbd2__journal_start (87 samples, 0.74%)</title><rect x="527.0" y="371.0" width="8.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="530.0" y="382.0"></text>
</g>
<g>
<title>_raw_read_lock (16 samples, 0.14%)</title><rect x="527.2" y="355.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="530.2" y="366.0"></text>
</g>
<g>
<title>kmem_cache_alloc (21 samples, 0.18%)</title><rect x="528.8" y="355.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="531.8" y="366.0"></text>
</g>
<g>
<title>start_this_handle (45 samples, 0.38%)</title><rect x="531.2" y="355.0" width="4.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="534.2" y="366.0"></text>
</g>
<g>
<title>add_transaction_credits (8 samples, 0.07%)</title><rect x="534.9" y="339.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="537.9" y="350.0"></text>
</g>
<g>
<title>ext4_block_write_begin (14 samples, 0.12%)</title><rect x="535.7" y="387.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="538.7" y="398.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (68 samples, 0.58%)</title><rect x="537.2" y="387.0" width="6.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="540.2" y="398.0"></text>
</g>
<g>
<title>pagecache_get_page (62 samples, 0.53%)</title><rect x="537.4" y="371.0" width="6.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="540.4" y="382.0"></text>
</g>
<g>
<title>__page_cache_alloc (4 samples, 0.03%)</title><rect x="539.0" y="355.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="542.0" y="366.0"></text>
</g>
<g>
<title>alloc_pages_current (4 samples, 0.03%)</title><rect x="539.0" y="339.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="542.0" y="350.0"></text>
</g>
<g>
<title>add_to_page_cache_lru (6 samples, 0.05%)</title><rect x="539.4" y="355.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="542.4" y="366.0"></text>
</g>
<g>
<title>__add_to_page_cache_locked (3 samples, 0.03%)</title><rect x="539.5" y="339.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="542.5" y="350.0"></text>
</g>
<g>
<title>find_get_entry (33 samples, 0.28%)</title><rect x="540.2" y="355.0" width="3.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="543.2" y="366.0"></text>
</g>
<g>
<title>xas_load (10 samples, 0.08%)</title><rect x="542.4" y="339.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="545.4" y="350.0"></text>
</g>
<g>
<title>wait_for_stable_page (4 samples, 0.03%)</title><rect x="543.6" y="371.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="546.6" y="382.0"></text>
</g>
<g>
<title>ext4_da_write_end (329 samples, 2.79%)</title><rect x="544.0" y="403.0" width="32.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="547.0" y="414.0">ex..</text>
</g>
<g>
<title>__ext4_journal_stop (31 samples, 0.26%)</title><rect x="544.5" y="387.0" width="3.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="547.5" y="398.0"></text>
</g>
<g>
<title>jbd2_journal_stop (30 samples, 0.25%)</title><rect x="544.5" y="371.0" width="3.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="547.5" y="382.0"></text>
</g>
<g>
<title>__wake_up (11 samples, 0.09%)</title><rect x="545.5" y="355.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="548.5" y="366.0"></text>
</g>
<g>
<title>__wake_up_common_lock (11 samples, 0.09%)</title><rect x="545.5" y="339.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="548.5" y="350.0"></text>
</g>
<g>
<title>__lock_text_start (8 samples, 0.07%)</title><rect x="545.6" y="323.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="548.6" y="334.0"></text>
</g>
<g>
<title>kmem_cache_free (9 samples, 0.08%)</title><rect x="546.6" y="355.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="549.6" y="366.0"></text>
</g>
<g>
<title>generic_write_end (286 samples, 2.42%)</title><rect x="547.8" y="387.0" width="28.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="550.8" y="398.0">ge..</text>
</g>
<g>
<title>__mark_inode_dirty (255 samples, 2.16%)</title><rect x="548.3" y="371.0" width="25.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="551.3" y="382.0">_..</text>
</g>
<g>
<title>ext4_dirty_inode (251 samples, 2.13%)</title><rect x="548.7" y="355.0" width="25.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="551.7" y="366.0">e..</text>
</g>
<g>
<title>__ext4_journal_start_sb (3 samples, 0.03%)</title><rect x="548.7" y="339.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="551.7" y="350.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (244 samples, 2.07%)</title><rect x="549.3" y="339.0" width="24.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="552.3" y="350.0">e..</text>
</g>
<g>
<title>ext4_mark_iloc_dirty (192 samples, 1.63%)</title><rect x="549.9" y="323.0" width="19.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="552.9" y="334.0"></text>
</g>
<g>
<title>__brelse (4 samples, 0.03%)</title><rect x="550.2" y="307.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="553.2" y="318.0"></text>
</g>
<g>
<title>_raw_spin_lock (10 samples, 0.08%)</title><rect x="550.7" y="307.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="553.7" y="318.0"></text>
</g>
<g>
<title>ext4_do_update_inode (172 samples, 1.46%)</title><rect x="551.7" y="307.0" width="17.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="554.7" y="318.0"></text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (5 samples, 0.04%)</title><rect x="555.0" y="291.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="558.0" y="302.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (126 samples, 1.07%)</title><rect x="555.6" y="291.0" width="12.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="558.6" y="302.0"></text>
</g>
<g>
<title>crypto_shash_update (3 samples, 0.03%)</title><rect x="555.6" y="275.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="558.6" y="286.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.0 (123 samples, 1.04%)</title><rect x="555.9" y="275.0" width="12.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="558.9" y="286.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (14 samples, 0.12%)</title><rect x="556.4" y="259.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="559.4" y="270.0"></text>
</g>
<g>
<title>crypto_shash_update (103 samples, 0.87%)</title><rect x="557.9" y="259.0" width="10.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="560.9" y="270.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (98 samples, 0.83%)</title><rect x="558.4" y="243.0" width="9.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="561.4" y="254.0"></text>
</g>
<g>
<title>from_kprojid (3 samples, 0.03%)</title><rect x="568.2" y="291.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="571.2" y="302.0"></text>
</g>
<g>
<title>map_id_up (3 samples, 0.03%)</title><rect x="568.2" y="275.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="571.2" y="286.0"></text>
</g>
<g>
<title>map_id_up (3 samples, 0.03%)</title><rect x="568.6" y="291.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="571.6" y="302.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (46 samples, 0.39%)</title><rect x="569.1" y="323.0" width="4.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="572.1" y="334.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (33 samples, 0.28%)</title><rect x="569.3" y="307.0" width="3.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="572.3" y="318.0"></text>
</g>
<g>
<title>__getblk_gfp (23 samples, 0.19%)</title><rect x="570.1" y="291.0" width="2.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="573.1" y="302.0"></text>
</g>
<g>
<title>__find_get_block (22 samples, 0.19%)</title><rect x="570.1" y="275.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="573.1" y="286.0"></text>
</g>
<g>
<title>mark_page_accessed (6 samples, 0.05%)</title><rect x="571.7" y="259.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="574.7" y="270.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (9 samples, 0.08%)</title><rect x="572.6" y="307.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="575.6" y="318.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (7 samples, 0.06%)</title><rect x="572.7" y="291.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="575.7" y="302.0"></text>
</g>
<g>
<title>jbd2_write_access_granted (4 samples, 0.03%)</title><rect x="573.0" y="275.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="576.0" y="286.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.07%)</title><rect x="573.8" y="371.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="576.8" y="382.0"></text>
</g>
<g>
<title>block_write_end (16 samples, 0.14%)</title><rect x="574.6" y="371.0" width="1.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="577.6" y="382.0"></text>
</g>
<g>
<title>__block_commit_write.isra.0 (10 samples, 0.08%)</title><rect x="574.7" y="355.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="577.7" y="366.0"></text>
</g>
<g>
<title>mark_buffer_dirty (5 samples, 0.04%)</title><rect x="575.7" y="355.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="578.7" y="366.0"></text>
</g>
<g>
<title>unlock_page (5 samples, 0.04%)</title><rect x="576.4" y="387.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="579.4" y="398.0"></text>
</g>
<g>
<title>iov_iter_advance (6 samples, 0.05%)</title><rect x="577.1" y="403.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="580.1" y="414.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (12 samples, 0.10%)</title><rect x="577.7" y="403.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="580.7" y="414.0"></text>
</g>
<g>
<title>copy_user_generic_string (5 samples, 0.04%)</title><rect x="578.4" y="387.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="581.4" y="398.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (14 samples, 0.12%)</title><rect x="578.9" y="403.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="581.9" y="414.0"></text>
</g>
<g>
<title>unlock_page (3 samples, 0.03%)</title><rect x="580.4" y="403.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="583.4" y="414.0"></text>
</g>
<g>
<title>down_write_trylock (13 samples, 0.11%)</title><rect x="581.1" y="435.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="584.1" y="446.0"></text>
</g>
<g>
<title>ext4_write_checks (11 samples, 0.09%)</title><rect x="582.4" y="435.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="585.4" y="446.0"></text>
</g>
<g>
<title>generic_write_check_limits.isra.0 (8 samples, 0.07%)</title><rect x="582.4" y="419.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="585.4" y="430.0"></text>
</g>
<g>
<title>generic_write_checks (3 samples, 0.03%)</title><rect x="583.2" y="419.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="586.2" y="430.0"></text>
</g>
<g>
<title>up_write (11 samples, 0.09%)</title><rect x="583.7" y="451.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="586.7" y="462.0"></text>
</g>
<g>
<title>fsnotify (4 samples, 0.03%)</title><rect x="584.8" y="483.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="587.8" y="494.0"></text>
</g>
<g>
<title>rw_verify_area (20 samples, 0.17%)</title><rect x="585.3" y="483.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="588.3" y="494.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="585.3" y="467.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="588.3" y="478.0"></text>
</g>
<g>
<title>security_file_permission (17 samples, 0.14%)</title><rect x="585.6" y="467.0" width="1.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="588.6" y="478.0"></text>
</g>
<g>
<title>apparmor_file_permission (9 samples, 0.08%)</title><rect x="586.1" y="451.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="589.1" y="462.0"></text>
</g>
<g>
<title>common_file_perm (9 samples, 0.08%)</title><rect x="586.1" y="435.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="589.1" y="446.0"></text>
</g>
<g>
<title>common_file_perm (3 samples, 0.03%)</title><rect x="587.0" y="451.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="590.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (12 samples, 0.10%)</title><rect x="587.4" y="579.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="590.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (3 samples, 0.03%)</title><rect x="588.9" y="611.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="591.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (95 samples, 0.80%)</title><rect x="589.2" y="611.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="592.2" y="622.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (6 samples, 0.05%)</title><rect x="589.5" y="595.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="592.5" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.04%)</title><rect x="590.1" y="595.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="593.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (47 samples, 0.40%)</title><rect x="591.0" y="595.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="594.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (21 samples, 0.18%)</title><rect x="595.7" y="595.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="598.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::UpdateFileChecksum(rocksdb::Slice const&amp;) (9 samples, 0.08%)</title><rect x="597.8" y="595.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="600.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (5 samples, 0.04%)</title><rect x="599.1" y="643.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="602.1" y="654.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (3 samples, 0.03%)</title><rect x="599.6" y="643.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="602.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (38 samples, 0.32%)</title><rect x="600.1" y="659.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="603.1" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (34 samples, 0.29%)</title><rect x="600.5" y="643.0" width="3.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="603.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::LockInternal() (4 samples, 0.03%)</title><rect x="603.9" y="659.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="606.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::Clean() (4 samples, 0.03%)</title><rect x="604.3" y="659.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="607.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::TrimHistoryScheduler::Empty() (6 samples, 0.05%)</title><rect x="604.9" y="659.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="607.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (8 samples, 0.07%)</title><rect x="605.6" y="659.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="608.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (880 samples, 7.45%)</title><rect x="606.4" y="659.0" width="87.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="609.4" y="670.0">rocksdb::W..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (865 samples, 7.33%)</title><rect x="607.5" y="643.0" width="86.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="610.5" y="654.0">rocksdb::W..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (12 samples, 0.10%)</title><rect x="607.5" y="627.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="610.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (3 samples, 0.03%)</title><rect x="608.7" y="627.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="611.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (848 samples, 7.18%)</title><rect x="609.2" y="627.0" width="84.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="612.2" y="638.0">rocksdb::W..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (818 samples, 6.93%)</title><rect x="610.5" y="611.0" width="81.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="613.5" y="622.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (3 samples, 0.03%)</title><rect x="610.5" y="595.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="613.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (8 samples, 0.07%)</title><rect x="610.8" y="595.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="613.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::current() (9 samples, 0.08%)</title><rect x="611.6" y="595.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="614.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (3 samples, 0.03%)</title><rect x="612.5" y="595.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="615.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (795 samples, 6.73%)</title><rect x="612.8" y="595.0" width="79.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="615.8" y="606.0">rocksdb::..</text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (12 samples, 0.10%)</title><rect x="614.2" y="579.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="617.2" y="590.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (6 samples, 0.05%)</title><rect x="615.4" y="579.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="618.4" y="590.0"></text>
</g>
<g>
<title>page_fault (4 samples, 0.03%)</title><rect x="615.6" y="563.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="618.6" y="574.0"></text>
</g>
<g>
<title>do_page_fault (4 samples, 0.03%)</title><rect x="615.6" y="547.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="618.6" y="558.0"></text>
</g>
<g>
<title>__do_page_fault (4 samples, 0.03%)</title><rect x="615.6" y="531.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="618.6" y="542.0"></text>
</g>
<g>
<title>do_user_addr_fault (4 samples, 0.03%)</title><rect x="615.6" y="515.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="618.6" y="526.0"></text>
</g>
<g>
<title>memcpy (10 samples, 0.08%)</title><rect x="616.2" y="579.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="619.2" y="590.0"></text>
</g>
<g>
<title>page_fault (4 samples, 0.03%)</title><rect x="616.8" y="563.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="619.8" y="574.0"></text>
</g>
<g>
<title>do_page_fault (4 samples, 0.03%)</title><rect x="616.8" y="547.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="619.8" y="558.0"></text>
</g>
<g>
<title>__do_page_fault (4 samples, 0.03%)</title><rect x="616.8" y="531.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="619.8" y="542.0"></text>
</g>
<g>
<title>do_user_addr_fault (4 samples, 0.03%)</title><rect x="616.8" y="515.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="619.8" y="526.0"></text>
</g>
<g>
<title>handle_mm_fault (4 samples, 0.03%)</title><rect x="616.8" y="499.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="619.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (5 samples, 0.04%)</title><rect x="617.3" y="579.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="620.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (5 samples, 0.04%)</title><rect x="617.8" y="579.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="620.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (736 samples, 6.23%)</title><rect x="618.3" y="579.0" width="73.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="621.3" y="590.0">rocksdb:..</text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (31 samples, 0.26%)</title><rect x="619.6" y="563.0" width="3.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="622.6" y="574.0"></text>
</g>
<g>
<title>page_fault (4 samples, 0.03%)</title><rect x="620.4" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="623.4" y="558.0"></text>
</g>
<g>
<title>do_page_fault (4 samples, 0.03%)</title><rect x="620.4" y="531.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="623.4" y="542.0"></text>
</g>
<g>
<title>__do_page_fault (4 samples, 0.03%)</title><rect x="620.4" y="515.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="623.4" y="526.0"></text>
</g>
<g>
<title>do_user_addr_fault (4 samples, 0.03%)</title><rect x="620.4" y="499.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="623.4" y="510.0"></text>
</g>
<g>
<title>handle_mm_fault (4 samples, 0.03%)</title><rect x="620.4" y="483.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="623.4" y="494.0"></text>
</g>
<g>
<title>__handle_mm_fault (4 samples, 0.03%)</title><rect x="620.4" y="467.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="623.4" y="478.0"></text>
</g>
<g>
<title>do_anonymous_page (3 samples, 0.03%)</title><rect x="620.5" y="451.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="623.5" y="462.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (18 samples, 0.15%)</title><rect x="620.8" y="547.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="623.8" y="558.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (631 samples, 5.34%)</title><rect x="622.7" y="563.0" width="63.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="625.7" y="574.0">bool ro..</text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (589 samples, 4.99%)</title><rect x="624.3" y="547.0" width="58.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="627.3" y="558.0">/tmp/l..</text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (192 samples, 1.63%)</title><rect x="642.7" y="531.0" width="19.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="645.7" y="542.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (55 samples, 0.47%)</title><rect x="643.3" y="515.0" width="5.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="646.3" y="526.0"></text>
</g>
<g>
<title>__tls_get_addr (13 samples, 0.11%)</title><rect x="649.0" y="515.0" width="1.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="652.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (113 samples, 0.96%)</title><rect x="650.6" y="515.0" width="11.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="653.6" y="526.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (21 samples, 0.18%)</title><rect x="655.0" y="499.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="658.0" y="510.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (41 samples, 0.35%)</title><rect x="657.1" y="499.0" width="4.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="660.1" y="510.0"></text>
</g>
<g>
<title>memcmp@plt (4 samples, 0.03%)</title><rect x="661.5" y="499.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="664.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (206 samples, 1.74%)</title><rect x="662.4" y="531.0" width="20.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="665.4" y="542.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (15 samples, 0.13%)</title><rect x="681.1" y="515.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="684.1" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (8 samples, 0.07%)</title><rect x="683.2" y="547.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="686.2" y="558.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.03%)</title><rect x="683.7" y="531.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="686.7" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (17 samples, 0.14%)</title><rect x="684.0" y="547.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="687.0" y="558.0"></text>
</g>
<g>
<title>page_fault (4 samples, 0.03%)</title><rect x="685.7" y="563.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="688.7" y="574.0"></text>
</g>
<g>
<title>do_page_fault (4 samples, 0.03%)</title><rect x="685.7" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="688.7" y="558.0"></text>
</g>
<g>
<title>__do_page_fault (4 samples, 0.03%)</title><rect x="685.7" y="531.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="688.7" y="542.0"></text>
</g>
<g>
<title>do_user_addr_fault (4 samples, 0.03%)</title><rect x="685.7" y="515.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="688.7" y="526.0"></text>
</g>
<g>
<title>handle_mm_fault (4 samples, 0.03%)</title><rect x="685.7" y="499.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="688.7" y="510.0"></text>
</g>
<g>
<title>__handle_mm_fault (4 samples, 0.03%)</title><rect x="685.7" y="483.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="688.7" y="494.0"></text>
</g>
<g>
<title>do_anonymous_page (3 samples, 0.03%)</title><rect x="685.8" y="467.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="688.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (11 samples, 0.09%)</title><rect x="686.1" y="563.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="689.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (24 samples, 0.20%)</title><rect x="687.2" y="563.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="690.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (6 samples, 0.05%)</title><rect x="689.6" y="563.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="692.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (16 samples, 0.14%)</title><rect x="690.2" y="563.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="693.2" y="574.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (9 samples, 0.08%)</title><rect x="690.2" y="547.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="693.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (7 samples, 0.06%)</title><rect x="691.1" y="547.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="694.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (4 samples, 0.03%)</title><rect x="691.8" y="579.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="694.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (4 samples, 0.03%)</title><rect x="692.2" y="611.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="695.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (9 samples, 0.08%)</title><rect x="692.6" y="611.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="695.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (4 samples, 0.03%)</title><rect x="693.5" y="611.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="696.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (3 samples, 0.03%)</title><rect x="693.9" y="643.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="696.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (158 samples, 1.34%)</title><rect x="694.3" y="659.0" width="15.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="697.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (3 samples, 0.03%)</title><rect x="695.0" y="643.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="698.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (145 samples, 1.23%)</title><rect x="695.3" y="643.0" width="14.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="698.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.03%)</title><rect x="695.3" y="627.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="698.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (142 samples, 1.20%)</title><rect x="695.6" y="627.0" width="14.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="698.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (135 samples, 1.14%)</title><rect x="695.7" y="611.0" width="13.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="698.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (3 samples, 0.03%)</title><rect x="695.9" y="595.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="698.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (125 samples, 1.06%)</title><rect x="696.4" y="595.0" width="12.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="699.4" y="606.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (5 samples, 0.04%)</title><rect x="696.6" y="579.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="699.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (115 samples, 0.97%)</title><rect x="697.3" y="579.0" width="11.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="700.3" y="590.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (7 samples, 0.06%)</title><rect x="698.1" y="563.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="701.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (4 samples, 0.03%)</title><rect x="698.4" y="547.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="701.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (3 samples, 0.03%)</title><rect x="699.0" y="563.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="702.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (94 samples, 0.80%)</title><rect x="699.3" y="563.0" width="9.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="702.3" y="574.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (91 samples, 0.77%)</title><rect x="699.5" y="547.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="702.5" y="558.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (85 samples, 0.72%)</title><rect x="699.8" y="531.0" width="8.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="702.8" y="542.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (31 samples, 0.26%)</title><rect x="703.1" y="515.0" width="3.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="706.1" y="526.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (8 samples, 0.07%)</title><rect x="703.1" y="499.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="706.1" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (21 samples, 0.18%)</title><rect x="704.1" y="499.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="707.1" y="510.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (5 samples, 0.04%)</title><rect x="704.6" y="483.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="707.6" y="494.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (10 samples, 0.08%)</title><rect x="705.1" y="483.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="708.1" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (21 samples, 0.18%)</title><rect x="706.2" y="515.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="709.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.03%)</title><rect x="708.3" y="531.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="711.3" y="542.0"></text>
</g>
<g>
<title>std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&amp;) (3 samples, 0.03%)</title><rect x="708.9" y="595.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="711.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (4 samples, 0.03%)</title><rect x="709.4" y="611.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="712.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (4 samples, 0.03%)</title><rect x="710.1" y="659.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="713.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (3 samples, 0.03%)</title><rect x="710.5" y="659.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="713.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (87 samples, 0.74%)</title><rect x="710.8" y="659.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="713.8" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (18 samples, 0.15%)</title><rect x="717.1" y="643.0" width="1.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="720.1" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (15 samples, 0.13%)</title><rect x="717.4" y="627.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="720.4" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (15 samples, 0.13%)</title><rect x="717.4" y="611.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="720.4" y="622.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 0.04%)</title><rect x="718.4" y="595.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="721.4" y="606.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.03%)</title><rect x="718.5" y="579.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="721.5" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.03%)</title><rect x="719.1" y="643.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="722.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (30 samples, 0.25%)</title><rect x="719.5" y="659.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="722.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (25 samples, 0.21%)</title><rect x="720.0" y="643.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="723.0" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.05%)</title><rect x="721.6" y="627.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="724.6" y="638.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.04%)</title><rect x="721.7" y="611.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="724.7" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.04%)</title><rect x="721.7" y="595.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="724.7" y="606.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.03%)</title><rect x="721.8" y="579.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="724.8" y="590.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.03%)</title><rect x="721.8" y="563.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="724.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CreateMissingNewerLinks(rocksdb::WriteThread::Writer*) (4 samples, 0.03%)</title><rect x="722.5" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="725.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (6 samples, 0.05%)</title><rect x="722.9" y="659.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="725.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (9 samples, 0.08%)</title><rect x="723.5" y="659.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="726.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (3 samples, 0.03%)</title><rect x="724.1" y="643.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="727.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (25 samples, 0.21%)</title><rect x="724.4" y="659.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="727.4" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 0.10%)</title><rect x="725.6" y="643.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="728.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (25 samples, 0.21%)</title><rect x="726.9" y="659.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="729.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (24 samples, 0.20%)</title><rect x="727.0" y="643.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="730.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (7 samples, 0.06%)</title><rect x="729.4" y="659.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="732.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (3 samples, 0.03%)</title><rect x="730.1" y="659.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="733.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::AssertHeld() (3 samples, 0.03%)</title><rect x="730.5" y="659.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="733.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (4 samples, 0.03%)</title><rect x="730.8" y="659.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="733.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (8 samples, 0.07%)</title><rect x="731.5" y="675.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="734.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (4 samples, 0.03%)</title><rect x="732.3" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="735.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (11 samples, 0.09%)</title><rect x="732.7" y="675.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="735.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() (5 samples, 0.04%)</title><rect x="733.8" y="675.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="736.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (9 samples, 0.08%)</title><rect x="734.5" y="675.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="737.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.03%)</title><rect x="736.1" y="675.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="739.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (16 samples, 0.14%)</title><rect x="736.5" y="675.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="739.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (11 samples, 0.09%)</title><rect x="738.5" y="691.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="741.5" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (53 samples, 0.45%)</title><rect x="739.6" y="691.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="742.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (19 samples, 0.16%)</title><rect x="739.8" y="675.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="742.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (9 samples, 0.08%)</title><rect x="741.7" y="675.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="744.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (4 samples, 0.03%)</title><rect x="742.6" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="745.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.04%)</title><rect x="743.1" y="675.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="746.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) (7 samples, 0.06%)</title><rect x="743.6" y="675.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="746.6" y="686.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (4 samples, 0.03%)</title><rect x="744.3" y="675.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="747.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (7 samples, 0.06%)</title><rect x="744.9" y="691.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="747.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (13 samples, 0.11%)</title><rect x="745.6" y="691.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="748.6" y="702.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (8 samples, 0.07%)</title><rect x="747.2" y="691.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="750.2" y="702.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) (3 samples, 0.03%)</title><rect x="748.0" y="691.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="751.0" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (5 samples, 0.04%)</title><rect x="748.4" y="707.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="751.4" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.04%)</title><rect x="748.9" y="707.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="751.9" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (10 samples, 0.08%)</title><rect x="749.4" y="707.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="752.4" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (8 samples, 0.07%)</title><rect x="750.4" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="753.4" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (19 samples, 0.16%)</title><rect x="751.2" y="739.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="754.2" y="750.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.03%)</title><rect x="753.1" y="739.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="756.1" y="750.0"></text>
</g>
<g>
<title>[unknown] (111 samples, 0.94%)</title><rect x="753.7" y="771.0" width="11.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="756.7" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (20 samples, 0.17%)</title><rect x="753.7" y="755.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="756.7" y="766.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (10 samples, 0.08%)</title><rect x="755.7" y="755.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="758.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="756.7" y="755.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="759.7" y="766.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.06%)</title><rect x="757.0" y="755.0" width="0.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="760.0" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.06%)</title><rect x="757.0" y="739.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="760.0" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 0.06%)</title><rect x="757.0" y="723.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="760.0" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (6 samples, 0.05%)</title><rect x="757.1" y="707.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="760.1" y="718.0"></text>
</g>
<g>
<title>do_futex (6 samples, 0.05%)</title><rect x="757.1" y="691.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="760.1" y="702.0"></text>
</g>
<g>
<title>futex_wait (5 samples, 0.04%)</title><rect x="757.2" y="675.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="760.2" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_wait (45 samples, 0.38%)</title><rect x="757.7" y="755.0" width="4.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="760.7" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (24 samples, 0.20%)</title><rect x="759.8" y="739.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="762.8" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (24 samples, 0.20%)</title><rect x="759.8" y="723.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="762.8" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (20 samples, 0.17%)</title><rect x="760.2" y="707.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="763.2" y="718.0"></text>
</g>
<g>
<title>do_futex (20 samples, 0.17%)</title><rect x="760.2" y="691.0" width="2.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="763.2" y="702.0"></text>
</g>
<g>
<title>futex_wait (20 samples, 0.17%)</title><rect x="760.2" y="675.0" width="2.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="763.2" y="686.0"></text>
</g>
<g>
<title>futex_wait_queue_me (11 samples, 0.09%)</title><rect x="760.3" y="659.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="763.3" y="670.0"></text>
</g>
<g>
<title>schedule (11 samples, 0.09%)</title><rect x="760.3" y="643.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="763.3" y="654.0"></text>
</g>
<g>
<title>__sched_text_start (11 samples, 0.09%)</title><rect x="760.3" y="627.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="763.3" y="638.0"></text>
</g>
<g>
<title>finish_task_switch (8 samples, 0.07%)</title><rect x="760.6" y="611.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="763.6" y="622.0"></text>
</g>
<g>
<title>futex_wait_setup (6 samples, 0.05%)</title><rect x="761.4" y="659.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="764.4" y="670.0"></text>
</g>
<g>
<title>get_futex_key (3 samples, 0.03%)</title><rect x="761.7" y="643.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="764.7" y="654.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (9 samples, 0.08%)</title><rect x="762.8" y="755.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="765.8" y="766.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (4 samples, 0.03%)</title><rect x="763.7" y="755.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="766.7" y="766.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (4 samples, 0.03%)</title><rect x="764.1" y="755.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.1" y="766.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (3 samples, 0.03%)</title><rect x="764.5" y="755.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="767.5" y="766.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (3 samples, 0.03%)</title><rect x="764.5" y="739.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="767.5" y="750.0"></text>
</g>
<g>
<title>__libc_malloc (17 samples, 0.14%)</title><rect x="764.8" y="771.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="767.8" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_signal (296 samples, 2.51%)</title><rect x="766.5" y="771.0" width="29.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="769.5" y="782.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (253 samples, 2.14%)</title><rect x="770.8" y="755.0" width="25.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="773.8" y="766.0">e..</text>
</g>
<g>
<title>do_syscall_64 (251 samples, 2.13%)</title><rect x="771.0" y="739.0" width="25.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="774.0" y="750.0">d..</text>
</g>
<g>
<title>__x64_sys_futex (237 samples, 2.01%)</title><rect x="772.4" y="723.0" width="23.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="775.4" y="734.0">_..</text>
</g>
<g>
<title>do_futex (237 samples, 2.01%)</title><rect x="772.4" y="707.0" width="23.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="775.4" y="718.0">d..</text>
</g>
<g>
<title>_raw_spin_lock (5 samples, 0.04%)</title><rect x="772.4" y="691.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="775.4" y="702.0"></text>
</g>
<g>
<title>futex_wake (231 samples, 1.96%)</title><rect x="772.9" y="691.0" width="23.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="775.9" y="702.0">f..</text>
</g>
<g>
<title>mark_wake_futex (12 samples, 0.10%)</title><rect x="773.9" y="675.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="776.9" y="686.0"></text>
</g>
<g>
<title>wake_q_add_safe (9 samples, 0.08%)</title><rect x="775.1" y="675.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="778.1" y="686.0"></text>
</g>
<g>
<title>wake_up_q (200 samples, 1.69%)</title><rect x="776.0" y="675.0" width="20.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="779.0" y="686.0"></text>
</g>
<g>
<title>try_to_wake_up (199 samples, 1.69%)</title><rect x="776.1" y="659.0" width="19.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="779.1" y="670.0"></text>
</g>
<g>
<title>__lock_text_start (198 samples, 1.68%)</title><rect x="776.1" y="643.0" width="19.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="779.1" y="654.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (10 samples, 0.08%)</title><rect x="796.2" y="771.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="799.2" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/ByteConvertor.toUnsignedArray (71 samples, 0.60%)</title><rect x="797.6" y="803.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="800.6" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.03%)</title><rect x="798.9" y="787.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="801.9" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (47 samples, 0.40%)</title><rect x="799.2" y="787.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="802.2" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (47 samples, 0.40%)</title><rect x="799.2" y="771.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="802.2" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (47 samples, 0.40%)</title><rect x="799.2" y="755.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="802.2" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (47 samples, 0.40%)</title><rect x="799.2" y="739.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="802.2" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (43 samples, 0.36%)</title><rect x="799.2" y="723.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="802.2" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (43 samples, 0.36%)</title><rect x="799.2" y="707.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="802.2" y="718.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.03%)</title><rect x="800.4" y="691.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="803.4" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (3 samples, 0.03%)</title><rect x="800.8" y="691.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="803.8" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (24 samples, 0.20%)</title><rect x="801.1" y="691.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="804.1" y="702.0"></text>
</g>
<g>
<title>gettimeofday (20 samples, 0.17%)</title><rect x="801.5" y="675.0" width="2.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="804.5" y="686.0"></text>
</g>
<g>
<title>[vdso] (18 samples, 0.15%)</title><rect x="801.7" y="659.0" width="1.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="804.7" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.03%)</title><rect x="803.5" y="723.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="806.5" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.03%)</title><rect x="803.5" y="707.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="806.5" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.03%)</title><rect x="803.6" y="691.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="806.6" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.06%)</title><rect x="804.0" y="787.0" width="0.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="807.0" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.toBytes (21 samples, 0.18%)</title><rect x="804.7" y="803.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="807.7" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (8 samples, 0.07%)</title><rect x="804.7" y="787.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="807.7" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.06%)</title><rect x="804.8" y="771.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="807.8" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.06%)</title><rect x="804.8" y="755.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="807.8" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.06%)</title><rect x="804.8" y="739.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="807.8" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.04%)</title><rect x="804.8" y="723.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="807.8" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.04%)</title><rect x="804.8" y="707.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="807.8" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (13 samples, 0.11%)</title><rect x="805.5" y="787.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="808.5" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (12 samples, 0.10%)</title><rect x="805.6" y="771.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="808.6" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (12 samples, 0.10%)</title><rect x="805.6" y="755.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="808.6" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (12 samples, 0.10%)</title><rect x="805.6" y="739.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="808.6" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.08%)</title><rect x="805.6" y="723.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="808.6" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (9 samples, 0.08%)</title><rect x="805.6" y="707.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="808.6" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.03%)</title><rect x="806.5" y="723.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="809.5" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.03%)</title><rect x="806.5" y="707.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="809.5" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.sendResponse (2,561 samples, 21.69%)</title><rect x="806.8" y="835.0" width="255.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="809.8" y="846.0">ru/mail/polis/service/manikhin/Rep..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (19 samples, 0.16%)</title><rect x="808.2" y="819.0" width="1.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="811.2" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2,525 samples, 21.38%)</title><rect x="810.1" y="819.0" width="252.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="813.1" y="830.0">one/nio/http/HttpSession.sendRespo..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (43 samples, 0.36%)</title><rect x="813.4" y="803.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="816.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (43 samples, 0.36%)</title><rect x="813.4" y="787.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="816.4" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (43 samples, 0.36%)</title><rect x="813.4" y="771.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="816.4" y="782.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.05%)</title><rect x="814.8" y="755.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="817.8" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (22 samples, 0.19%)</title><rect x="815.5" y="755.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="818.5" y="766.0"></text>
</g>
<g>
<title>gettimeofday (20 samples, 0.17%)</title><rect x="815.7" y="739.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="818.7" y="750.0"></text>
</g>
<g>
<title>[vdso] (18 samples, 0.15%)</title><rect x="815.9" y="723.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="818.9" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (2,423 samples, 20.52%)</title><rect x="817.7" y="803.0" width="242.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="820.7" y="814.0">one/nio/http/HttpSession.writeRe..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.03%)</title><rect x="817.9" y="787.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="820.9" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (85 samples, 0.72%)</title><rect x="818.2" y="787.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="821.2" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (46 samples, 0.39%)</title><rect x="822.0" y="771.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="825.0" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (46 samples, 0.39%)</title><rect x="822.0" y="755.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="825.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.charAt (46 samples, 0.39%)</title><rect x="822.0" y="739.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="825.0" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (13 samples, 0.11%)</title><rect x="825.3" y="723.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="828.3" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (2,333 samples, 19.76%)</title><rect x="826.6" y="787.0" width="233.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="829.6" y="798.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (2,333 samples, 19.76%)</title><rect x="826.6" y="771.0" width="233.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="829.6" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (2,332 samples, 19.75%)</title><rect x="826.7" y="755.0" width="233.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="829.7" y="766.0">one/nio/net/Session$ArrayQueueI..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (2,325 samples, 19.69%)</title><rect x="827.4" y="739.0" width="232.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="830.4" y="750.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (23 samples, 0.19%)</title><rect x="831.2" y="723.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="834.2" y="734.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (53 samples, 0.45%)</title><rect x="833.5" y="723.0" width="5.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="836.5" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (10 samples, 0.08%)</title><rect x="834.4" y="707.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="837.4" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (8 samples, 0.07%)</title><rect x="835.4" y="707.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="838.4" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (23 samples, 0.19%)</title><rect x="836.5" y="707.0" width="2.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="839.5" y="718.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (6 samples, 0.05%)</title><rect x="837.0" y="691.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="840.0" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (8 samples, 0.07%)</title><rect x="837.6" y="691.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="840.6" y="702.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.03%)</title><rect x="838.4" y="691.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="841.4" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.08%)</title><rect x="838.8" y="723.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="841.8" y="734.0"></text>
</g>
<g>
<title>send (2,202 samples, 18.65%)</title><rect x="839.7" y="723.0" width="220.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="842.7" y="734.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2,148 samples, 18.19%)</title><rect x="845.1" y="707.0" width="214.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="848.1" y="718.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x64_sys_sendto (3 samples, 0.03%)</title><rect x="845.1" y="691.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="848.1" y="702.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="845.4" y="691.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="848.4" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (2,142 samples, 18.14%)</title><rect x="845.7" y="691.0" width="214.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="848.7" y="702.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (2,111 samples, 17.88%)</title><rect x="847.7" y="675.0" width="211.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="850.7" y="686.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (2,111 samples, 17.88%)</title><rect x="847.7" y="659.0" width="211.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="850.7" y="670.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (5 samples, 0.04%)</title><rect x="849.0" y="643.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="852.0" y="654.0"></text>
</g>
<g>
<title>sock_sendmsg (2,070 samples, 17.53%)</title><rect x="849.5" y="643.0" width="206.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="852.5" y="654.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (2,019 samples, 17.10%)</title><rect x="850.2" y="627.0" width="201.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="853.2" y="638.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (2,013 samples, 17.05%)</title><rect x="850.8" y="611.0" width="201.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="853.8" y="622.0">tcp_sendmsg</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (15 samples, 0.13%)</title><rect x="851.0" y="595.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="854.0" y="606.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (25 samples, 0.21%)</title><rect x="852.6" y="595.0" width="2.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="855.6" y="606.0"></text>
</g>
<g>
<title>lock_sock_nested (4 samples, 0.03%)</title><rect x="855.1" y="595.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="858.1" y="606.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.03%)</title><rect x="855.1" y="579.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="858.1" y="590.0"></text>
</g>
<g>
<title>release_sock (35 samples, 0.30%)</title><rect x="855.5" y="595.0" width="3.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="858.5" y="606.0"></text>
</g>
<g>
<title>__release_sock (29 samples, 0.25%)</title><rect x="855.6" y="579.0" width="2.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="858.6" y="590.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (24 samples, 0.20%)</title><rect x="856.1" y="563.0" width="2.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="859.1" y="574.0"></text>
</g>
<g>
<title>tcp_rcv_established (23 samples, 0.19%)</title><rect x="856.2" y="547.0" width="2.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="859.2" y="558.0"></text>
</g>
<g>
<title>tcp_ack (11 samples, 0.09%)</title><rect x="856.6" y="531.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="859.6" y="542.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (11 samples, 0.09%)</title><rect x="856.6" y="515.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="859.6" y="526.0"></text>
</g>
<g>
<title>__kfree_skb (8 samples, 0.07%)</title><rect x="856.9" y="499.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="859.9" y="510.0"></text>
</g>
<g>
<title>skb_release_all (6 samples, 0.05%)</title><rect x="857.1" y="483.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="860.1" y="494.0"></text>
</g>
<g>
<title>skb_release_data (6 samples, 0.05%)</title><rect x="857.1" y="467.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="860.1" y="478.0"></text>
</g>
<g>
<title>tcp_data_ready (4 samples, 0.03%)</title><rect x="857.7" y="531.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="860.7" y="542.0"></text>
</g>
<g>
<title>sock_def_readable (4 samples, 0.03%)</title><rect x="857.7" y="515.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="860.7" y="526.0"></text>
</g>
<g>
<title>__wake_up_sync_key (4 samples, 0.03%)</title><rect x="857.7" y="499.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="860.7" y="510.0"></text>
</g>
<g>
<title>__wake_up_common_lock (4 samples, 0.03%)</title><rect x="857.7" y="483.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="860.7" y="494.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.03%)</title><rect x="857.7" y="467.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="860.7" y="478.0"></text>
</g>
<g>
<title>tcp_queue_rcv (4 samples, 0.03%)</title><rect x="858.1" y="531.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="861.1" y="542.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (4 samples, 0.03%)</title><rect x="858.5" y="579.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="861.5" y="590.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (4 samples, 0.03%)</title><rect x="858.5" y="563.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="861.5" y="574.0"></text>
</g>
<g>
<title>tcp_push (7 samples, 0.06%)</title><rect x="859.3" y="595.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="862.3" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,919 samples, 16.25%)</title><rect x="860.1" y="595.0" width="191.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="863.1" y="606.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (8 samples, 0.07%)</title><rect x="862.7" y="579.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="865.7" y="590.0"></text>
</g>
<g>
<title>__virt_addr_valid (7 samples, 0.06%)</title><rect x="862.8" y="563.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="865.8" y="574.0"></text>
</g>
<g>
<title>_copy_from_iter_full (25 samples, 0.21%)</title><rect x="863.8" y="579.0" width="2.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="866.8" y="590.0"></text>
</g>
<g>
<title>copy_user_generic_string (21 samples, 0.18%)</title><rect x="864.1" y="563.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="867.1" y="574.0"></text>
</g>
<g>
<title>sk_page_frag_refill (8 samples, 0.07%)</title><rect x="866.7" y="579.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="869.7" y="590.0"></text>
</g>
<g>
<title>skb_page_frag_refill (8 samples, 0.07%)</title><rect x="866.7" y="563.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="869.7" y="574.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (145 samples, 1.23%)</title><rect x="867.5" y="579.0" width="14.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="870.5" y="590.0"></text>
</g>
<g>
<title>__alloc_skb (135 samples, 1.14%)</title><rect x="868.4" y="563.0" width="13.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="871.4" y="574.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (56 samples, 0.47%)</title><rect x="870.1" y="547.0" width="5.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="873.1" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (28 samples, 0.24%)</title><rect x="870.3" y="531.0" width="2.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="873.3" y="542.0"></text>
</g>
<g>
<title>__slab_alloc (9 samples, 0.08%)</title><rect x="871.5" y="515.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="874.5" y="526.0"></text>
</g>
<g>
<title>kmalloc_slab (6 samples, 0.05%)</title><rect x="872.5" y="515.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="875.5" y="526.0"></text>
</g>
<g>
<title>memset (23 samples, 0.19%)</title><rect x="873.4" y="531.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="876.4" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (26 samples, 0.22%)</title><rect x="875.9" y="547.0" width="2.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="878.9" y="558.0"></text>
</g>
<g>
<title>__slab_alloc (6 samples, 0.05%)</title><rect x="877.9" y="531.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="880.9" y="542.0"></text>
</g>
<g>
<title>ksize (6 samples, 0.05%)</title><rect x="878.5" y="547.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="881.5" y="558.0"></text>
</g>
<g>
<title>__ksize (6 samples, 0.05%)</title><rect x="878.5" y="531.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="881.5" y="542.0"></text>
</g>
<g>
<title>memset (26 samples, 0.22%)</title><rect x="879.2" y="547.0" width="2.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="882.2" y="558.0"></text>
</g>
<g>
<title>skb_entail (10 samples, 0.08%)</title><rect x="882.0" y="579.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="885.0" y="590.0"></text>
</g>
<g>
<title>tcp_push (1,667 samples, 14.12%)</title><rect x="883.0" y="579.0" width="166.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="886.0" y="590.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (1,665 samples, 14.10%)</title><rect x="883.0" y="563.0" width="166.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="886.0" y="574.0">__tcp_push_pending_fr..</text>
</g>
<g>
<title>__tcp_transmit_skb (3 samples, 0.03%)</title><rect x="883.0" y="547.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="886.0" y="558.0"></text>
</g>
<g>
<title>tcp_write_xmit (1,659 samples, 14.05%)</title><rect x="883.6" y="547.0" width="165.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="886.6" y="558.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (3 samples, 0.03%)</title><rect x="886.1" y="531.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="889.1" y="542.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (1,484 samples, 12.57%)</title><rect x="886.4" y="531.0" width="148.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="889.4" y="542.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__tcp_v4_send_check (3 samples, 0.03%)</title><rect x="889.3" y="515.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="892.3" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (1,437 samples, 12.17%)</title><rect x="889.7" y="515.0" width="143.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="892.7" y="526.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (1,436 samples, 12.16%)</title><rect x="889.7" y="499.0" width="143.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="892.7" y="510.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (3 samples, 0.03%)</title><rect x="890.5" y="483.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="893.5" y="494.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (15 samples, 0.13%)</title><rect x="890.8" y="483.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="893.8" y="494.0"></text>
</g>
<g>
<title>ip_local_out (1,403 samples, 11.88%)</title><rect x="892.3" y="483.0" width="140.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="895.3" y="494.0">ip_local_out</text>
</g>
<g>
<title>ip_output (1,399 samples, 11.85%)</title><rect x="892.7" y="467.0" width="139.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="895.7" y="478.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (1,391 samples, 11.78%)</title><rect x="893.5" y="451.0" width="139.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="896.5" y="462.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (3 samples, 0.03%)</title><rect x="893.9" y="435.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="896.9" y="446.0"></text>
</g>
<g>
<title>__ip_finish_output (1,372 samples, 11.62%)</title><rect x="894.2" y="435.0" width="137.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="897.2" y="446.0">__ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (1,366 samples, 11.57%)</title><rect x="894.8" y="419.0" width="136.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="897.8" y="430.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (1,237 samples, 10.48%)</title><rect x="896.5" y="403.0" width="123.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="899.5" y="414.0">__local_bh_enab..</text>
</g>
<g>
<title>do_softirq.part.0 (1,234 samples, 10.45%)</title><rect x="896.7" y="387.0" width="123.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="899.7" y="398.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (1,194 samples, 10.11%)</title><rect x="900.3" y="371.0" width="119.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="903.3" y="382.0">do_softirq_own_..</text>
</g>
<g>
<title>__softirqentry_text_start (1,190 samples, 10.08%)</title><rect x="900.3" y="355.0" width="118.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="903.3" y="366.0">__softirqentry..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="904.3" y="339.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="907.3" y="350.0"></text>
</g>
<g>
<title>net_rx_action (1,143 samples, 9.68%)</title><rect x="904.6" y="339.0" width="114.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="907.6" y="350.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (1,131 samples, 9.58%)</title><rect x="905.8" y="323.0" width="113.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="908.8" y="334.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (1,064 samples, 9.01%)</title><rect x="912.5" y="307.0" width="106.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="915.5" y="318.0">__netif_recei..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (1,062 samples, 8.99%)</title><rect x="912.7" y="291.0" width="106.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="915.7" y="302.0">__netif_recei..</text>
</g>
<g>
<title>__netif_receive_skb_core (10 samples, 0.08%)</title><rect x="912.9" y="275.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="915.9" y="286.0"></text>
</g>
<g>
<title>ip_rcv (1,048 samples, 8.88%)</title><rect x="913.9" y="275.0" width="104.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="916.9" y="286.0">ip_rcv</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (12 samples, 0.10%)</title><rect x="914.5" y="259.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="917.5" y="270.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (4 samples, 0.03%)</title><rect x="915.7" y="259.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="918.7" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish (1,026 samples, 8.69%)</title><rect x="916.1" y="259.0" width="102.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="919.1" y="270.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (1,013 samples, 8.58%)</title><rect x="916.7" y="243.0" width="101.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="919.7" y="254.0">ip_local_del..</text>
</g>
<g>
<title>ip_local_deliver_finish (1,011 samples, 8.56%)</title><rect x="916.8" y="227.0" width="101.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="919.8" y="238.0">ip_local_del..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (1,009 samples, 8.55%)</title><rect x="916.8" y="211.0" width="100.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="919.8" y="222.0">ip_protocol_..</text>
</g>
<g>
<title>_raw_spin_lock (11 samples, 0.09%)</title><rect x="917.2" y="195.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="920.2" y="206.0"></text>
</g>
<g>
<title>sock_put (7 samples, 0.06%)</title><rect x="918.6" y="195.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="921.6" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (983 samples, 8.32%)</title><rect x="919.4" y="195.0" width="98.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="922.4" y="206.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (26 samples, 0.22%)</title><rect x="921.1" y="179.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="924.1" y="190.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (34 samples, 0.29%)</title><rect x="923.7" y="179.0" width="3.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="926.7" y="190.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (7 samples, 0.06%)</title><rect x="924.1" y="163.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="927.1" y="174.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (18 samples, 0.15%)</title><rect x="924.8" y="163.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="927.8" y="174.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (3 samples, 0.03%)</title><rect x="926.8" y="163.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="929.8" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (904 samples, 7.66%)</title><rect x="927.2" y="179.0" width="90.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="930.2" y="190.0">tcp_v4_do_..</text>
</g>
<g>
<title>tcp_check_space (12 samples, 0.10%)</title><rect x="927.4" y="163.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="930.4" y="174.0"></text>
</g>
<g>
<title>tcp_rcv_established (888 samples, 7.52%)</title><rect x="928.8" y="163.0" width="88.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="931.8" y="174.0">tcp_rcv_es..</text>
</g>
<g>
<title>__tcp_ack_snd_check (56 samples, 0.47%)</title><rect x="929.7" y="147.0" width="5.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="932.7" y="158.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (52 samples, 0.44%)</title><rect x="930.1" y="131.0" width="5.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="933.1" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (49 samples, 0.41%)</title><rect x="930.4" y="115.0" width="4.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="933.4" y="126.0"></text>
</g>
<g>
<title>mod_timer (48 samples, 0.41%)</title><rect x="930.5" y="99.0" width="4.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="933.5" y="110.0"></text>
</g>
<g>
<title>__lock_text_start (36 samples, 0.30%)</title><rect x="930.9" y="83.0" width="3.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="933.9" y="94.0"></text>
</g>
<g>
<title>lock_timer_base (8 samples, 0.07%)</title><rect x="934.5" y="83.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="937.5" y="94.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (7 samples, 0.06%)</title><rect x="934.6" y="67.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="937.6" y="78.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (23 samples, 0.19%)</title><rect x="935.3" y="147.0" width="2.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="938.3" y="158.0"></text>
</g>
<g>
<title>ktime_get_seconds (3 samples, 0.03%)</title><rect x="937.9" y="147.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="940.9" y="158.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.03%)</title><rect x="938.2" y="147.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="941.2" y="158.0"></text>
</g>
<g>
<title>tcp_ack (140 samples, 1.19%)</title><rect x="938.5" y="147.0" width="14.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="941.5" y="158.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (10 samples, 0.08%)</title><rect x="940.2" y="131.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="943.2" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (98 samples, 0.83%)</title><rect x="941.7" y="131.0" width="9.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="944.7" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (68 samples, 0.58%)</title><rect x="943.6" y="115.0" width="6.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="946.6" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (22 samples, 0.19%)</title><rect x="943.6" y="99.0" width="2.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="946.6" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (20 samples, 0.17%)</title><rect x="943.8" y="83.0" width="2.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="946.8" y="94.0"></text>
</g>
<g>
<title>__slab_free (14 samples, 0.12%)</title><rect x="944.4" y="67.0" width="1.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="947.4" y="78.0"></text>
</g>
<g>
<title>skb_release_all (45 samples, 0.38%)</title><rect x="945.8" y="99.0" width="4.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="948.8" y="110.0"></text>
</g>
<g>
<title>skb_release_data (45 samples, 0.38%)</title><rect x="945.8" y="83.0" width="4.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="948.8" y="94.0"></text>
</g>
<g>
<title>skb_free_head (29 samples, 0.25%)</title><rect x="947.4" y="67.0" width="2.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="950.4" y="78.0"></text>
</g>
<g>
<title>kfree (27 samples, 0.23%)</title><rect x="947.6" y="51.0" width="2.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="950.6" y="62.0"></text>
</g>
<g>
<title>__slab_free (21 samples, 0.18%)</title><rect x="948.2" y="35.0" width="2.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="951.2" y="46.0"></text>
</g>
<g>
<title>bictcp_acked (4 samples, 0.03%)</title><rect x="950.4" y="115.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="953.4" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (3 samples, 0.03%)</title><rect x="950.8" y="115.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="953.8" y="126.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (3 samples, 0.03%)</title><rect x="951.2" y="115.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="954.2" y="126.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.03%)</title><rect x="952.1" y="131.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="955.1" y="142.0"></text>
</g>
<g>
<title>tcp_data_ready (623 samples, 5.28%)</title><rect x="952.6" y="147.0" width="62.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="955.6" y="158.0">tcp_da..</text>
</g>
<g>
<title>sock_def_readable (620 samples, 5.25%)</title><rect x="952.9" y="131.0" width="61.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="955.9" y="142.0">sock_d..</text>
</g>
<g>
<title>__wake_up_sync_key (617 samples, 5.23%)</title><rect x="953.2" y="115.0" width="61.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="956.2" y="126.0">__wake..</text>
</g>
<g>
<title>__wake_up_common_lock (617 samples, 5.23%)</title><rect x="953.2" y="99.0" width="61.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="956.2" y="110.0">__wake..</text>
</g>
<g>
<title>__lock_text_start (607 samples, 5.14%)</title><rect x="953.2" y="83.0" width="60.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="956.2" y="94.0">__lock..</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (10 samples, 0.08%)</title><rect x="1013.8" y="83.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1016.8" y="94.0"></text>
</g>
<g>
<title>tcp_event_data_recv (6 samples, 0.05%)</title><rect x="1014.8" y="147.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1017.8" y="158.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (17 samples, 0.14%)</title><rect x="1015.4" y="147.0" width="1.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1018.4" y="158.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (7 samples, 0.06%)</title><rect x="1015.4" y="131.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1018.4" y="142.0"></text>
</g>
<g>
<title>read_tsc (8 samples, 0.07%)</title><rect x="1016.3" y="131.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1019.3" y="142.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (6 samples, 0.05%)</title><rect x="1018.0" y="243.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1021.0" y="254.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="1019.2" y="355.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1022.2" y="366.0"></text>
</g>
<g>
<title>ret_from_intr (4 samples, 0.03%)</title><rect x="1019.6" y="371.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1022.6" y="382.0"></text>
</g>
<g>
<title>do_IRQ (4 samples, 0.03%)</title><rect x="1019.6" y="355.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1022.6" y="366.0"></text>
</g>
<g>
<title>irq_exit (4 samples, 0.03%)</title><rect x="1019.6" y="339.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1022.6" y="350.0"></text>
</g>
<g>
<title>__softirqentry_text_start (4 samples, 0.03%)</title><rect x="1019.6" y="323.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1022.6" y="334.0"></text>
</g>
<g>
<title>net_rx_action (4 samples, 0.03%)</title><rect x="1019.6" y="307.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1022.6" y="318.0"></text>
</g>
<g>
<title>process_backlog (4 samples, 0.03%)</title><rect x="1019.6" y="291.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1022.6" y="302.0"></text>
</g>
<g>
<title>__netif_receive_skb (4 samples, 0.03%)</title><rect x="1019.6" y="275.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1022.6" y="286.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (4 samples, 0.03%)</title><rect x="1019.6" y="259.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1022.6" y="270.0"></text>
</g>
<g>
<title>ip_rcv (4 samples, 0.03%)</title><rect x="1019.6" y="243.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1022.6" y="254.0"></text>
</g>
<g>
<title>ip_rcv_finish (4 samples, 0.03%)</title><rect x="1019.6" y="227.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1022.6" y="238.0"></text>
</g>
<g>
<title>ip_local_deliver (4 samples, 0.03%)</title><rect x="1019.6" y="211.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1022.6" y="222.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (4 samples, 0.03%)</title><rect x="1019.6" y="195.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1022.6" y="206.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (4 samples, 0.03%)</title><rect x="1019.6" y="179.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1022.6" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (4 samples, 0.03%)</title><rect x="1019.6" y="163.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1022.6" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (3 samples, 0.03%)</title><rect x="1019.7" y="147.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1022.7" y="158.0"></text>
</g>
<g>
<title>tcp_rcv_established (3 samples, 0.03%)</title><rect x="1019.7" y="131.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1022.7" y="142.0"></text>
</g>
<g>
<title>dev_queue_xmit (106 samples, 0.90%)</title><rect x="1020.1" y="403.0" width="10.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1023.1" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (105 samples, 0.89%)</title><rect x="1020.1" y="387.0" width="10.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1023.1" y="398.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (10 samples, 0.08%)</title><rect x="1023.2" y="371.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1026.2" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (55 samples, 0.47%)</title><rect x="1024.2" y="371.0" width="5.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1027.2" y="382.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (7 samples, 0.06%)</title><rect x="1024.3" y="355.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1027.3" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (44 samples, 0.37%)</title><rect x="1025.0" y="355.0" width="4.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1028.0" y="366.0"></text>
</g>
<g>
<title>eth_type_trans (5 samples, 0.04%)</title><rect x="1025.7" y="339.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1028.7" y="350.0"></text>
</g>
<g>
<title>netif_rx (25 samples, 0.21%)</title><rect x="1026.2" y="339.0" width="2.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1029.2" y="350.0"></text>
</g>
<g>
<title>netif_rx_internal (23 samples, 0.19%)</title><rect x="1026.4" y="323.0" width="2.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1029.4" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (23 samples, 0.19%)</title><rect x="1026.4" y="307.0" width="2.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1029.4" y="318.0"></text>
</g>
<g>
<title>tcp_wfree (4 samples, 0.03%)</title><rect x="1029.0" y="339.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1032.0" y="350.0"></text>
</g>
<g>
<title>validate_xmit_skb (8 samples, 0.07%)</title><rect x="1029.8" y="371.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1032.8" y="382.0"></text>
</g>
<g>
<title>do_softirq.part.0 (6 samples, 0.05%)</title><rect x="1030.7" y="403.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1033.7" y="414.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (10 samples, 0.08%)</title><rect x="1031.3" y="435.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1034.3" y="446.0"></text>
</g>
<g>
<title>ip_output (4 samples, 0.03%)</title><rect x="1032.5" y="483.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1035.5" y="494.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.03%)</title><rect x="1032.9" y="483.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1035.9" y="494.0"></text>
</g>
<g>
<title>skb_clone (10 samples, 0.08%)</title><rect x="1033.3" y="515.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1036.3" y="526.0"></text>
</g>
<g>
<title>__skb_clone (8 samples, 0.07%)</title><rect x="1033.5" y="499.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1036.5" y="510.0"></text>
</g>
<g>
<title>__copy_skb_header (3 samples, 0.03%)</title><rect x="1034.0" y="483.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1037.0" y="494.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (73 samples, 0.62%)</title><rect x="1034.8" y="531.0" width="7.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1037.8" y="542.0"></text>
</g>
<g>
<title>ip_queue_xmit (3 samples, 0.03%)</title><rect x="1042.3" y="531.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1045.3" y="542.0"></text>
</g>
<g>
<title>read_tsc (9 samples, 0.08%)</title><rect x="1042.9" y="531.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1045.9" y="542.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (39 samples, 0.33%)</title><rect x="1044.0" y="531.0" width="3.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1047.0" y="542.0"></text>
</g>
<g>
<title>tcp_rearm_rto (31 samples, 0.26%)</title><rect x="1044.8" y="515.0" width="3.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1047.8" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (28 samples, 0.24%)</title><rect x="1045.1" y="499.0" width="2.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1048.1" y="510.0"></text>
</g>
<g>
<title>mod_timer (28 samples, 0.24%)</title><rect x="1045.1" y="483.0" width="2.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1048.1" y="494.0"></text>
</g>
<g>
<title>__lock_text_start (24 samples, 0.20%)</title><rect x="1045.2" y="467.0" width="2.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1048.2" y="478.0"></text>
</g>
<g>
<title>lock_timer_base (3 samples, 0.03%)</title><rect x="1047.6" y="467.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1050.6" y="478.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (11 samples, 0.09%)</title><rect x="1048.2" y="531.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1051.2" y="542.0"></text>
</g>
<g>
<title>sk_reset_timer (5 samples, 0.04%)</title><rect x="1048.8" y="515.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1051.8" y="526.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.03%)</title><rect x="1048.9" y="499.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1051.9" y="510.0"></text>
</g>
<g>
<title>tcp_send_mss (21 samples, 0.18%)</title><rect x="1049.7" y="579.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1052.7" y="590.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (9 samples, 0.08%)</title><rect x="1049.7" y="563.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1052.7" y="574.0"></text>
</g>
<g>
<title>tcp_current_mss (10 samples, 0.08%)</title><rect x="1050.8" y="563.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1053.8" y="574.0"></text>
</g>
<g>
<title>tcp_established_options (3 samples, 0.03%)</title><rect x="1051.5" y="547.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1054.5" y="558.0"></text>
</g>
<g>
<title>inet_send_prepare (3 samples, 0.03%)</title><rect x="1052.0" y="627.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1055.0" y="638.0"></text>
</g>
<g>
<title>security_socket_sendmsg (40 samples, 0.34%)</title><rect x="1052.3" y="627.0" width="4.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1055.3" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (32 samples, 0.27%)</title><rect x="1053.1" y="611.0" width="3.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1056.1" y="622.0"></text>
</g>
<g>
<title>aa_sk_perm (32 samples, 0.27%)</title><rect x="1053.1" y="595.0" width="3.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1056.1" y="606.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (26 samples, 0.22%)</title><rect x="1053.7" y="579.0" width="2.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1056.7" y="590.0"></text>
</g>
<g>
<title>aa_profile_af_perm (10 samples, 0.08%)</title><rect x="1055.3" y="563.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1058.3" y="574.0"></text>
</g>
<g>
<title>sockfd_lookup_light (23 samples, 0.19%)</title><rect x="1056.4" y="643.0" width="2.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1059.4" y="654.0"></text>
</g>
<g>
<title>__fdget (18 samples, 0.15%)</title><rect x="1056.5" y="627.0" width="1.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1059.5" y="638.0"></text>
</g>
<g>
<title>__fget_light (18 samples, 0.15%)</title><rect x="1056.5" y="611.0" width="1.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1059.5" y="622.0"></text>
</g>
<g>
<title>__fget (18 samples, 0.15%)</title><rect x="1056.5" y="595.0" width="1.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1059.5" y="606.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.03%)</title><rect x="1058.3" y="627.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1061.3" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (11 samples, 0.09%)</title><rect x="1058.7" y="675.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1061.7" y="686.0"></text>
</g>
<g>
<title>schedule (11 samples, 0.09%)</title><rect x="1058.7" y="659.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1061.7" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (11 samples, 0.09%)</title><rect x="1058.7" y="643.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1061.7" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (10 samples, 0.08%)</title><rect x="1058.8" y="627.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1061.8" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (25 samples, 0.21%)</title><rect x="1059.8" y="803.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1062.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (22 samples, 0.19%)</title><rect x="1060.1" y="787.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1063.1" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (22 samples, 0.19%)</title><rect x="1060.1" y="771.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1063.1" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (12 samples, 0.10%)</title><rect x="1061.1" y="755.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1064.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.03%)</title><rect x="1062.4" y="819.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1065.4" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Topology.getReplicas (46 samples, 0.39%)</title><rect x="1062.7" y="867.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1065.7" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (19 samples, 0.16%)</title><rect x="1062.9" y="851.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1065.9" y="862.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (10 samples, 0.08%)</title><rect x="1063.5" y="835.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1066.5" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Replicas.replicaFactor (3 samples, 0.03%)</title><rect x="1064.5" y="835.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1067.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.add (22 samples, 0.19%)</title><rect x="1064.9" y="851.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1067.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.put (22 samples, 0.19%)</title><rect x="1064.9" y="835.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1067.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (19 samples, 0.16%)</title><rect x="1065.2" y="819.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1068.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.07%)</title><rect x="1065.4" y="803.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1068.4" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (4 samples, 0.03%)</title><rect x="1066.2" y="803.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1069.2" y="814.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.04%)</title><rect x="1066.6" y="803.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1069.6" y="814.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (88 samples, 0.75%)</title><rect x="1067.3" y="899.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1070.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (88 samples, 0.75%)</title><rect x="1067.3" y="883.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1070.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (62 samples, 0.53%)</title><rect x="1067.3" y="867.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1070.3" y="878.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (32 samples, 0.27%)</title><rect x="1070.3" y="851.0" width="3.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1073.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (26 samples, 0.22%)</title><rect x="1073.5" y="867.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1076.5" y="878.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (26 samples, 0.22%)</title><rect x="1073.5" y="851.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1076.5" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (26 samples, 0.22%)</title><rect x="1073.5" y="835.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1076.5" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (83 samples, 0.70%)</title><rect x="1076.3" y="931.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1079.3" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (13 samples, 0.11%)</title><rect x="1077.0" y="915.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1080.0" y="926.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10 samples, 0.08%)</title><rect x="1077.3" y="899.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1080.3" y="910.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10 samples, 0.08%)</title><rect x="1077.3" y="883.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1080.3" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (10 samples, 0.08%)</title><rect x="1077.3" y="867.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1080.3" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (41 samples, 0.35%)</title><rect x="1078.3" y="915.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1081.3" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (34 samples, 0.29%)</title><rect x="1079.0" y="899.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1082.0" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (22 samples, 0.19%)</title><rect x="1082.4" y="915.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1085.4" y="926.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (77 samples, 0.65%)</title><rect x="1084.6" y="931.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1087.6" y="942.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (60 samples, 0.51%)</title><rect x="1086.3" y="915.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1089.3" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (60 samples, 0.51%)</title><rect x="1086.3" y="899.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1089.3" y="910.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (25 samples, 0.21%)</title><rect x="1089.8" y="883.0" width="2.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1092.8" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (126 samples, 1.07%)</title><rect x="1092.3" y="931.0" width="12.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1095.3" y="942.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (8 samples, 0.07%)</title><rect x="1093.4" y="915.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1096.4" y="926.0"></text>
</g>
<g>
<title>itable stub (14 samples, 0.12%)</title><rect x="1094.2" y="915.0" width="1.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1097.2" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (93 samples, 0.79%)</title><rect x="1095.6" y="915.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1098.6" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.04%)</title><rect x="1103.7" y="899.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.7" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.04%)</title><rect x="1103.7" y="883.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.7" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.04%)</title><rect x="1103.7" y="867.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.7" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.04%)</title><rect x="1103.7" y="851.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.7" y="862.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (5 samples, 0.04%)</title><rect x="1103.7" y="835.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.7" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.03%)</title><rect x="1103.8" y="819.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.8" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (3 samples, 0.03%)</title><rect x="1103.8" y="803.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.8" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.03%)</title><rect x="1104.3" y="899.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.3" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.03%)</title><rect x="1104.3" y="883.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.3" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.03%)</title><rect x="1104.3" y="867.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.3" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.03%)</title><rect x="1104.3" y="851.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.3" y="862.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.03%)</title><rect x="1104.3" y="835.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1107.3" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.03%)</title><rect x="1104.3" y="819.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.3" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (3 samples, 0.03%)</title><rect x="1104.3" y="803.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.3" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (3 samples, 0.03%)</title><rect x="1104.3" y="787.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.3" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (719 samples, 6.09%)</title><rect x="1105.1" y="947.0" width="71.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1108.1" y="958.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (711 samples, 6.02%)</title><rect x="1105.9" y="931.0" width="71.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1108.9" y="942.0">one/nio/..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (22 samples, 0.19%)</title><rect x="1107.5" y="915.0" width="2.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1110.5" y="926.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (65 samples, 0.55%)</title><rect x="1109.7" y="915.0" width="6.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1112.7" y="926.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.03%)</title><rect x="1110.3" y="899.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1113.3" y="910.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (12 samples, 0.10%)</title><rect x="1110.7" y="899.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.7" y="910.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (42 samples, 0.36%)</title><rect x="1112.0" y="899.0" width="4.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1115.0" y="910.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (6 samples, 0.05%)</title><rect x="1113.0" y="883.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.0" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (15 samples, 0.13%)</title><rect x="1113.6" y="883.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.6" y="894.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (11 samples, 0.09%)</title><rect x="1115.1" y="883.0" width="1.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1118.1" y="894.0"></text>
</g>
<g>
<title>__recv (599 samples, 5.07%)</title><rect x="1116.2" y="915.0" width="59.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1119.2" y="926.0">__recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (558 samples, 4.73%)</title><rect x="1120.2" y="899.0" width="55.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1123.2" y="910.0">entry..</text>
</g>
<g>
<title>do_syscall_64 (556 samples, 4.71%)</title><rect x="1120.4" y="883.0" width="55.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1123.4" y="894.0">do_sy..</text>
</g>
<g>
<title>__x64_sys_recvfrom (533 samples, 4.51%)</title><rect x="1122.7" y="867.0" width="53.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1125.7" y="878.0">__x64..</text>
</g>
<g>
<title>__sys_recvfrom (532 samples, 4.51%)</title><rect x="1122.7" y="851.0" width="53.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1125.7" y="862.0">__sys..</text>
</g>
<g>
<title>fput_many (4 samples, 0.03%)</title><rect x="1123.8" y="835.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1126.8" y="846.0"></text>
</g>
<g>
<title>sock_recvmsg (496 samples, 4.20%)</title><rect x="1124.2" y="835.0" width="49.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1127.2" y="846.0">sock_..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (9 samples, 0.08%)</title><rect x="1124.3" y="819.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1127.3" y="830.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (4 samples, 0.03%)</title><rect x="1125.2" y="819.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1128.2" y="830.0"></text>
</g>
<g>
<title>inet6_recvmsg (423 samples, 3.58%)</title><rect x="1125.6" y="819.0" width="42.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1128.6" y="830.0">inet..</text>
</g>
<g>
<title>tcp_recvmsg (416 samples, 3.52%)</title><rect x="1126.3" y="803.0" width="41.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1129.3" y="814.0">tcp..</text>
</g>
<g>
<title>__kfree_skb (75 samples, 0.64%)</title><rect x="1129.2" y="787.0" width="7.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1132.2" y="798.0"></text>
</g>
<g>
<title>kfree_skbmem (12 samples, 0.10%)</title><rect x="1129.2" y="771.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1132.2" y="782.0"></text>
</g>
<g>
<title>skb_release_all (63 samples, 0.53%)</title><rect x="1130.4" y="771.0" width="6.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1133.4" y="782.0"></text>
</g>
<g>
<title>skb_release_data (25 samples, 0.21%)</title><rect x="1130.6" y="755.0" width="2.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1133.6" y="766.0"></text>
</g>
<g>
<title>skb_release_head_state (31 samples, 0.26%)</title><rect x="1133.1" y="755.0" width="3.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1136.1" y="766.0"></text>
</g>
<g>
<title>dst_release (28 samples, 0.24%)</title><rect x="1133.4" y="739.0" width="2.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1136.4" y="750.0"></text>
</g>
<g>
<title>sock_rfree (5 samples, 0.04%)</title><rect x="1136.2" y="755.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1139.2" y="766.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (32 samples, 0.27%)</title><rect x="1136.9" y="787.0" width="3.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1139.9" y="798.0"></text>
</g>
<g>
<title>lock_sock_nested (13 samples, 0.11%)</title><rect x="1140.1" y="787.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1143.1" y="798.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (10 samples, 0.08%)</title><rect x="1140.4" y="771.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1143.4" y="782.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (10 samples, 0.08%)</title><rect x="1140.4" y="755.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1143.4" y="766.0"></text>
</g>
<g>
<title>release_sock (6 samples, 0.05%)</title><rect x="1141.4" y="787.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1144.4" y="798.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (48 samples, 0.41%)</title><rect x="1142.0" y="787.0" width="4.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1145.0" y="798.0"></text>
</g>
<g>
<title>__skb_datagram_iter (48 samples, 0.41%)</title><rect x="1142.0" y="771.0" width="4.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1145.0" y="782.0"></text>
</g>
<g>
<title>simple_copy_to_iter (36 samples, 0.30%)</title><rect x="1143.2" y="755.0" width="3.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1146.2" y="766.0"></text>
</g>
<g>
<title>__check_object_size (9 samples, 0.08%)</title><rect x="1143.2" y="739.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1146.2" y="750.0"></text>
</g>
<g>
<title>__virt_addr_valid (7 samples, 0.06%)</title><rect x="1143.4" y="723.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1146.4" y="734.0"></text>
</g>
<g>
<title>_copy_to_iter (22 samples, 0.19%)</title><rect x="1144.3" y="739.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1147.3" y="750.0"></text>
</g>
<g>
<title>copy_user_generic_string (19 samples, 0.16%)</title><rect x="1144.6" y="723.0" width="1.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1147.6" y="734.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (178 samples, 1.51%)</title><rect x="1146.8" y="787.0" width="17.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1149.8" y="798.0"></text>
</g>
<g>
<title>tcp_send_ack (172 samples, 1.46%)</title><rect x="1147.4" y="771.0" width="17.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1150.4" y="782.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (171 samples, 1.45%)</title><rect x="1147.5" y="755.0" width="17.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1150.5" y="766.0"></text>
</g>
<g>
<title>__alloc_skb (21 samples, 0.18%)</title><rect x="1147.7" y="739.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1150.7" y="750.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (12 samples, 0.10%)</title><rect x="1148.0" y="723.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1151.0" y="734.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (5 samples, 0.04%)</title><rect x="1148.0" y="707.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1151.0" y="718.0"></text>
</g>
<g>
<title>memset (5 samples, 0.04%)</title><rect x="1148.7" y="707.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1151.7" y="718.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (3 samples, 0.03%)</title><rect x="1149.2" y="723.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1152.2" y="734.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (143 samples, 1.21%)</title><rect x="1149.9" y="739.0" width="14.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1152.9" y="750.0"></text>
</g>
<g>
<title>ip_queue_xmit (136 samples, 1.15%)</title><rect x="1150.6" y="723.0" width="13.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1153.6" y="734.0"></text>
</g>
<g>
<title>__ip_queue_xmit (134 samples, 1.13%)</title><rect x="1150.6" y="707.0" width="13.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1153.6" y="718.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (5 samples, 0.04%)</title><rect x="1151.1" y="691.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1154.1" y="702.0"></text>
</g>
<g>
<title>ip_local_out (124 samples, 1.05%)</title><rect x="1151.6" y="691.0" width="12.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1154.6" y="702.0"></text>
</g>
<g>
<title>ip_output (123 samples, 1.04%)</title><rect x="1151.6" y="675.0" width="12.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1154.6" y="686.0"></text>
</g>
<g>
<title>ip_finish_output (122 samples, 1.03%)</title><rect x="1151.7" y="659.0" width="12.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1154.7" y="670.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (3 samples, 0.03%)</title><rect x="1151.7" y="643.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1154.7" y="654.0"></text>
</g>
<g>
<title>__ip_finish_output (115 samples, 0.97%)</title><rect x="1152.0" y="643.0" width="11.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1155.0" y="654.0"></text>
</g>
<g>
<title>ip_finish_output2 (115 samples, 0.97%)</title><rect x="1152.0" y="627.0" width="11.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1155.0" y="638.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (96 samples, 0.81%)</title><rect x="1152.2" y="611.0" width="9.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1155.2" y="622.0"></text>
</g>
<g>
<title>do_softirq.part.0 (95 samples, 0.80%)</title><rect x="1152.3" y="595.0" width="9.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1155.3" y="606.0"></text>
</g>
<g>
<title>do_softirq_own_stack (89 samples, 0.75%)</title><rect x="1152.9" y="579.0" width="8.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1155.9" y="590.0"></text>
</g>
<g>
<title>__softirqentry_text_start (87 samples, 0.74%)</title><rect x="1152.9" y="563.0" width="8.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1155.9" y="574.0"></text>
</g>
<g>
<title>net_rx_action (85 samples, 0.72%)</title><rect x="1153.1" y="547.0" width="8.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1156.1" y="558.0"></text>
</g>
<g>
<title>process_backlog (83 samples, 0.70%)</title><rect x="1153.3" y="531.0" width="8.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1156.3" y="542.0"></text>
</g>
<g>
<title>__netif_receive_skb (81 samples, 0.69%)</title><rect x="1153.5" y="515.0" width="8.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1156.5" y="526.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (81 samples, 0.69%)</title><rect x="1153.5" y="499.0" width="8.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1156.5" y="510.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (5 samples, 0.04%)</title><rect x="1153.5" y="483.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1156.5" y="494.0"></text>
</g>
<g>
<title>ip_rcv (76 samples, 0.64%)</title><rect x="1154.0" y="483.0" width="7.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1157.0" y="494.0"></text>
</g>
<g>
<title>ip_rcv_finish (75 samples, 0.64%)</title><rect x="1154.1" y="467.0" width="7.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1157.1" y="478.0"></text>
</g>
<g>
<title>ip_local_deliver (75 samples, 0.64%)</title><rect x="1154.1" y="451.0" width="7.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1157.1" y="462.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (75 samples, 0.64%)</title><rect x="1154.1" y="435.0" width="7.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1157.1" y="446.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (74 samples, 0.63%)</title><rect x="1154.1" y="419.0" width="7.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1157.1" y="430.0"></text>
</g>
<g>
<title>tcp_v4_rcv (70 samples, 0.59%)</title><rect x="1154.5" y="403.0" width="7.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1157.5" y="414.0"></text>
</g>
<g>
<title>__inet_lookup_established (7 samples, 0.06%)</title><rect x="1154.7" y="387.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1157.7" y="398.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (6 samples, 0.05%)</title><rect x="1155.5" y="387.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1158.5" y="398.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="1155.6" y="371.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1158.6" y="382.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (53 samples, 0.45%)</title><rect x="1156.1" y="387.0" width="5.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1159.1" y="398.0"></text>
</g>
<g>
<title>tcp_rcv_established (49 samples, 0.41%)</title><rect x="1156.5" y="371.0" width="4.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1159.5" y="382.0"></text>
</g>
<g>
<title>__kfree_skb (10 samples, 0.08%)</title><rect x="1156.6" y="355.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1159.6" y="366.0"></text>
</g>
<g>
<title>kfree_skbmem (3 samples, 0.03%)</title><rect x="1156.6" y="339.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1159.6" y="350.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.03%)</title><rect x="1156.6" y="323.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1159.6" y="334.0"></text>
</g>
<g>
<title>skb_release_all (7 samples, 0.06%)</title><rect x="1156.9" y="339.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1159.9" y="350.0"></text>
</g>
<g>
<title>skb_release_data (5 samples, 0.04%)</title><rect x="1156.9" y="323.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1159.9" y="334.0"></text>
</g>
<g>
<title>skb_free_head (5 samples, 0.04%)</title><rect x="1156.9" y="307.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1159.9" y="318.0"></text>
</g>
<g>
<title>kfree (5 samples, 0.04%)</title><rect x="1156.9" y="291.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1159.9" y="302.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="1157.6" y="355.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1160.6" y="366.0"></text>
</g>
<g>
<title>tcp_ack (32 samples, 0.27%)</title><rect x="1158.1" y="355.0" width="3.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1161.1" y="366.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (24 samples, 0.20%)</title><rect x="1158.8" y="339.0" width="2.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1161.8" y="350.0"></text>
</g>
<g>
<title>__kfree_skb (18 samples, 0.15%)</title><rect x="1159.1" y="323.0" width="1.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1162.1" y="334.0"></text>
</g>
<g>
<title>kfree_skbmem (4 samples, 0.03%)</title><rect x="1159.1" y="307.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1162.1" y="318.0"></text>
</g>
<g>
<title>kmem_cache_free (4 samples, 0.03%)</title><rect x="1159.1" y="291.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1162.1" y="302.0"></text>
</g>
<g>
<title>__slab_free (4 samples, 0.03%)</title><rect x="1159.1" y="275.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1162.1" y="286.0"></text>
</g>
<g>
<title>skb_release_all (14 samples, 0.12%)</title><rect x="1159.5" y="307.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1162.5" y="318.0"></text>
</g>
<g>
<title>skb_release_data (14 samples, 0.12%)</title><rect x="1159.5" y="291.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1162.5" y="302.0"></text>
</g>
<g>
<title>skb_free_head (10 samples, 0.08%)</title><rect x="1159.9" y="275.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1162.9" y="286.0"></text>
</g>
<g>
<title>kfree (10 samples, 0.08%)</title><rect x="1159.9" y="259.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1162.9" y="270.0"></text>
</g>
<g>
<title>__slab_free (6 samples, 0.05%)</title><rect x="1160.3" y="243.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1163.3" y="254.0"></text>
</g>
<g>
<title>dev_queue_xmit (17 samples, 0.14%)</title><rect x="1161.8" y="611.0" width="1.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1164.8" y="622.0"></text>
</g>
<g>
<title>__dev_queue_xmit (17 samples, 0.14%)</title><rect x="1161.8" y="595.0" width="1.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1164.8" y="606.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="1162.0" y="579.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1165.0" y="590.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (11 samples, 0.09%)</title><rect x="1162.3" y="579.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1165.3" y="590.0"></text>
</g>
<g>
<title>loopback_xmit (8 samples, 0.07%)</title><rect x="1162.6" y="563.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1165.6" y="574.0"></text>
</g>
<g>
<title>netif_rx (6 samples, 0.05%)</title><rect x="1162.8" y="547.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1165.8" y="558.0"></text>
</g>
<g>
<title>netif_rx_internal (6 samples, 0.05%)</title><rect x="1162.8" y="531.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1165.8" y="542.0"></text>
</g>
<g>
<title>enqueue_to_backlog (6 samples, 0.05%)</title><rect x="1162.8" y="515.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1165.8" y="526.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (4 samples, 0.03%)</title><rect x="1163.5" y="643.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1166.5" y="654.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="1164.2" y="739.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1167.2" y="750.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (30 samples, 0.25%)</title><rect x="1164.6" y="787.0" width="3.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1167.6" y="798.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (24 samples, 0.20%)</title><rect x="1165.2" y="771.0" width="2.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1168.2" y="782.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (16 samples, 0.14%)</title><rect x="1165.2" y="755.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1168.2" y="766.0"></text>
</g>
<g>
<title>read_tsc (6 samples, 0.05%)</title><rect x="1167.0" y="755.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1170.0" y="766.0"></text>
</g>
<g>
<title>security_socket_recvmsg (59 samples, 0.50%)</title><rect x="1167.9" y="819.0" width="5.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1170.9" y="830.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (54 samples, 0.46%)</title><rect x="1168.4" y="803.0" width="5.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1171.4" y="814.0"></text>
</g>
<g>
<title>aa_sk_perm (53 samples, 0.45%)</title><rect x="1168.5" y="787.0" width="5.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1171.5" y="798.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (42 samples, 0.36%)</title><rect x="1169.6" y="771.0" width="4.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1172.6" y="782.0"></text>
</g>
<g>
<title>aa_profile_af_perm (15 samples, 0.13%)</title><rect x="1172.3" y="755.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1175.3" y="766.0"></text>
</g>
<g>
<title>sockfd_lookup_light (21 samples, 0.18%)</title><rect x="1173.8" y="835.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1176.8" y="846.0"></text>
</g>
<g>
<title>__fdget (16 samples, 0.14%)</title><rect x="1174.0" y="819.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1177.0" y="830.0"></text>
</g>
<g>
<title>__fget_light (16 samples, 0.14%)</title><rect x="1174.0" y="803.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1177.0" y="814.0"></text>
</g>
<g>
<title>__fget (16 samples, 0.14%)</title><rect x="1174.0" y="787.0" width="1.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1177.0" y="798.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.03%)</title><rect x="1175.6" y="819.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1178.6" y="830.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (8 samples, 0.07%)</title><rect x="1176.0" y="915.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1179.0" y="926.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (15 samples, 0.13%)</title><rect x="1176.9" y="979.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="990.0"></text>
</g>
<g>
<title>gettimeofday (15 samples, 0.13%)</title><rect x="1176.9" y="963.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1179.9" y="974.0"></text>
</g>
<g>
<title>[vdso] (14 samples, 0.12%)</title><rect x="1177.0" y="947.0" width="1.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1180.0" y="958.0"></text>
</g>
<g>
<title>start_thread (116 samples, 0.98%)</title><rect x="1178.4" y="995.0" width="11.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1181.4" y="1006.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (116 samples, 0.98%)</title><rect x="1178.4" y="979.0" width="11.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1181.4" y="990.0"></text>
</g>
<g>
<title>Thread::call_run() (116 samples, 0.98%)</title><rect x="1178.4" y="963.0" width="11.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="974.0"></text>
</g>
<g>
<title>GangWorker::loop() (30 samples, 0.25%)</title><rect x="1178.4" y="947.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.4" y="958.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (25 samples, 0.21%)</title><rect x="1178.4" y="931.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="942.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (19 samples, 0.16%)</title><rect x="1178.4" y="915.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="926.0"></text>
</g>
<g>
<title>SpinPause (18 samples, 0.15%)</title><rect x="1178.5" y="899.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1181.5" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (4 samples, 0.03%)</title><rect x="1180.5" y="915.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.5" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.03%)</title><rect x="1180.5" y="899.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="910.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (3 samples, 0.03%)</title><rect x="1180.5" y="883.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="894.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (3 samples, 0.03%)</title><rect x="1180.5" y="867.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="878.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (3 samples, 0.03%)</title><rect x="1180.9" y="931.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="942.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (70 samples, 0.59%)</title><rect x="1181.4" y="947.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.4" y="958.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (63 samples, 0.53%)</title><rect x="1181.4" y="931.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.4" y="942.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (63 samples, 0.53%)</title><rect x="1181.4" y="915.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.4" y="926.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (62 samples, 0.53%)</title><rect x="1181.4" y="899.0" width="6.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.4" y="910.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (62 samples, 0.53%)</title><rect x="1181.4" y="883.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.4" y="894.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (37 samples, 0.31%)</title><rect x="1181.4" y="867.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.4" y="878.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.04%)</title><rect x="1181.6" y="851.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.6" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.04%)</title><rect x="1182.1" y="851.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.1" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.04%)</title><rect x="1182.1" y="835.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.1" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (25 samples, 0.21%)</title><rect x="1182.6" y="851.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.6" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.03%)</title><rect x="1182.9" y="835.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 0.05%)</title><rect x="1183.3" y="835.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.3" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.03%)</title><rect x="1183.6" y="819.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.6" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.03%)</title><rect x="1184.4" y="835.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.4" y="846.0"></text>
</g>
<g>
<title>Compile::Optimize() (19 samples, 0.16%)</title><rect x="1185.1" y="867.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.1" y="878.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.0] (7 samples, 0.06%)</title><rect x="1185.1" y="851.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (7 samples, 0.06%)</title><rect x="1185.1" y="835.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (7 samples, 0.06%)</title><rect x="1185.9" y="851.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.9" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.03%)</title><rect x="1186.7" y="851.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.7" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.03%)</title><rect x="1186.7" y="835.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.04%)</title><rect x="1187.0" y="867.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.0" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.04%)</title><rect x="1187.0" y="851.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.04%)</title><rect x="1187.0" y="835.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.04%)</title><rect x="1187.0" y="819.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.04%)</title><rect x="1187.0" y="803.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.04%)</title><rect x="1187.0" y="787.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.0" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.04%)</title><rect x="1187.0" y="771.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.0" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.04%)</title><rect x="1187.0" y="755.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.04%)</title><rect x="1187.0" y="739.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.04%)</title><rect x="1187.0" y="723.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.03%)</title><rect x="1187.1" y="707.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.03%)</title><rect x="1187.1" y="691.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.1" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.03%)</title><rect x="1187.2" y="675.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.03%)</title><rect x="1187.2" y="659.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.03%)</title><rect x="1187.2" y="643.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.03%)</title><rect x="1187.2" y="627.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.03%)</title><rect x="1187.2" y="611.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.03%)</title><rect x="1187.2" y="595.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.2" y="606.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (7 samples, 0.06%)</title><rect x="1187.7" y="931.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1190.7" y="942.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (7 samples, 0.06%)</title><rect x="1187.7" y="915.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1190.7" y="926.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (7 samples, 0.06%)</title><rect x="1187.7" y="899.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="910.0"></text>
</g>
<g>
<title>Agent_OnAttach (7 samples, 0.06%)</title><rect x="1187.7" y="883.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1190.7" y="894.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (7 samples, 0.06%)</title><rect x="1187.7" y="867.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.7" y="878.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::ostream&amp;) (7 samples, 0.06%)</title><rect x="1187.7" y="851.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.7" y="862.0"></text>
</g>
<g>
<title>Profiler::stop() (7 samples, 0.06%)</title><rect x="1187.7" y="835.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.7" y="846.0"></text>
</g>
<g>
<title>PerfEvents::stop() (6 samples, 0.05%)</title><rect x="1187.8" y="819.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.8" y="830.0"></text>
</g>
<g>
<title>PerfEvents::destroyForThread(int) (4 samples, 0.03%)</title><rect x="1187.8" y="803.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.8" y="814.0"></text>
</g>
<g>
<title>VMThread::run() (9 samples, 0.08%)</title><rect x="1188.6" y="947.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.6" y="958.0"></text>
</g>
<g>
<title>VMThread::loop() (9 samples, 0.08%)</title><rect x="1188.6" y="931.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.6" y="942.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.0] (6 samples, 0.05%)</title><rect x="1188.8" y="915.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.8" y="926.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (6 samples, 0.05%)</title><rect x="1188.8" y="899.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.8" y="910.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (6 samples, 0.05%)</title><rect x="1188.8" y="883.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.8" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (5 samples, 0.04%)</title><rect x="1188.8" y="867.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.8" y="878.0"></text>
</g>
<g>
<title>WatcherThread::run() (5 samples, 0.04%)</title><rect x="1189.5" y="947.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.5" y="958.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (4 samples, 0.03%)</title><rect x="1189.6" y="931.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.6" y="942.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.03%)</title><rect x="1189.6" y="915.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.6" y="926.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.03%)</title><rect x="1189.6" y="899.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.6" y="910.0"></text>
</g>
</g>
</svg>
