<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="405"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="405"> </text>
<g id="frames">
<g>
<title>all (70,738 samples, 100.00%)</title><rect x="10.0" y="371.0" width="1180.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="13.0" y="382.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (70,738 samples, 100.00%)</title><rect x="10.0" y="355.0" width="1180.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="366.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (869 samples, 1.23%)</title><rect x="10.0" y="339.0" width="14.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (869 samples, 1.23%)</title><rect x="10.0" y="323.0" width="14.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (69,869 samples, 98.77%)</title><rect x="24.5" y="339.0" width="1165.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.5" y="350.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (69,869 samples, 98.77%)</title><rect x="24.5" y="323.0" width="1165.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.5" y="334.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (69,869 samples, 98.77%)</title><rect x="24.5" y="307.0" width="1165.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="27.5" y="318.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (58,423 samples, 82.59%)</title><rect x="24.5" y="291.0" width="974.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.5" y="302.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (58,423 samples, 82.59%)</title><rect x="24.5" y="275.0" width="974.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.5" y="286.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (57,212 samples, 80.88%)</title><rect x="24.5" y="259.0" width="954.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.5" y="270.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (43 samples, 0.06%)</title><rect x="24.5" y="243.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.5" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (43 samples, 0.06%)</title><rect x="24.5" y="227.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.5" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (43 samples, 0.06%)</title><rect x="24.5" y="211.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.5" y="222.0"></text>
</g>
<g>
<title>java.lang.String (29 samples, 0.04%)</title><rect x="24.5" y="195.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="27.5" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (937 samples, 1.32%)</title><rect x="25.2" y="243.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.2" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (937 samples, 1.32%)</title><rect x="25.2" y="227.0" width="15.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.2" y="238.0"></text>
</g>
<g>
<title>java/lang/String.substring (937 samples, 1.32%)</title><rect x="25.2" y="211.0" width="15.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.2" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (937 samples, 1.32%)</title><rect x="25.2" y="195.0" width="15.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.2" y="206.0"></text>
</g>
<g>
<title>java.lang.String (494 samples, 0.70%)</title><rect x="25.2" y="179.0" width="8.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="28.2" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (443 samples, 0.63%)</title><rect x="33.5" y="179.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.5" y="190.0"></text>
</g>
<g>
<title>byte[] (443 samples, 0.63%)</title><rect x="33.5" y="163.0" width="7.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="36.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/AsyncServiceImpl.entity (56,232 samples, 79.49%)</title><rect x="40.8" y="243.0" width="938.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="43.8" y="254.0">ru/mail/polis/service/manikhin/AsyncServiceImpl.entity</text>
</g>
<g>
<title>java/lang/String.getBytes (447 samples, 0.63%)</title><rect x="40.8" y="227.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.8" y="238.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (447 samples, 0.63%)</title><rect x="40.8" y="211.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="43.8" y="222.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (447 samples, 0.63%)</title><rect x="40.8" y="195.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="43.8" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (447 samples, 0.63%)</title><rect x="40.8" y="179.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.8" y="190.0"></text>
</g>
<g>
<title>byte[] (447 samples, 0.63%)</title><rect x="40.8" y="163.0" width="7.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="43.8" y="174.0"></text>
</g>
<g>
<title>java/util/Collections.singleton (225 samples, 0.32%)</title><rect x="48.3" y="227.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.3" y="238.0"></text>
</g>
<g>
<title>java.util.Collections$SingletonSet (225 samples, 0.32%)</title><rect x="48.3" y="211.0" width="3.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="51.3" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (684 samples, 0.97%)</title><rect x="52.1" y="227.0" width="11.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="55.1" y="238.0"></text>
</g>
<g>
<title>java/lang/String.substring (684 samples, 0.97%)</title><rect x="52.1" y="211.0" width="11.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="55.1" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (684 samples, 0.97%)</title><rect x="52.1" y="195.0" width="11.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.1" y="206.0"></text>
</g>
<g>
<title>java.lang.String (453 samples, 0.64%)</title><rect x="52.1" y="179.0" width="7.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="55.1" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (231 samples, 0.33%)</title><rect x="59.6" y="179.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="62.6" y="190.0"></text>
</g>
<g>
<title>byte[] (231 samples, 0.33%)</title><rect x="59.6" y="163.0" width="3.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="62.6" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Replicas.replicaFactor (167 samples, 0.24%)</title><rect x="63.5" y="227.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="66.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Replicas.parser (167 samples, 0.24%)</title><rect x="63.5" y="211.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="66.5" y="222.0"></text>
</g>
<g>
<title>java/lang/String.split (149 samples, 0.21%)</title><rect x="63.5" y="195.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="66.5" y="206.0"></text>
</g>
<g>
<title>java/lang/String.split (149 samples, 0.21%)</title><rect x="63.5" y="179.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="66.5" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (18 samples, 0.03%)</title><rect x="63.5" y="163.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="66.5" y="174.0"></text>
</g>
<g>
<title>java/lang/String.substring (87 samples, 0.12%)</title><rect x="63.8" y="163.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="66.8" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (87 samples, 0.12%)</title><rect x="63.8" y="147.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.8" y="158.0"></text>
</g>
<g>
<title>java.lang.String (46 samples, 0.07%)</title><rect x="63.8" y="131.0" width="0.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="66.8" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (41 samples, 0.06%)</title><rect x="64.5" y="131.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.5" y="142.0"></text>
</g>
<g>
<title>byte[] (41 samples, 0.06%)</title><rect x="64.5" y="115.0" width="0.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="67.5" y="126.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (44 samples, 0.06%)</title><rect x="65.2" y="163.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="68.2" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (44 samples, 0.06%)</title><rect x="65.2" y="147.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="68.2" y="158.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (44 samples, 0.06%)</title><rect x="65.2" y="131.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="68.2" y="142.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (44 samples, 0.06%)</title><rect x="65.2" y="115.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.2" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (44 samples, 0.06%)</title><rect x="65.2" y="99.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.2" y="110.0"></text>
</g>
<g>
<title>java.lang.Object[] (44 samples, 0.06%)</title><rect x="65.2" y="83.0" width="0.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="68.2" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.service.manikhin.Replicas (18 samples, 0.03%)</title><rect x="65.9" y="195.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="68.9" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.handleMultiRequest (54,484 samples, 77.02%)</title><rect x="66.2" y="227.0" width="908.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="69.2" y="238.0">ru/mail/polis/service/manikhin/ReplicasRequests.handleMultiRequest</text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.multiGet (54,484 samples, 77.02%)</title><rect x="66.2" y="211.0" width="908.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="69.2" y="222.0">ru/mail/polis/service/manikhin/ReplicasRequests.multiGet</text>
</g>
<g>
<title>java.lang.String[] (48 samples, 0.07%)</title><rect x="66.2" y="195.0" width="0.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="69.2" y="206.0"></text>
</g>
<g>
<title>java.util.ArrayList (419 samples, 0.59%)</title><rect x="67.0" y="195.0" width="7.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="70.0" y="206.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (465 samples, 0.66%)</title><rect x="74.0" y="195.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="77.0" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (465 samples, 0.66%)</title><rect x="74.0" y="179.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="77.0" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (465 samples, 0.66%)</title><rect x="74.0" y="163.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="77.0" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (465 samples, 0.66%)</title><rect x="74.0" y="147.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.0" y="158.0"></text>
</g>
<g>
<title>byte[] (465 samples, 0.66%)</title><rect x="74.0" y="131.0" width="7.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="77.0" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (138 samples, 0.20%)</title><rect x="81.8" y="195.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="84.8" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/841283083.invoke (138 samples, 0.20%)</title><rect x="81.8" y="179.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="84.8" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (138 samples, 0.20%)</title><rect x="81.8" y="163.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.8" y="174.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (55 samples, 0.08%)</title><rect x="81.8" y="147.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.8" y="158.0"></text>
</g>
<g>
<title>java.lang.String (55 samples, 0.08%)</title><rect x="81.8" y="131.0" width="0.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="84.8" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (83 samples, 0.12%)</title><rect x="82.7" y="147.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="85.7" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (83 samples, 0.12%)</title><rect x="82.7" y="131.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="85.7" y="142.0"></text>
</g>
<g>
<title>byte[] (83 samples, 0.12%)</title><rect x="82.7" y="115.0" width="1.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="85.7" y="126.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1,131 samples, 1.60%)</title><rect x="84.1" y="195.0" width="18.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="87.1" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1,131 samples, 1.60%)</title><rect x="84.1" y="179.0" width="18.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.1" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1,131 samples, 1.60%)</title><rect x="84.1" y="163.0" width="18.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="87.1" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1,131 samples, 1.60%)</title><rect x="84.1" y="147.0" width="18.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.1" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,131 samples, 1.60%)</title><rect x="84.1" y="131.0" width="18.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="87.1" y="142.0"></text>
</g>
<g>
<title>java.lang.Object[] (1,131 samples, 1.60%)</title><rect x="84.1" y="115.0" width="18.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="87.1" y="126.0"></text>
</g>
<g>
<title>java/util/Collections$SingletonSet.iterator (436 samples, 0.62%)</title><rect x="103.0" y="195.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="106.0" y="206.0"></text>
</g>
<g>
<title>java/util/Collections.singletonIterator (436 samples, 0.62%)</title><rect x="103.0" y="179.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="106.0" y="190.0"></text>
</g>
<g>
<title>java.util.Collections$1 (436 samples, 0.62%)</title><rect x="103.0" y="163.0" width="7.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="106.0" y="174.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (52 samples, 0.07%)</title><rect x="110.2" y="195.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.2" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (38 samples, 0.05%)</title><rect x="110.2" y="179.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="113.2" y="190.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (38 samples, 0.05%)</title><rect x="110.2" y="163.0" width="0.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="113.2" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.get (30,727 samples, 43.44%)</title><rect x="111.1" y="195.0" width="512.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="114.1" y="206.0">one/nio/http/HttpClient.get</text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (217 samples, 0.31%)</title><rect x="111.1" y="179.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.1" y="190.0"></text>
</g>
<g>
<title>one.nio.http.Request (56 samples, 0.08%)</title><rect x="111.1" y="163.0" width="0.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="114.1" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (161 samples, 0.23%)</title><rect x="112.0" y="163.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.0" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (161 samples, 0.23%)</title><rect x="112.0" y="147.0" width="2.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="115.0" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (30,510 samples, 43.13%)</title><rect x="114.7" y="179.0" width="509.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="117.7" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (30,510 samples, 43.13%)</title><rect x="114.7" y="163.0" width="509.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="117.7" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (132 samples, 0.19%)</title><rect x="114.7" y="147.0" width="2.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="117.7" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (27,463 samples, 38.82%)</title><rect x="116.9" y="147.0" width="458.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="119.9" y="158.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (16,161 samples, 22.85%)</title><rect x="116.9" y="131.0" width="269.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="119.9" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (11,302 samples, 15.98%)</title><rect x="386.5" y="131.0" width="188.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="389.5" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (2,562 samples, 3.62%)</title><rect x="575.0" y="147.0" width="42.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="578.0" y="158.0">one/..</text>
</g>
<g>
<title>byte[] (59 samples, 0.08%)</title><rect x="575.0" y="131.0" width="1.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="578.0" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (73 samples, 0.10%)</title><rect x="576.0" y="131.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="579.0" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (73 samples, 0.10%)</title><rect x="576.0" y="115.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="579.0" y="126.0"></text>
</g>
<g>
<title>java.lang.String (25 samples, 0.04%)</title><rect x="576.0" y="99.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="579.0" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (48 samples, 0.07%)</title><rect x="576.4" y="99.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="579.4" y="110.0"></text>
</g>
<g>
<title>byte[] (48 samples, 0.07%)</title><rect x="576.4" y="83.0" width="0.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="579.4" y="94.0"></text>
</g>
<g>
<title>one.nio.http.Response (24 samples, 0.03%)</title><rect x="577.2" y="131.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="580.2" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (2,234 samples, 3.16%)</title><rect x="577.6" y="131.0" width="37.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="580.6" y="142.0">one..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,234 samples, 3.16%)</title><rect x="577.6" y="115.0" width="37.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="580.6" y="126.0">one..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,234 samples, 3.16%)</title><rect x="577.6" y="99.0" width="37.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="580.6" y="110.0">one..</text>
</g>
<g>
<title>char[] (1,925 samples, 2.72%)</title><rect x="577.6" y="83.0" width="32.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="580.6" y="94.0">ch..</text>
</g>
<g>
<title>java.lang.String (114 samples, 0.16%)</title><rect x="609.8" y="83.0" width="1.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="612.8" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (195 samples, 0.28%)</title><rect x="611.7" y="83.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="614.7" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (195 samples, 0.28%)</title><rect x="611.7" y="67.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="614.7" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (195 samples, 0.28%)</title><rect x="611.7" y="51.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="614.7" y="62.0"></text>
</g>
<g>
<title>byte[] (195 samples, 0.28%)</title><rect x="611.7" y="35.0" width="3.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="614.7" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (80 samples, 0.11%)</title><rect x="614.9" y="131.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="617.9" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (80 samples, 0.11%)</title><rect x="614.9" y="115.0" width="1.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="617.9" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (92 samples, 0.13%)</title><rect x="616.2" y="131.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="619.2" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (92 samples, 0.13%)</title><rect x="616.2" y="115.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="619.2" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (92 samples, 0.13%)</title><rect x="616.2" y="99.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="619.2" y="110.0"></text>
</g>
<g>
<title>java.lang.String (59 samples, 0.08%)</title><rect x="616.2" y="83.0" width="1.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="619.2" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (33 samples, 0.05%)</title><rect x="617.2" y="83.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="620.2" y="94.0"></text>
</g>
<g>
<title>byte[] (33 samples, 0.05%)</title><rect x="617.2" y="67.0" width="0.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="620.2" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (211 samples, 0.30%)</title><rect x="617.8" y="147.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="620.8" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (211 samples, 0.30%)</title><rect x="617.8" y="131.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="620.8" y="142.0"></text>
</g>
<g>
<title>byte[] (211 samples, 0.30%)</title><rect x="617.8" y="115.0" width="3.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="620.8" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (111 samples, 0.16%)</title><rect x="621.3" y="147.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="624.3" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (111 samples, 0.16%)</title><rect x="621.3" y="131.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="624.3" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (111 samples, 0.16%)</title><rect x="621.3" y="115.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="624.3" y="126.0"></text>
</g>
<g>
<title>java.lang.String (37 samples, 0.05%)</title><rect x="621.3" y="99.0" width="0.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="624.3" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (74 samples, 0.10%)</title><rect x="621.9" y="99.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="624.9" y="110.0"></text>
</g>
<g>
<title>byte[] (74 samples, 0.10%)</title><rect x="621.9" y="83.0" width="1.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="624.9" y="94.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (31 samples, 0.04%)</title><rect x="623.2" y="147.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="626.2" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (31 samples, 0.04%)</title><rect x="623.2" y="131.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="626.2" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (31 samples, 0.04%)</title><rect x="623.2" y="115.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="626.2" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (31 samples, 0.04%)</title><rect x="623.2" y="99.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="626.2" y="110.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (727 samples, 1.03%)</title><rect x="623.7" y="195.0" width="12.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="626.7" y="206.0"></text>
</g>
<g>
<title>java/lang/String.substring (727 samples, 1.03%)</title><rect x="623.7" y="179.0" width="12.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="626.7" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (727 samples, 1.03%)</title><rect x="623.7" y="163.0" width="12.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="626.7" y="174.0"></text>
</g>
<g>
<title>java.lang.String (420 samples, 0.59%)</title><rect x="623.7" y="147.0" width="7.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="626.7" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (307 samples, 0.43%)</title><rect x="630.7" y="147.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="633.7" y="158.0"></text>
</g>
<g>
<title>byte[] (307 samples, 0.43%)</title><rect x="630.7" y="131.0" width="5.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="633.7" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (927 samples, 1.31%)</title><rect x="635.8" y="195.0" width="15.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="638.8" y="206.0"></text>
</g>
<g>
<title>java/lang/String.substring (927 samples, 1.31%)</title><rect x="635.8" y="179.0" width="15.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="638.8" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (927 samples, 1.31%)</title><rect x="635.8" y="163.0" width="15.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="638.8" y="174.0"></text>
</g>
<g>
<title>java.lang.String (476 samples, 0.67%)</title><rect x="635.8" y="147.0" width="7.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="638.8" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (451 samples, 0.64%)</title><rect x="643.7" y="147.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="646.7" y="158.0"></text>
</g>
<g>
<title>byte[] (451 samples, 0.64%)</title><rect x="643.7" y="131.0" width="7.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="646.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.fromBytes (1,269 samples, 1.79%)</title><rect x="651.3" y="195.0" width="21.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="654.3" y="206.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (721 samples, 1.02%)</title><rect x="651.3" y="179.0" width="12.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="654.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (721 samples, 1.02%)</title><rect x="651.3" y="163.0" width="12.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="654.3" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (721 samples, 1.02%)</title><rect x="651.3" y="147.0" width="12.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="654.3" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.manikhin.TimestampRecord (548 samples, 0.77%)</title><rect x="663.3" y="179.0" width="9.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="666.3" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.getEmpty (196 samples, 0.28%)</title><rect x="672.4" y="195.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="675.4" y="206.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.manikhin.TimestampRecord (196 samples, 0.28%)</title><rect x="672.4" y="179.0" width="3.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="675.4" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.getTimestamp (11,139 samples, 15.75%)</title><rect x="675.7" y="195.0" width="185.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="678.7" y="206.0">ru/mail/polis/service/ma..</text>
</g>
<g>
<title>one.nio.http.Response (513 samples, 0.73%)</title><rect x="675.7" y="179.0" width="8.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="678.7" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1,860 samples, 2.63%)</title><rect x="684.3" y="179.0" width="31.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="687.3" y="190.0">on..</text>
</g>
<g>
<title>byte[] (815 samples, 1.15%)</title><rect x="684.3" y="163.0" width="13.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="687.3" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (561 samples, 0.79%)</title><rect x="697.9" y="163.0" width="9.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="700.9" y="174.0"></text>
</g>
<g>
<title>java.lang.String (484 samples, 0.68%)</title><rect x="707.2" y="163.0" width="8.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="710.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.timestampFromByteBuffer (8,766 samples, 12.39%)</title><rect x="715.3" y="179.0" width="146.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="718.3" y="190.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>java.util.NoSuchElementException (282 samples, 0.40%)</title><rect x="715.3" y="163.0" width="4.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="718.3" y="174.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (4,901 samples, 6.93%)</title><rect x="720.0" y="163.0" width="81.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="723.0" y="174.0">java/util..</text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (4,901 samples, 6.93%)</title><rect x="720.0" y="147.0" width="81.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="723.0" y="158.0">java/lang..</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (4,901 samples, 6.93%)</title><rect x="720.0" y="131.0" width="81.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="723.0" y="142.0">java/lang..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (4,901 samples, 6.93%)</title><rect x="720.0" y="115.0" width="81.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="723.0" y="126.0">java/lang..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (4,901 samples, 6.93%)</title><rect x="720.0" y="99.0" width="81.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="723.0" y="110.0">java/lang..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (4,901 samples, 6.93%)</title><rect x="720.0" y="83.0" width="81.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="723.0" y="94.0">java/lang..</text>
</g>
<g>
<title>int[] (968 samples, 1.37%)</title><rect x="720.0" y="67.0" width="16.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="723.0" y="78.0"></text>
</g>
<g>
<title>java.lang.Object[] (1,335 samples, 1.89%)</title><rect x="736.1" y="67.0" width="22.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="739.1" y="78.0">j..</text>
</g>
<g>
<title>long[] (2,063 samples, 2.92%)</title><rect x="758.4" y="67.0" width="34.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="761.4" y="78.0">lo..</text>
</g>
<g>
<title>short[] (535 samples, 0.76%)</title><rect x="792.8" y="67.0" width="8.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="795.8" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/DAOImpl.getTimestampRecord (3,025 samples, 4.28%)</title><rect x="801.7" y="163.0" width="50.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="804.7" y="174.0">ru/ma..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (603 samples, 0.85%)</title><rect x="801.7" y="147.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="804.7" y="158.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (603 samples, 0.85%)</title><rect x="801.7" y="131.0" width="10.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="804.7" y="142.0"></text>
</g>
<g>
<title>byte[] (603 samples, 0.85%)</title><rect x="801.7" y="115.0" width="10.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="804.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/ByteConvertor.toUnsignedArray (1,306 samples, 1.85%)</title><rect x="811.8" y="147.0" width="21.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="814.8" y="158.0">r..</text>
</g>
<g>
<title>byte[] (471 samples, 0.67%)</title><rect x="811.8" y="131.0" width="7.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="814.8" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (835 samples, 1.18%)</title><rect x="819.7" y="131.0" width="13.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="822.7" y="142.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (835 samples, 1.18%)</title><rect x="819.7" y="115.0" width="13.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="822.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.fromBytes (1,116 samples, 1.58%)</title><rect x="833.6" y="147.0" width="18.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="836.6" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (550 samples, 0.78%)</title><rect x="833.6" y="131.0" width="9.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="836.6" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (550 samples, 0.78%)</title><rect x="833.6" y="115.0" width="9.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="836.6" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (550 samples, 0.78%)</title><rect x="833.6" y="99.0" width="9.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="836.6" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.manikhin.TimestampRecord (566 samples, 0.80%)</title><rect x="842.8" y="131.0" width="9.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="845.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.toBytes (558 samples, 0.79%)</title><rect x="852.2" y="163.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="855.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (558 samples, 0.79%)</title><rect x="852.2" y="147.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="855.2" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (558 samples, 0.79%)</title><rect x="852.2" y="131.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="855.2" y="142.0"></text>
</g>
<g>
<title>byte[] (558 samples, 0.79%)</title><rect x="852.2" y="115.0" width="9.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="855.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.processResponses (6,810 samples, 9.63%)</title><rect x="861.5" y="195.0" width="113.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="864.5" y="206.0">ru/mail/polis/..</text>
</g>
<g>
<title>one.nio.http.Response (443 samples, 0.63%)</title><rect x="861.5" y="179.0" width="7.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="864.5" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1,753 samples, 2.48%)</title><rect x="868.9" y="179.0" width="29.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="871.9" y="190.0">on..</text>
</g>
<g>
<title>byte[] (698 samples, 0.99%)</title><rect x="868.9" y="163.0" width="11.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="871.9" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (605 samples, 0.86%)</title><rect x="880.5" y="163.0" width="10.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="883.5" y="174.0"></text>
</g>
<g>
<title>java.lang.String (450 samples, 0.64%)</title><rect x="890.6" y="163.0" width="7.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="893.6" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.getValueAsBytes (18 samples, 0.03%)</title><rect x="898.1" y="179.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="901.1" y="190.0"></text>
</g>
<g>
<title>byte[] (18 samples, 0.03%)</title><rect x="898.1" y="163.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="901.1" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.merge (230 samples, 0.33%)</title><rect x="898.4" y="179.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="901.4" y="190.0"></text>
</g>
<g>
<title>java/util/Collection.stream (107 samples, 0.15%)</title><rect x="898.4" y="163.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="901.4" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.spliterator (21 samples, 0.03%)</title><rect x="898.4" y="147.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="901.4" y="158.0"></text>
</g>
<g>
<title>java.util.ArrayList$ArrayListSpliterator (21 samples, 0.03%)</title><rect x="898.4" y="131.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="901.4" y="142.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (86 samples, 0.12%)</title><rect x="898.8" y="147.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="901.8" y="158.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (86 samples, 0.12%)</title><rect x="898.8" y="131.0" width="1.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="901.8" y="142.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (48 samples, 0.07%)</title><rect x="900.5" y="163.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="903.5" y="174.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$2 (48 samples, 0.07%)</title><rect x="900.5" y="147.0" width="0.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="903.5" y="158.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (59 samples, 0.08%)</title><rect x="901.3" y="163.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="904.3" y="174.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (49 samples, 0.07%)</title><rect x="901.5" y="147.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="904.5" y="158.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (29 samples, 0.04%)</title><rect x="901.5" y="131.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="904.5" y="142.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (29 samples, 0.04%)</title><rect x="901.5" y="115.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="904.5" y="126.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2.makeSink (16 samples, 0.02%)</title><rect x="901.6" y="99.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="904.6" y="110.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2.makeSink (16 samples, 0.02%)</title><rect x="901.6" y="83.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="904.6" y="94.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$2ReducingSink (16 samples, 0.02%)</title><rect x="901.6" y="67.0" width="0.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="904.6" y="78.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps.makeRef (20 samples, 0.03%)</title><rect x="901.9" y="131.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="904.9" y="142.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$2 (20 samples, 0.03%)</title><rect x="901.9" y="115.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="904.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.toBytes (571 samples, 0.81%)</title><rect x="902.3" y="179.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="905.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (571 samples, 0.81%)</title><rect x="902.3" y="163.0" width="9.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="905.3" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (571 samples, 0.81%)</title><rect x="902.3" y="147.0" width="9.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="905.3" y="158.0"></text>
</g>
<g>
<title>byte[] (571 samples, 0.81%)</title><rect x="902.3" y="131.0" width="9.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="905.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.sendResponse (3,795 samples, 5.36%)</title><rect x="911.8" y="179.0" width="63.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="914.8" y="190.0">ru/mail..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3,795 samples, 5.36%)</title><rect x="911.8" y="163.0" width="63.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="914.8" y="174.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (2,834 samples, 4.01%)</title><rect x="911.8" y="147.0" width="47.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="914.8" y="158.0">one/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2,158 samples, 3.05%)</title><rect x="911.8" y="131.0" width="36.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="914.8" y="142.0">one..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2,158 samples, 3.05%)</title><rect x="911.8" y="115.0" width="36.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="914.8" y="126.0">one..</text>
</g>
<g>
<title>byte[] (2,158 samples, 3.05%)</title><rect x="911.8" y="99.0" width="36.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="914.8" y="110.0">byt..</text>
</g>
<g>
<title>one/nio/net/Session.write (676 samples, 0.96%)</title><rect x="947.8" y="131.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="950.8" y="142.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (676 samples, 0.96%)</title><rect x="947.8" y="115.0" width="11.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="950.8" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (961 samples, 1.36%)</title><rect x="959.1" y="147.0" width="16.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="962.1" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (961 samples, 1.36%)</title><rect x="959.1" y="131.0" width="16.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="962.1" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (961 samples, 1.36%)</title><rect x="959.1" y="115.0" width="16.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="962.1" y="126.0"></text>
</g>
<g>
<title>java.lang.String (373 samples, 0.53%)</title><rect x="959.1" y="99.0" width="6.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="962.1" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (588 samples, 0.83%)</title><rect x="965.3" y="99.0" width="9.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="968.3" y="110.0"></text>
</g>
<g>
<title>byte[] (588 samples, 0.83%)</title><rect x="965.3" y="83.0" width="9.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="968.3" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Topology.getReplicas (225 samples, 0.32%)</title><rect x="975.1" y="227.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="978.1" y="238.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (47 samples, 0.07%)</title><rect x="975.3" y="211.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="978.3" y="222.0"></text>
</g>
<g>
<title>java.util.HashMap (47 samples, 0.07%)</title><rect x="975.3" y="195.0" width="0.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="978.3" y="206.0"></text>
</g>
<g>
<title>java/util/HashSet.add (168 samples, 0.24%)</title><rect x="976.1" y="211.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="979.1" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.put (168 samples, 0.24%)</title><rect x="976.1" y="195.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="979.1" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (168 samples, 0.24%)</title><rect x="976.1" y="179.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="979.1" y="190.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (91 samples, 0.13%)</title><rect x="976.1" y="163.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="979.1" y="174.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (91 samples, 0.13%)</title><rect x="976.1" y="147.0" width="1.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="979.1" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (77 samples, 0.11%)</title><rect x="977.6" y="163.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="980.6" y="174.0"></text>
</g>
<g>
<title>java.util.HashMap$Node[] (77 samples, 0.11%)</title><rect x="977.6" y="147.0" width="1.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="980.6" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1,211 samples, 1.71%)</title><rect x="978.9" y="259.0" width="20.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="981.9" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,211 samples, 1.71%)</title><rect x="978.9" y="243.0" width="20.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="981.9" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,211 samples, 1.71%)</title><rect x="978.9" y="227.0" width="20.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="981.9" y="238.0"></text>
</g>
<g>
<title>java.lang.String (489 samples, 0.69%)</title><rect x="978.9" y="211.0" width="8.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="981.9" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (722 samples, 1.02%)</title><rect x="987.0" y="211.0" width="12.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="990.0" y="222.0"></text>
</g>
<g>
<title>byte[] (722 samples, 1.02%)</title><rect x="987.0" y="195.0" width="12.1" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="990.0" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5,271 samples, 7.45%)</title><rect x="999.1" y="291.0" width="87.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1002.1" y="302.0">one/nio/ht..</text>
</g>
<g>
<title>one.nio.http.Request (819 samples, 1.16%)</title><rect x="999.1" y="275.0" width="13.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1002.1" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,658 samples, 2.34%)</title><rect x="1012.7" y="275.0" width="27.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1015.7" y="286.0">o..</text>
</g>
<g>
<title>java.lang.String[] (1,658 samples, 2.34%)</title><rect x="1012.7" y="259.0" width="27.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1015.7" y="270.0">j..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,794 samples, 3.95%)</title><rect x="1040.4" y="275.0" width="46.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1043.4" y="286.0">one/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,794 samples, 3.95%)</title><rect x="1040.4" y="259.0" width="46.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1043.4" y="270.0">one/..</text>
</g>
<g>
<title>char[] (1,541 samples, 2.18%)</title><rect x="1040.4" y="243.0" width="25.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1043.4" y="254.0">c..</text>
</g>
<g>
<title>java.lang.String (472 samples, 0.67%)</title><rect x="1066.1" y="243.0" width="7.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1069.1" y="254.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (781 samples, 1.10%)</title><rect x="1074.0" y="243.0" width="13.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1077.0" y="254.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (781 samples, 1.10%)</title><rect x="1074.0" y="227.0" width="13.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1077.0" y="238.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (781 samples, 1.10%)</title><rect x="1074.0" y="211.0" width="13.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1077.0" y="222.0"></text>
</g>
<g>
<title>byte[] (781 samples, 1.10%)</title><rect x="1074.0" y="195.0" width="13.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1077.0" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6,175 samples, 8.73%)</title><rect x="1087.0" y="291.0" width="103.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1090.0" y="302.0">one/nio/util..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (6,175 samples, 8.73%)</title><rect x="1087.0" y="275.0" width="103.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1090.0" y="286.0">one/nio/util..</text>
</g>
<g>
<title>char[] (2,947 samples, 4.17%)</title><rect x="1087.0" y="259.0" width="49.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1090.0" y="270.0">char[]</text>
</g>
<g>
<title>java.lang.String (1,297 samples, 1.83%)</title><rect x="1136.2" y="259.0" width="21.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1139.2" y="270.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,931 samples, 2.73%)</title><rect x="1157.8" y="259.0" width="32.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1160.8" y="270.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,931 samples, 2.73%)</title><rect x="1157.8" y="243.0" width="32.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1160.8" y="254.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,931 samples, 2.73%)</title><rect x="1157.8" y="227.0" width="32.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1160.8" y="238.0">ja..</text>
</g>
<g>
<title>byte[] (1,931 samples, 2.73%)</title><rect x="1157.8" y="211.0" width="32.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1160.8" y="222.0">by..</text>
</g>
</g>
</svg>
