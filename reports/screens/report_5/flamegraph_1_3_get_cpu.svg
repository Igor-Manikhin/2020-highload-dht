<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1077"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1077"> </text>
<g id="frames">
<g>
<title>all (11,088 samples, 100.00%)</title><rect x="10.0" y="1043.0" width="1180.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="13.0" y="1054.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.03%)</title><rect x="10.3" y="1027.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.3" y="1038.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="10.6" y="1027.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.6" y="1038.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.03%)</title><rect x="11.2" y="1027.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="14.2" y="1038.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (11,005 samples, 99.25%)</title><rect x="11.7" y="1027.0" width="1171.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.7" y="1038.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (570 samples, 5.14%)</title><rect x="15.0" y="1011.0" width="60.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.0" y="1022.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (549 samples, 4.95%)</title><rect x="17.2" y="995.0" width="58.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.2" y="1006.0">one/ni..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (27 samples, 0.24%)</title><rect x="21.7" y="979.0" width="2.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="24.7" y="990.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (5 samples, 0.05%)</title><rect x="24.6" y="979.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="27.6" y="990.0"></text>
</g>
<g>
<title>clock_gettime (89 samples, 0.80%)</title><rect x="25.1" y="979.0" width="9.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="28.1" y="990.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.04%)</title><rect x="30.9" y="963.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="33.9" y="974.0"></text>
</g>
<g>
<title>clock_gettime (31 samples, 0.28%)</title><rect x="31.3" y="963.0" width="3.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="34.3" y="974.0"></text>
</g>
<g>
<title>[vdso] (29 samples, 0.26%)</title><rect x="31.5" y="947.0" width="3.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="34.5" y="958.0"></text>
</g>
<g>
<title>epoll_wait (386 samples, 3.48%)</title><rect x="34.6" y="979.0" width="41.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="37.6" y="990.0">epo..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (255 samples, 2.30%)</title><rect x="48.5" y="963.0" width="27.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="51.5" y="974.0">e..</text>
</g>
<g>
<title>do_syscall_64 (254 samples, 2.29%)</title><rect x="48.6" y="947.0" width="27.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="51.6" y="958.0">d..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (242 samples, 2.18%)</title><rect x="49.7" y="931.0" width="25.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="52.7" y="942.0">_..</text>
</g>
<g>
<title>do_epoll_wait (242 samples, 2.18%)</title><rect x="49.7" y="915.0" width="25.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="52.7" y="926.0">d..</text>
</g>
<g>
<title>__fdget (7 samples, 0.06%)</title><rect x="49.9" y="899.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="52.9" y="910.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.06%)</title><rect x="49.9" y="883.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="52.9" y="894.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.06%)</title><rect x="49.9" y="867.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="52.9" y="878.0"></text>
</g>
<g>
<title>ep_poll (230 samples, 2.07%)</title><rect x="50.8" y="899.0" width="24.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="53.8" y="910.0">e..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (7 samples, 0.06%)</title><rect x="52.7" y="883.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="55.7" y="894.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (152 samples, 1.37%)</title><rect x="53.4" y="883.0" width="16.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="56.4" y="894.0"></text>
</g>
<g>
<title>ep_send_events_proc (85 samples, 0.77%)</title><rect x="58.5" y="867.0" width="9.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="61.5" y="878.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (14 samples, 0.13%)</title><rect x="59.5" y="851.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="62.5" y="862.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (60 samples, 0.54%)</title><rect x="61.0" y="851.0" width="6.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="64.0" y="862.0"></text>
</g>
<g>
<title>sock_poll (47 samples, 0.42%)</title><rect x="62.4" y="835.0" width="5.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="65.4" y="846.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (18 samples, 0.16%)</title><rect x="63.6" y="819.0" width="2.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="66.6" y="830.0"></text>
</g>
<g>
<title>tcp_poll (11 samples, 0.10%)</title><rect x="65.6" y="819.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="68.6" y="830.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (6 samples, 0.05%)</title><rect x="66.7" y="819.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="69.7" y="830.0"></text>
</g>
<g>
<title>mutex_lock (19 samples, 0.17%)</title><rect x="67.6" y="867.0" width="2.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="70.6" y="878.0"></text>
</g>
<g>
<title>mutex_unlock (5 samples, 0.05%)</title><rect x="69.8" y="883.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="72.8" y="894.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (46 samples, 0.41%)</title><rect x="70.3" y="883.0" width="4.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="73.3" y="894.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (46 samples, 0.41%)</title><rect x="70.3" y="867.0" width="4.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="73.3" y="878.0"></text>
</g>
<g>
<title>schedule (44 samples, 0.40%)</title><rect x="70.6" y="851.0" width="4.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="73.6" y="862.0"></text>
</g>
<g>
<title>__sched_text_start (44 samples, 0.40%)</title><rect x="70.6" y="835.0" width="4.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="73.6" y="846.0"></text>
</g>
<g>
<title>finish_task_switch (40 samples, 0.36%)</title><rect x="71.0" y="819.0" width="4.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="74.0" y="830.0"></text>
</g>
<g>
<title>apic_timer_interrupt (3 samples, 0.03%)</title><rect x="74.9" y="803.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="77.9" y="814.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (3 samples, 0.03%)</title><rect x="74.9" y="787.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="77.9" y="798.0"></text>
</g>
<g>
<title>irq_exit (3 samples, 0.03%)</title><rect x="74.9" y="771.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="77.9" y="782.0"></text>
</g>
<g>
<title>__softirqentry_text_start (3 samples, 0.03%)</title><rect x="74.9" y="755.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="77.9" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (10,386 samples, 93.67%)</title><rect x="75.7" y="1011.0" width="1105.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.7" y="1022.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (10,335 samples, 93.21%)</title><rect x="80.9" y="995.0" width="1099.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.9" y="1006.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (9,614 samples, 86.71%)</title><rect x="81.0" y="979.0" width="1023.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="84.0" y="990.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (9,339 samples, 84.23%)</title><rect x="85.6" y="963.0" width="993.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.6" y="974.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (9,339 samples, 84.23%)</title><rect x="85.6" y="947.0" width="993.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.6" y="958.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (9,224 samples, 83.19%)</title><rect x="85.9" y="931.0" width="981.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="88.9" y="942.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (41 samples, 0.37%)</title><rect x="86.0" y="915.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="89.0" y="926.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.05%)</title><rect x="88.3" y="899.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="91.3" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.05%)</title><rect x="88.3" y="883.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.3" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (11 samples, 0.10%)</title><rect x="89.1" y="899.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="92.1" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (94 samples, 0.85%)</title><rect x="90.3" y="915.0" width="10.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.3" y="926.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (94 samples, 0.85%)</title><rect x="90.3" y="899.0" width="10.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.3" y="910.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.05%)</title><rect x="94.3" y="883.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.3" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.05%)</title><rect x="94.3" y="867.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="97.3" y="878.0"></text>
</g>
<g>
<title>java/lang/String.substring (12 samples, 0.11%)</title><rect x="94.8" y="883.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.8" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (12 samples, 0.11%)</title><rect x="94.8" y="867.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="97.8" y="878.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (8 samples, 0.07%)</title><rect x="95.2" y="851.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.2" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (19 samples, 0.17%)</title><rect x="96.3" y="883.0" width="2.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="99.3" y="894.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (19 samples, 0.17%)</title><rect x="98.3" y="883.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="101.3" y="894.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.07%)</title><rect x="99.5" y="867.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="102.5" y="878.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.07%)</title><rect x="99.5" y="851.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.5" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.07%)</title><rect x="99.5" y="835.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.5" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/AsyncServiceImpl.entity (9,088 samples, 81.96%)</title><rect x="100.4" y="915.0" width="967.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="103.4" y="926.0">ru/mail/polis/service/manikhin/AsyncServiceImpl.entity</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (31 samples, 0.28%)</title><rect x="103.0" y="899.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="106.0" y="910.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (24 samples, 0.22%)</title><rect x="103.7" y="883.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="106.7" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (24 samples, 0.22%)</title><rect x="103.7" y="867.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="106.7" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Replicas.replicaFactor (69 samples, 0.62%)</title><rect x="106.3" y="899.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="109.3" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Replicas.parser (69 samples, 0.62%)</title><rect x="106.3" y="883.0" width="7.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="109.3" y="894.0"></text>
</g>
<g>
<title>java/lang/String.split (69 samples, 0.62%)</title><rect x="106.3" y="867.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="109.3" y="878.0"></text>
</g>
<g>
<title>java/lang/String.split (69 samples, 0.62%)</title><rect x="106.3" y="851.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="109.3" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (31 samples, 0.28%)</title><rect x="108.0" y="835.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="111.0" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (31 samples, 0.28%)</title><rect x="108.0" y="819.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="111.0" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="110.9" y="803.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="113.9" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (14 samples, 0.13%)</title><rect x="111.4" y="835.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.4" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (14 samples, 0.13%)</title><rect x="111.4" y="819.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="114.4" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (14 samples, 0.13%)</title><rect x="111.4" y="803.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="114.4" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (14 samples, 0.13%)</title><rect x="111.4" y="787.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="114.4" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (14 samples, 0.13%)</title><rect x="111.4" y="771.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.4" y="782.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_array_post_entry(HeapWord*, unsigned long) (8 samples, 0.07%)</title><rect x="111.6" y="755.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="114.6" y="766.0"></text>
</g>
<g>
<title>checkcast_arraycopy (4 samples, 0.04%)</title><rect x="112.5" y="755.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="115.5" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.05%)</title><rect x="113.0" y="835.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="116.0" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.handleMultiRequest (8,891 samples, 80.19%)</title><rect x="113.7" y="899.0" width="946.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="116.7" y="910.0">ru/mail/polis/service/manikhin/ReplicasRequests.handleMultiRequest</text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.multiGet (8,882 samples, 80.10%)</title><rect x="113.9" y="883.0" width="945.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="116.9" y="894.0">ru/mail/polis/service/manikhin/ReplicasRequests.multiGet</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.05%)</title><rect x="114.6" y="867.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.6" y="878.0"></text>
</g>
<g>
<title>java/util/AbstractList.&lt;init&gt; (3 samples, 0.03%)</title><rect x="114.8" y="851.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="117.8" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$SingletonSet.iterator (4 samples, 0.04%)</title><rect x="115.1" y="867.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="118.1" y="878.0"></text>
</g>
<g>
<title>java/util/Collections.singletonIterator (4 samples, 0.04%)</title><rect x="115.1" y="851.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.1" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (13 samples, 0.12%)</title><rect x="115.6" y="867.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (13 samples, 0.12%)</title><rect x="115.6" y="851.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (16 samples, 0.14%)</title><rect x="117.0" y="867.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="120.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (13 samples, 0.12%)</title><rect x="117.0" y="851.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="120.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (13 samples, 0.12%)</title><rect x="117.0" y="835.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="120.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (13 samples, 0.12%)</title><rect x="117.0" y="819.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="120.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (3 samples, 0.03%)</title><rect x="118.3" y="851.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="121.3" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.get (3,507 samples, 31.63%)</title><rect x="118.7" y="867.0" width="373.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="121.7" y="878.0">one/nio/http/HttpClient.get</text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (20 samples, 0.18%)</title><rect x="118.7" y="851.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="121.7" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (8 samples, 0.07%)</title><rect x="119.9" y="835.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.9" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.07%)</title><rect x="119.9" y="819.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="122.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.07%)</title><rect x="119.9" y="803.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="122.9" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.07%)</title><rect x="119.9" y="787.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="122.9" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3,487 samples, 31.45%)</title><rect x="120.8" y="851.0" width="371.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="123.8" y="862.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3,482 samples, 31.40%)</title><rect x="121.3" y="835.0" width="370.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="124.3" y="846.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (38 samples, 0.34%)</title><rect x="123.4" y="819.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="126.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.03%)</title><rect x="126.6" y="803.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="129.6" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (3 samples, 0.03%)</title><rect x="127.2" y="803.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="130.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (683 samples, 6.16%)</title><rect x="127.5" y="819.0" width="72.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="130.5" y="830.0">one/nio/..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (23 samples, 0.21%)</title><rect x="128.1" y="803.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="131.1" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (23 samples, 0.21%)</title><rect x="128.1" y="787.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="131.1" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (23 samples, 0.21%)</title><rect x="128.1" y="771.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="131.1" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (21 samples, 0.19%)</title><rect x="128.1" y="755.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="131.1" y="766.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (7 samples, 0.06%)</title><rect x="128.2" y="739.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="131.2" y="750.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (13 samples, 0.12%)</title><rect x="129.0" y="739.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="132.0" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (7 samples, 0.06%)</title><rect x="129.0" y="723.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="132.0" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (6 samples, 0.05%)</title><rect x="129.0" y="707.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="132.0" y="718.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (4 samples, 0.04%)</title><rect x="129.1" y="691.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="132.1" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (4 samples, 0.04%)</title><rect x="129.1" y="675.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="132.1" y="686.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (3 samples, 0.03%)</title><rect x="129.1" y="659.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="132.1" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (6 samples, 0.05%)</title><rect x="129.7" y="723.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="132.7" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (645 samples, 5.82%)</title><rect x="130.8" y="803.0" width="68.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="133.8" y="814.0">one/nio..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (22 samples, 0.20%)</title><rect x="134.3" y="787.0" width="2.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="137.3" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (42 samples, 0.38%)</title><rect x="136.6" y="787.0" width="4.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="139.6" y="798.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.04%)</title><rect x="137.5" y="771.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="140.5" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (28 samples, 0.25%)</title><rect x="138.1" y="771.0" width="3.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="141.1" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (14 samples, 0.13%)</title><rect x="139.1" y="755.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="142.1" y="766.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.05%)</title><rect x="140.6" y="755.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="143.6" y="766.0"></text>
</g>
<g>
<title>__recv (543 samples, 4.90%)</title><rect x="141.3" y="787.0" width="57.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="144.3" y="798.0">__recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (484 samples, 4.37%)</title><rect x="147.6" y="771.0" width="51.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="150.6" y="782.0">entry..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (11 samples, 0.10%)</title><rect x="147.8" y="755.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="150.8" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (471 samples, 4.25%)</title><rect x="149.0" y="755.0" width="50.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="152.0" y="766.0">do_sy..</text>
</g>
<g>
<title>__x64_sys_recvfrom (431 samples, 3.89%)</title><rect x="153.1" y="739.0" width="45.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="156.1" y="750.0">__x6..</text>
</g>
<g>
<title>__sys_recvfrom (427 samples, 3.85%)</title><rect x="153.1" y="723.0" width="45.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="156.1" y="734.0">__sy..</text>
</g>
<g>
<title>sock_recvmsg (400 samples, 3.61%)</title><rect x="154.3" y="707.0" width="42.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="157.3" y="718.0">sock..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (4 samples, 0.04%)</title><rect x="154.8" y="691.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="157.8" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (7 samples, 0.06%)</title><rect x="155.3" y="691.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="158.3" y="702.0"></text>
</g>
<g>
<title>inet6_recvmsg (348 samples, 3.14%)</title><rect x="156.0" y="691.0" width="37.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="159.0" y="702.0">ine..</text>
</g>
<g>
<title>tcp_recvmsg (335 samples, 3.02%)</title><rect x="157.4" y="675.0" width="35.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="160.4" y="686.0">tcp..</text>
</g>
<g>
<title>__kfree_skb (56 samples, 0.51%)</title><rect x="160.8" y="659.0" width="6.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="163.8" y="670.0"></text>
</g>
<g>
<title>kfree_skbmem (12 samples, 0.11%)</title><rect x="160.8" y="643.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="163.8" y="654.0"></text>
</g>
<g>
<title>skb_release_all (44 samples, 0.40%)</title><rect x="162.1" y="643.0" width="4.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="165.1" y="654.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="162.1" y="627.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="165.1" y="638.0"></text>
</g>
<g>
<title>skb_release_data (13 samples, 0.12%)</title><rect x="162.4" y="627.0" width="1.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="165.4" y="638.0"></text>
</g>
<g>
<title>skb_release_head_state (18 samples, 0.16%)</title><rect x="163.8" y="627.0" width="1.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="166.8" y="638.0"></text>
</g>
<g>
<title>dst_release (17 samples, 0.15%)</title><rect x="163.9" y="611.0" width="1.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="166.9" y="622.0"></text>
</g>
<g>
<title>sock_rfree (10 samples, 0.09%)</title><rect x="165.7" y="627.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="168.7" y="638.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (19 samples, 0.17%)</title><rect x="167.0" y="659.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="170.0" y="670.0"></text>
</g>
<g>
<title>sk_wait_data (91 samples, 0.82%)</title><rect x="169.5" y="659.0" width="9.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="172.5" y="670.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (9 samples, 0.08%)</title><rect x="169.5" y="643.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="172.5" y="654.0"></text>
</g>
<g>
<title>lock_sock_nested (9 samples, 0.08%)</title><rect x="170.6" y="643.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="173.6" y="654.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (9 samples, 0.08%)</title><rect x="170.6" y="627.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="173.6" y="638.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (9 samples, 0.08%)</title><rect x="170.6" y="611.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="173.6" y="622.0"></text>
</g>
<g>
<title>remove_wait_queue (5 samples, 0.05%)</title><rect x="171.7" y="643.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="174.7" y="654.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (5 samples, 0.05%)</title><rect x="171.7" y="627.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="174.7" y="638.0"></text>
</g>
<g>
<title>wait_woken (65 samples, 0.59%)</title><rect x="172.3" y="643.0" width="6.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="175.3" y="654.0"></text>
</g>
<g>
<title>schedule_timeout (64 samples, 0.58%)</title><rect x="172.4" y="627.0" width="6.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="175.4" y="638.0"></text>
</g>
<g>
<title>__mod_timer (21 samples, 0.19%)</title><rect x="172.4" y="611.0" width="2.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="175.4" y="622.0"></text>
</g>
<g>
<title>__lock_text_start (16 samples, 0.14%)</title><rect x="172.8" y="595.0" width="1.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="175.8" y="606.0"></text>
</g>
<g>
<title>del_timer_sync (15 samples, 0.14%)</title><rect x="174.6" y="611.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="177.6" y="622.0"></text>
</g>
<g>
<title>try_to_del_timer_sync (15 samples, 0.14%)</title><rect x="174.6" y="595.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="177.6" y="606.0"></text>
</g>
<g>
<title>__lock_text_start (9 samples, 0.08%)</title><rect x="174.6" y="579.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="177.6" y="590.0"></text>
</g>
<g>
<title>lock_timer_base (6 samples, 0.05%)</title><rect x="175.6" y="579.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="178.6" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (6 samples, 0.05%)</title><rect x="175.6" y="563.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="178.6" y="574.0"></text>
</g>
<g>
<title>schedule (28 samples, 0.25%)</title><rect x="176.2" y="611.0" width="3.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="179.2" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (28 samples, 0.25%)</title><rect x="176.2" y="595.0" width="3.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="179.2" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (23 samples, 0.21%)</title><rect x="176.8" y="579.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="179.8" y="590.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (45 samples, 0.41%)</title><rect x="179.2" y="659.0" width="4.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="182.2" y="670.0"></text>
</g>
<g>
<title>__skb_datagram_iter (45 samples, 0.41%)</title><rect x="179.2" y="643.0" width="4.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="182.2" y="654.0"></text>
</g>
<g>
<title>simple_copy_to_iter (39 samples, 0.35%)</title><rect x="179.8" y="627.0" width="4.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="182.8" y="638.0"></text>
</g>
<g>
<title>__check_object_size (6 samples, 0.05%)</title><rect x="179.8" y="611.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="182.8" y="622.0"></text>
</g>
<g>
<title>_copy_to_iter (30 samples, 0.27%)</title><rect x="180.5" y="611.0" width="3.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="183.5" y="622.0"></text>
</g>
<g>
<title>copy_user_generic_string (25 samples, 0.23%)</title><rect x="181.0" y="595.0" width="2.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="184.0" y="606.0"></text>
</g>
<g>
<title>copyout (3 samples, 0.03%)</title><rect x="183.7" y="611.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="186.7" y="622.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (55 samples, 0.50%)</title><rect x="184.1" y="659.0" width="5.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="187.1" y="670.0"></text>
</g>
<g>
<title>__tcp_select_window (5 samples, 0.05%)</title><rect x="185.8" y="643.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="188.8" y="654.0"></text>
</g>
<g>
<title>tcp_send_ack (34 samples, 0.31%)</title><rect x="186.3" y="643.0" width="3.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="189.3" y="654.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (34 samples, 0.31%)</title><rect x="186.3" y="627.0" width="3.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="189.3" y="638.0"></text>
</g>
<g>
<title>__alloc_skb (5 samples, 0.05%)</title><rect x="186.4" y="611.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="189.4" y="622.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (27 samples, 0.24%)</title><rect x="187.0" y="611.0" width="2.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="190.0" y="622.0"></text>
</g>
<g>
<title>ip_queue_xmit (27 samples, 0.24%)</title><rect x="187.0" y="595.0" width="2.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="190.0" y="606.0"></text>
</g>
<g>
<title>__ip_queue_xmit (27 samples, 0.24%)</title><rect x="187.0" y="579.0" width="2.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="190.0" y="590.0"></text>
</g>
<g>
<title>ip_local_out (27 samples, 0.24%)</title><rect x="187.0" y="563.0" width="2.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="190.0" y="574.0"></text>
</g>
<g>
<title>ip_output (26 samples, 0.23%)</title><rect x="187.1" y="547.0" width="2.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="190.1" y="558.0"></text>
</g>
<g>
<title>ip_finish_output (26 samples, 0.23%)</title><rect x="187.1" y="531.0" width="2.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="190.1" y="542.0"></text>
</g>
<g>
<title>__ip_finish_output (25 samples, 0.23%)</title><rect x="187.1" y="515.0" width="2.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="190.1" y="526.0"></text>
</g>
<g>
<title>ip_finish_output2 (25 samples, 0.23%)</title><rect x="187.1" y="499.0" width="2.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="190.1" y="510.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (23 samples, 0.21%)</title><rect x="187.1" y="483.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="190.1" y="494.0"></text>
</g>
<g>
<title>do_softirq.part.0 (23 samples, 0.21%)</title><rect x="187.1" y="467.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="190.1" y="478.0"></text>
</g>
<g>
<title>do_softirq_own_stack (22 samples, 0.20%)</title><rect x="187.2" y="451.0" width="2.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="190.2" y="462.0"></text>
</g>
<g>
<title>__softirqentry_text_start (22 samples, 0.20%)</title><rect x="187.2" y="435.0" width="2.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="190.2" y="446.0"></text>
</g>
<g>
<title>net_rx_action (22 samples, 0.20%)</title><rect x="187.2" y="419.0" width="2.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="190.2" y="430.0"></text>
</g>
<g>
<title>process_backlog (20 samples, 0.18%)</title><rect x="187.4" y="403.0" width="2.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="190.4" y="414.0"></text>
</g>
<g>
<title>__netif_receive_skb (19 samples, 0.17%)</title><rect x="187.5" y="387.0" width="2.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="190.5" y="398.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (19 samples, 0.17%)</title><rect x="187.5" y="371.0" width="2.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="190.5" y="382.0"></text>
</g>
<g>
<title>ip_rcv (19 samples, 0.17%)</title><rect x="187.5" y="355.0" width="2.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="190.5" y="366.0"></text>
</g>
<g>
<title>ip_rcv_finish (17 samples, 0.15%)</title><rect x="187.7" y="339.0" width="1.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="190.7" y="350.0"></text>
</g>
<g>
<title>ip_local_deliver (17 samples, 0.15%)</title><rect x="187.7" y="323.0" width="1.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="190.7" y="334.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (16 samples, 0.14%)</title><rect x="187.7" y="307.0" width="1.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="190.7" y="318.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (16 samples, 0.14%)</title><rect x="187.7" y="291.0" width="1.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="190.7" y="302.0"></text>
</g>
<g>
<title>tcp_v4_rcv (16 samples, 0.14%)</title><rect x="187.7" y="275.0" width="1.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="190.7" y="286.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (13 samples, 0.12%)</title><rect x="188.0" y="259.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="191.0" y="270.0"></text>
</g>
<g>
<title>tcp_rcv_established (11 samples, 0.10%)</title><rect x="188.3" y="243.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="191.3" y="254.0"></text>
</g>
<g>
<title>tcp_ack (8 samples, 0.07%)</title><rect x="188.6" y="227.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="191.6" y="238.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (6 samples, 0.05%)</title><rect x="188.8" y="211.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="191.8" y="222.0"></text>
</g>
<g>
<title>__kfree_skb (5 samples, 0.05%)</title><rect x="188.8" y="195.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="191.8" y="206.0"></text>
</g>
<g>
<title>skb_release_all (3 samples, 0.03%)</title><rect x="188.9" y="179.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="191.9" y="190.0"></text>
</g>
<g>
<title>skb_release_data (3 samples, 0.03%)</title><rect x="188.9" y="163.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="191.9" y="174.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (26 samples, 0.23%)</title><rect x="190.2" y="659.0" width="2.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="193.2" y="670.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (23 samples, 0.21%)</title><rect x="190.5" y="643.0" width="2.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="193.5" y="654.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (15 samples, 0.14%)</title><rect x="190.5" y="627.0" width="1.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="193.5" y="638.0"></text>
</g>
<g>
<title>read_tsc (7 samples, 0.06%)</title><rect x="192.2" y="627.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="195.2" y="638.0"></text>
</g>
<g>
<title>security_socket_recvmsg (36 samples, 0.32%)</title><rect x="193.0" y="691.0" width="3.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="196.0" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (31 samples, 0.28%)</title><rect x="193.6" y="675.0" width="3.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="196.6" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (31 samples, 0.28%)</title><rect x="193.6" y="659.0" width="3.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="196.6" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (23 samples, 0.21%)</title><rect x="194.3" y="643.0" width="2.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="197.3" y="654.0"></text>
</g>
<g>
<title>aa_profile_af_perm (11 samples, 0.10%)</title><rect x="195.6" y="627.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="198.6" y="638.0"></text>
</g>
<g>
<title>sockfd_lookup_light (16 samples, 0.14%)</title><rect x="196.9" y="707.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="199.9" y="718.0"></text>
</g>
<g>
<title>__fdget (13 samples, 0.12%)</title><rect x="196.9" y="691.0" width="1.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="199.9" y="702.0"></text>
</g>
<g>
<title>__fget_light (13 samples, 0.12%)</title><rect x="196.9" y="675.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="199.9" y="686.0"></text>
</g>
<g>
<title>__fget (13 samples, 0.12%)</title><rect x="196.9" y="659.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="199.9" y="670.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.03%)</title><rect x="198.3" y="691.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="201.3" y="702.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.03%)</title><rect x="199.1" y="787.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="202.1" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.05%)</title><rect x="199.4" y="803.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.4" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (474 samples, 4.27%)</title><rect x="200.2" y="819.0" width="50.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="203.2" y="830.0">one/n..</text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.04%)</title><rect x="200.8" y="803.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (4 samples, 0.04%)</title><rect x="200.8" y="787.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (16 samples, 0.14%)</title><rect x="201.3" y="803.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.3" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (16 samples, 0.14%)</title><rect x="201.3" y="787.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 0.10%)</title><rect x="201.3" y="771.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.3" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.03%)</title><rect x="202.2" y="755.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.2" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.05%)</title><rect x="202.5" y="771.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.5" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (140 samples, 1.26%)</title><rect x="203.0" y="803.0" width="14.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="206.0" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (27 samples, 0.24%)</title><rect x="207.7" y="787.0" width="2.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="210.7" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (69 samples, 0.62%)</title><rect x="210.6" y="787.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (68 samples, 0.61%)</title><rect x="210.7" y="771.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="213.7" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (14 samples, 0.13%)</title><rect x="217.9" y="803.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.9" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (192 samples, 1.73%)</title><rect x="219.4" y="803.0" width="20.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="222.4" y="814.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.03%)</title><rect x="239.6" y="787.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="242.6" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.03%)</title><rect x="239.6" y="771.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="242.6" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.03%)</title><rect x="239.6" y="755.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="242.6" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (59 samples, 0.53%)</title><rect x="239.9" y="803.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (46 samples, 0.41%)</title><rect x="241.3" y="787.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="244.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (46 samples, 0.41%)</title><rect x="241.3" y="771.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="244.3" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (20 samples, 0.18%)</title><rect x="244.0" y="755.0" width="2.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="247.0" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (13 samples, 0.12%)</title><rect x="246.1" y="803.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.05%)</title><rect x="247.0" y="787.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.0" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.setBody (29 samples, 0.26%)</title><rect x="247.5" y="803.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.5" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (122 samples, 1.10%)</title><rect x="250.6" y="819.0" width="13.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.6" y="830.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (14 samples, 0.13%)</title><rect x="251.6" y="803.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.6" y="814.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (8 samples, 0.07%)</title><rect x="252.2" y="787.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.2" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.06%)</title><rect x="252.3" y="771.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="255.3" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (89 samples, 0.80%)</title><rect x="253.1" y="803.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.1" y="814.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (14 samples, 0.13%)</title><rect x="254.6" y="787.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (11 samples, 0.10%)</title><rect x="254.9" y="771.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="257.9" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (31 samples, 0.28%)</title><rect x="256.0" y="787.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="259.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (5 samples, 0.05%)</title><rect x="257.0" y="771.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.0" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (15 samples, 0.14%)</title><rect x="257.7" y="771.0" width="1.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="260.7" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (30 samples, 0.27%)</title><rect x="259.3" y="787.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="262.3" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (30 samples, 0.27%)</title><rect x="259.3" y="771.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="262.3" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (25 samples, 0.23%)</title><rect x="259.9" y="755.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.9" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (10 samples, 0.09%)</title><rect x="261.5" y="739.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="264.5" y="750.0"></text>
</g>
<g>
<title>java/lang/String.coder (5 samples, 0.05%)</title><rect x="262.0" y="723.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="265.0" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (10 samples, 0.09%)</title><rect x="262.5" y="803.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.05%)</title><rect x="263.0" y="787.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.0" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.03%)</title><rect x="263.3" y="771.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="266.3" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (39 samples, 0.35%)</title><rect x="263.6" y="819.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="266.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (30 samples, 0.27%)</title><rect x="264.6" y="803.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="267.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (30 samples, 0.27%)</title><rect x="264.6" y="787.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.6" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (17 samples, 0.15%)</title><rect x="265.9" y="771.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="268.9" y="782.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (346 samples, 3.12%)</title><rect x="267.8" y="819.0" width="36.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="270.8" y="830.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (6 samples, 0.05%)</title><rect x="269.5" y="803.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="272.5" y="814.0"></text>
</g>
<g>
<title>setsockopt (324 samples, 2.92%)</title><rect x="270.1" y="803.0" width="34.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="273.1" y="814.0">se..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (281 samples, 2.53%)</title><rect x="274.6" y="787.0" width="29.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="277.6" y="798.0">en..</text>
</g>
<g>
<title>__x64_sys_setsockopt (3 samples, 0.03%)</title><rect x="274.6" y="771.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="277.6" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (278 samples, 2.51%)</title><rect x="274.9" y="771.0" width="29.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="277.9" y="782.0">do..</text>
</g>
<g>
<title>__x64_sys_setsockopt (223 samples, 2.01%)</title><rect x="280.5" y="755.0" width="23.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="283.5" y="766.0">_..</text>
</g>
<g>
<title>__sys_setsockopt (218 samples, 1.97%)</title><rect x="280.6" y="739.0" width="23.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="283.6" y="750.0">_..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_setsockopt (8 samples, 0.07%)</title><rect x="281.9" y="723.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="284.9" y="734.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.07%)</title><rect x="283.0" y="723.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="286.0" y="734.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (7 samples, 0.06%)</title><rect x="283.8" y="723.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="286.8" y="734.0"></text>
</g>
<g>
<title>fput_many (4 samples, 0.04%)</title><rect x="284.6" y="723.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="287.6" y="734.0"></text>
</g>
<g>
<title>security_socket_setsockopt (62 samples, 0.56%)</title><rect x="285.2" y="723.0" width="6.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="288.2" y="734.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (50 samples, 0.45%)</title><rect x="286.5" y="707.0" width="5.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="289.5" y="718.0"></text>
</g>
<g>
<title>aa_sk_perm (49 samples, 0.44%)</title><rect x="286.6" y="691.0" width="5.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="289.6" y="702.0"></text>
</g>
<g>
<title>aa_label_next_confined (3 samples, 0.03%)</title><rect x="287.5" y="675.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="290.5" y="686.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (37 samples, 0.33%)</title><rect x="287.9" y="675.0" width="3.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="290.9" y="686.0"></text>
</g>
<g>
<title>aa_profile_af_perm (16 samples, 0.14%)</title><rect x="290.1" y="659.0" width="1.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="293.1" y="670.0"></text>
</g>
<g>
<title>sock_setsockopt (74 samples, 0.67%)</title><rect x="291.9" y="723.0" width="7.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="294.9" y="734.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="292.4" y="707.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="295.4" y="718.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (35 samples, 0.32%)</title><rect x="292.8" y="707.0" width="3.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="295.8" y="718.0"></text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.03%)</title><rect x="296.6" y="707.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="299.6" y="718.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.03%)</title><rect x="296.6" y="691.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="299.6" y="702.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.03%)</title><rect x="296.9" y="707.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="299.9" y="718.0"></text>
</g>
<g>
<title>sock_set_timeout (22 samples, 0.20%)</title><rect x="297.2" y="707.0" width="2.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="300.2" y="718.0"></text>
</g>
<g>
<title>_copy_from_user (4 samples, 0.04%)</title><rect x="298.0" y="691.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="301.0" y="702.0"></text>
</g>
<g>
<title>copy_user_generic_string (10 samples, 0.09%)</title><rect x="298.5" y="691.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="301.5" y="702.0"></text>
</g>
<g>
<title>sockfd_lookup_light (38 samples, 0.34%)</title><rect x="299.8" y="723.0" width="4.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="302.8" y="734.0"></text>
</g>
<g>
<title>__fdget (33 samples, 0.30%)</title><rect x="299.8" y="707.0" width="3.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="302.8" y="718.0"></text>
</g>
<g>
<title>__fget_light (33 samples, 0.30%)</title><rect x="299.8" y="691.0" width="3.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="302.8" y="702.0"></text>
</g>
<g>
<title>__fget (33 samples, 0.30%)</title><rect x="299.8" y="675.0" width="3.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="302.8" y="686.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.05%)</title><rect x="303.3" y="707.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="306.3" y="718.0"></text>
</g>
<g>
<title>sock_setsockopt (4 samples, 0.04%)</title><rect x="303.8" y="739.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="306.8" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (1,721 samples, 15.52%)</title><rect x="304.6" y="819.0" width="183.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="307.6" y="830.0">one/nio/net/NativeSocket..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (15 samples, 0.14%)</title><rect x="307.7" y="803.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="310.7" y="814.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (38 samples, 0.34%)</title><rect x="309.3" y="803.0" width="4.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="312.3" y="814.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (8 samples, 0.07%)</title><rect x="309.8" y="787.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="312.8" y="798.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.05%)</title><rect x="310.6" y="787.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="313.6" y="798.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (20 samples, 0.18%)</title><rect x="311.2" y="787.0" width="2.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="314.2" y="798.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.03%)</title><rect x="312.1" y="771.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="315.1" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (7 samples, 0.06%)</title><rect x="312.4" y="771.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="315.4" y="782.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.04%)</title><rect x="313.4" y="803.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="316.4" y="814.0"></text>
</g>
<g>
<title>send (1,634 samples, 14.74%)</title><rect x="313.8" y="803.0" width="173.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="316.8" y="814.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,598 samples, 14.41%)</title><rect x="317.7" y="787.0" width="170.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="320.7" y="798.0">entry_SYSCALL_64_after..</text>
</g>
<g>
<title>do_syscall_64 (1,597 samples, 14.40%)</title><rect x="317.8" y="771.0" width="169.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="320.8" y="782.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (1,568 samples, 14.14%)</title><rect x="319.2" y="755.0" width="166.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="322.2" y="766.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,566 samples, 14.12%)</title><rect x="319.2" y="739.0" width="166.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="322.2" y="750.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (5 samples, 0.05%)</title><rect x="319.7" y="723.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="322.7" y="734.0"></text>
</g>
<g>
<title>sock_sendmsg (1,539 samples, 13.88%)</title><rect x="320.2" y="723.0" width="163.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="323.2" y="734.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (1,512 samples, 13.64%)</title><rect x="320.8" y="707.0" width="160.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="323.8" y="718.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (1,511 samples, 13.63%)</title><rect x="320.9" y="691.0" width="160.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="323.9" y="702.0">tcp_sendmsg</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (7 samples, 0.06%)</title><rect x="321.1" y="675.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="324.1" y="686.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (11 samples, 0.10%)</title><rect x="321.9" y="675.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="324.9" y="686.0"></text>
</g>
<g>
<title>release_sock (37 samples, 0.33%)</title><rect x="323.1" y="675.0" width="3.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="326.1" y="686.0"></text>
</g>
<g>
<title>__release_sock (30 samples, 0.27%)</title><rect x="323.5" y="659.0" width="3.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="326.5" y="670.0"></text>
</g>
<g>
<title>_cond_resched (3 samples, 0.03%)</title><rect x="323.7" y="643.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="326.7" y="654.0"></text>
</g>
<g>
<title>preempt_schedule_common (3 samples, 0.03%)</title><rect x="323.7" y="627.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="326.7" y="638.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.03%)</title><rect x="323.7" y="611.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="326.7" y="622.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.03%)</title><rect x="323.7" y="595.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="326.7" y="606.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (23 samples, 0.21%)</title><rect x="324.3" y="643.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="327.3" y="654.0"></text>
</g>
<g>
<title>tcp_rcv_established (20 samples, 0.18%)</title><rect x="324.6" y="627.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="327.6" y="638.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="324.8" y="611.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="327.8" y="622.0"></text>
</g>
<g>
<title>tcp_ack (10 samples, 0.09%)</title><rect x="325.1" y="611.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="328.1" y="622.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (6 samples, 0.05%)</title><rect x="325.4" y="595.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="328.4" y="606.0"></text>
</g>
<g>
<title>tcp_queue_rcv (3 samples, 0.03%)</title><rect x="326.3" y="611.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="329.3" y="622.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (6 samples, 0.05%)</title><rect x="327.5" y="675.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="330.5" y="686.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,441 samples, 13.00%)</title><rect x="328.2" y="675.0" width="153.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="331.2" y="686.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__alloc_skb (3 samples, 0.03%)</title><rect x="330.2" y="659.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="333.2" y="670.0"></text>
</g>
<g>
<title>__check_object_size (10 samples, 0.09%)</title><rect x="330.5" y="659.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="333.5" y="670.0"></text>
</g>
<g>
<title>__virt_addr_valid (9 samples, 0.08%)</title><rect x="330.6" y="643.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="333.6" y="654.0"></text>
</g>
<g>
<title>_copy_from_iter_full (18 samples, 0.16%)</title><rect x="331.8" y="659.0" width="1.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="334.8" y="670.0"></text>
</g>
<g>
<title>copy_user_generic_string (15 samples, 0.14%)</title><rect x="331.9" y="643.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="334.9" y="654.0"></text>
</g>
<g>
<title>sk_page_frag_refill (13 samples, 0.12%)</title><rect x="334.3" y="659.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="337.3" y="670.0"></text>
</g>
<g>
<title>skb_page_frag_refill (11 samples, 0.10%)</title><rect x="334.5" y="643.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="337.5" y="654.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (107 samples, 0.97%)</title><rect x="335.6" y="659.0" width="11.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="338.6" y="670.0"></text>
</g>
<g>
<title>__alloc_skb (101 samples, 0.91%)</title><rect x="336.2" y="643.0" width="10.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="339.2" y="654.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (49 samples, 0.44%)</title><rect x="337.5" y="627.0" width="5.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="340.5" y="638.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (26 samples, 0.23%)</title><rect x="337.7" y="611.0" width="2.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="340.7" y="622.0"></text>
</g>
<g>
<title>__slab_alloc (9 samples, 0.08%)</title><rect x="338.8" y="595.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="341.8" y="606.0"></text>
</g>
<g>
<title>kmalloc_slab (6 samples, 0.05%)</title><rect x="339.8" y="595.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="342.8" y="606.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (3 samples, 0.03%)</title><rect x="340.7" y="611.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="343.7" y="622.0"></text>
</g>
<g>
<title>memset (16 samples, 0.14%)</title><rect x="341.0" y="611.0" width="1.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="344.0" y="622.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (17 samples, 0.15%)</title><rect x="342.8" y="627.0" width="1.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="345.8" y="638.0"></text>
</g>
<g>
<title>__slab_alloc (5 samples, 0.05%)</title><rect x="344.1" y="611.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="347.1" y="622.0"></text>
</g>
<g>
<title>ksize (7 samples, 0.06%)</title><rect x="344.6" y="627.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="347.6" y="638.0"></text>
</g>
<g>
<title>__ksize (7 samples, 0.06%)</title><rect x="344.6" y="611.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="347.6" y="622.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (4 samples, 0.04%)</title><rect x="345.3" y="627.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="348.3" y="638.0"></text>
</g>
<g>
<title>memset (11 samples, 0.10%)</title><rect x="345.8" y="627.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="348.8" y="638.0"></text>
</g>
<g>
<title>skb_entail (4 samples, 0.04%)</title><rect x="347.0" y="659.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="350.0" y="670.0"></text>
</g>
<g>
<title>tcp_push (1,236 samples, 11.15%)</title><rect x="347.6" y="659.0" width="131.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="350.6" y="670.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (1,233 samples, 11.12%)</title><rect x="347.6" y="643.0" width="131.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="350.6" y="654.0">__tcp_push_pendi..</text>
</g>
<g>
<title>tcp_write_xmit (1,228 samples, 11.08%)</title><rect x="348.1" y="627.0" width="130.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="351.1" y="638.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (1,120 samples, 10.10%)</title><rect x="349.4" y="611.0" width="119.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="352.4" y="622.0">__tcp_transmit_..</text>
</g>
<g>
<title>__tcp_select_window (3 samples, 0.03%)</title><rect x="351.4" y="595.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="354.4" y="606.0"></text>
</g>
<g>
<title>ip_queue_xmit (1,091 samples, 9.84%)</title><rect x="351.8" y="595.0" width="116.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="354.8" y="606.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (1,090 samples, 9.83%)</title><rect x="351.8" y="579.0" width="116.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="354.8" y="590.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (4 samples, 0.04%)</title><rect x="352.5" y="563.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="355.5" y="574.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.03%)</title><rect x="352.6" y="547.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="355.6" y="558.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (10 samples, 0.09%)</title><rect x="352.9" y="563.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="355.9" y="574.0"></text>
</g>
<g>
<title>ip_local_out (1,063 samples, 9.59%)</title><rect x="354.0" y="563.0" width="113.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="357.0" y="574.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (6 samples, 0.05%)</title><rect x="354.1" y="547.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="357.1" y="558.0"></text>
</g>
<g>
<title>ip_output (1,055 samples, 9.51%)</title><rect x="354.7" y="547.0" width="112.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="357.7" y="558.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (1,049 samples, 9.46%)</title><rect x="355.3" y="531.0" width="111.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="358.3" y="542.0">ip_finish_out..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (8 samples, 0.07%)</title><rect x="355.9" y="515.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="358.9" y="526.0"></text>
</g>
<g>
<title>__ip_finish_output (1,031 samples, 9.30%)</title><rect x="356.7" y="515.0" width="109.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="359.7" y="526.0">__ip_finish_o..</text>
</g>
<g>
<title>ip_finish_output2 (1,030 samples, 9.29%)</title><rect x="356.8" y="499.0" width="109.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="359.8" y="510.0">ip_finish_out..</text>
</g>
<g>
<title>__local_bh_enable_ip (947 samples, 8.54%)</title><rect x="358.4" y="483.0" width="100.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="361.4" y="494.0">__local_bh_e..</text>
</g>
<g>
<title>do_softirq.part.0 (947 samples, 8.54%)</title><rect x="358.4" y="467.0" width="100.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="361.4" y="478.0">do_softirq.p..</text>
</g>
<g>
<title>do_softirq_own_stack (924 samples, 8.33%)</title><rect x="360.6" y="451.0" width="98.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="363.6" y="462.0">do_softirq_o..</text>
</g>
<g>
<title>__softirqentry_text_start (922 samples, 8.32%)</title><rect x="360.6" y="435.0" width="98.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="363.6" y="446.0">__softirqent..</text>
</g>
<g>
<title>net_rx_action (899 samples, 8.11%)</title><rect x="363.0" y="419.0" width="95.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="366.0" y="430.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (893 samples, 8.05%)</title><rect x="363.6" y="403.0" width="95.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="366.6" y="414.0">process_bac..</text>
</g>
<g>
<title>__netif_receive_skb (876 samples, 7.90%)</title><rect x="365.4" y="387.0" width="93.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="368.4" y="398.0">__netif_rec..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (876 samples, 7.90%)</title><rect x="365.4" y="371.0" width="93.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="368.4" y="382.0">__netif_rec..</text>
</g>
<g>
<title>__netif_receive_skb_core (6 samples, 0.05%)</title><rect x="365.6" y="355.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="368.6" y="366.0"></text>
</g>
<g>
<title>ip_rcv (869 samples, 7.84%)</title><rect x="366.2" y="355.0" width="92.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="369.2" y="366.0">ip_rcv</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (5 samples, 0.05%)</title><rect x="366.4" y="339.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="369.4" y="350.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (7 samples, 0.06%)</title><rect x="367.2" y="339.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="370.2" y="350.0"></text>
</g>
<g>
<title>ip_rcv_finish (853 samples, 7.69%)</title><rect x="367.9" y="339.0" width="90.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="370.9" y="350.0">ip_rcv_fin..</text>
</g>
<g>
<title>ip_local_deliver (845 samples, 7.62%)</title><rect x="368.2" y="323.0" width="89.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="371.2" y="334.0">ip_local_d..</text>
</g>
<g>
<title>ip_local_deliver_finish (841 samples, 7.58%)</title><rect x="368.4" y="307.0" width="89.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="371.4" y="318.0">ip_local_d..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (839 samples, 7.57%)</title><rect x="368.5" y="291.0" width="89.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="371.5" y="302.0">ip_protoco..</text>
</g>
<g>
<title>sock_put (7 samples, 0.06%)</title><rect x="369.2" y="275.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="372.2" y="286.0"></text>
</g>
<g>
<title>tcp_v4_rcv (826 samples, 7.45%)</title><rect x="369.9" y="275.0" width="87.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="372.9" y="286.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (21 samples, 0.19%)</title><rect x="370.8" y="259.0" width="2.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="373.8" y="270.0"></text>
</g>
<g>
<title>inet_ehashfn (5 samples, 0.05%)</title><rect x="372.5" y="243.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="375.5" y="254.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="373.0" y="259.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="376.0" y="270.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (14 samples, 0.13%)</title><rect x="373.4" y="259.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="376.4" y="270.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (10 samples, 0.09%)</title><rect x="373.6" y="243.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="376.6" y="254.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (777 samples, 7.01%)</title><rect x="375.0" y="259.0" width="82.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="378.0" y="270.0">tcp_v4_do..</text>
</g>
<g>
<title>tcp_check_space (17 samples, 0.15%)</title><rect x="375.2" y="243.0" width="1.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="378.2" y="254.0"></text>
</g>
<g>
<title>tcp_rcv_established (756 samples, 6.82%)</title><rect x="377.3" y="243.0" width="80.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="380.3" y="254.0">tcp_rcv_e..</text>
</g>
<g>
<title>__tcp_ack_snd_check (15 samples, 0.14%)</title><rect x="378.6" y="227.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="381.6" y="238.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (13 samples, 0.12%)</title><rect x="378.9" y="211.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="381.9" y="222.0"></text>
</g>
<g>
<title>sk_reset_timer (12 samples, 0.11%)</title><rect x="379.0" y="195.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="382.0" y="206.0"></text>
</g>
<g>
<title>mod_timer (12 samples, 0.11%)</title><rect x="379.0" y="179.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="382.0" y="190.0"></text>
</g>
<g>
<title>__lock_text_start (8 samples, 0.07%)</title><rect x="379.2" y="163.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="382.2" y="174.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (16 samples, 0.14%)</title><rect x="380.2" y="227.0" width="1.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="383.2" y="238.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.03%)</title><rect x="381.9" y="227.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="384.9" y="238.0"></text>
</g>
<g>
<title>tcp_ack (150 samples, 1.35%)</title><rect x="382.3" y="227.0" width="15.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="385.3" y="238.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (12 samples, 0.11%)</title><rect x="384.6" y="211.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="387.6" y="222.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (101 samples, 0.91%)</title><rect x="386.6" y="211.0" width="10.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="389.6" y="222.0"></text>
</g>
<g>
<title>__kfree_skb (74 samples, 0.67%)</title><rect x="388.3" y="195.0" width="7.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="391.3" y="206.0"></text>
</g>
<g>
<title>kfree_skbmem (30 samples, 0.27%)</title><rect x="388.3" y="179.0" width="3.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="391.3" y="190.0"></text>
</g>
<g>
<title>kmem_cache_free (28 samples, 0.25%)</title><rect x="388.5" y="163.0" width="3.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="391.5" y="174.0"></text>
</g>
<g>
<title>__slab_free (17 samples, 0.15%)</title><rect x="389.7" y="147.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="392.7" y="158.0"></text>
</g>
<g>
<title>skb_release_all (42 samples, 0.38%)</title><rect x="391.5" y="179.0" width="4.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="394.5" y="190.0"></text>
</g>
<g>
<title>skb_release_data (42 samples, 0.38%)</title><rect x="391.5" y="163.0" width="4.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="394.5" y="174.0"></text>
</g>
<g>
<title>skb_free_head (25 samples, 0.23%)</title><rect x="393.3" y="147.0" width="2.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="396.3" y="158.0"></text>
</g>
<g>
<title>kfree (24 samples, 0.22%)</title><rect x="393.4" y="131.0" width="2.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="396.4" y="142.0"></text>
</g>
<g>
<title>__slab_free (15 samples, 0.14%)</title><rect x="394.4" y="115.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="397.4" y="126.0"></text>
</g>
<g>
<title>put_cpu_partial (3 samples, 0.03%)</title><rect x="395.7" y="99.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="398.7" y="110.0"></text>
</g>
<g>
<title>bictcp_acked (3 samples, 0.03%)</title><rect x="396.2" y="195.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="399.2" y="206.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (4 samples, 0.04%)</title><rect x="396.7" y="195.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="399.7" y="206.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (3 samples, 0.03%)</title><rect x="397.5" y="211.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="400.5" y="222.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.03%)</title><rect x="397.8" y="211.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="400.8" y="222.0"></text>
</g>
<g>
<title>tcp_data_ready (536 samples, 4.83%)</title><rect x="398.2" y="227.0" width="57.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="401.2" y="238.0">tcp_da..</text>
</g>
<g>
<title>sock_def_readable (536 samples, 4.83%)</title><rect x="398.2" y="211.0" width="57.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="401.2" y="222.0">sock_d..</text>
</g>
<g>
<title>__wake_up_sync_key (532 samples, 4.80%)</title><rect x="398.7" y="195.0" width="56.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="401.7" y="206.0">__wake..</text>
</g>
<g>
<title>__wake_up_common_lock (532 samples, 4.80%)</title><rect x="398.7" y="179.0" width="56.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="401.7" y="190.0">__wake..</text>
</g>
<g>
<title>__lock_text_start (529 samples, 4.77%)</title><rect x="398.8" y="163.0" width="56.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="401.8" y="174.0">__lock..</text>
</g>
<g>
<title>tcp_event_data_recv (3 samples, 0.03%)</title><rect x="455.3" y="227.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="458.3" y="238.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (12 samples, 0.11%)</title><rect x="455.6" y="227.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="458.6" y="238.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.07%)</title><rect x="455.7" y="211.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="458.7" y="222.0"></text>
</g>
<g>
<title>tcp_queue_rcv (4 samples, 0.04%)</title><rect x="456.9" y="227.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="459.9" y="238.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (3 samples, 0.03%)</title><rect x="458.1" y="323.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="461.1" y="334.0"></text>
</g>
<g>
<title>ret_from_intr (3 samples, 0.03%)</title><rect x="458.9" y="451.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="461.9" y="462.0"></text>
</g>
<g>
<title>do_IRQ (3 samples, 0.03%)</title><rect x="458.9" y="435.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="461.9" y="446.0"></text>
</g>
<g>
<title>irq_exit (3 samples, 0.03%)</title><rect x="458.9" y="419.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="461.9" y="430.0"></text>
</g>
<g>
<title>__softirqentry_text_start (3 samples, 0.03%)</title><rect x="458.9" y="403.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="461.9" y="414.0"></text>
</g>
<g>
<title>dev_queue_xmit (63 samples, 0.57%)</title><rect x="459.2" y="483.0" width="6.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="462.2" y="494.0"></text>
</g>
<g>
<title>__dev_queue_xmit (61 samples, 0.55%)</title><rect x="459.2" y="467.0" width="6.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="462.2" y="478.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (4 samples, 0.04%)</title><rect x="461.3" y="451.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="464.3" y="462.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (29 samples, 0.26%)</title><rect x="461.8" y="451.0" width="3.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="464.8" y="462.0"></text>
</g>
<g>
<title>loopback_xmit (26 samples, 0.23%)</title><rect x="462.0" y="435.0" width="2.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="465.0" y="446.0"></text>
</g>
<g>
<title>netif_rx (16 samples, 0.14%)</title><rect x="462.5" y="419.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="465.5" y="430.0"></text>
</g>
<g>
<title>netif_rx_internal (16 samples, 0.14%)</title><rect x="462.5" y="403.0" width="1.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="465.5" y="414.0"></text>
</g>
<g>
<title>enqueue_to_backlog (16 samples, 0.14%)</title><rect x="462.5" y="387.0" width="1.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="465.5" y="398.0"></text>
</g>
<g>
<title>tcp_wfree (4 samples, 0.04%)</title><rect x="464.3" y="419.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="467.3" y="430.0"></text>
</g>
<g>
<title>validate_xmit_skb (7 samples, 0.06%)</title><rect x="465.0" y="451.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="468.0" y="462.0"></text>
</g>
<g>
<title>do_softirq.part.0 (5 samples, 0.05%)</title><rect x="465.9" y="483.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="468.9" y="494.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="466.4" y="515.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="469.4" y="526.0"></text>
</g>
<g>
<title>ip_output (4 samples, 0.04%)</title><rect x="467.1" y="563.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="470.1" y="574.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.03%)</title><rect x="467.5" y="563.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="470.5" y="574.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (36 samples, 0.32%)</title><rect x="468.6" y="611.0" width="3.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="471.6" y="622.0"></text>
</g>
<g>
<title>ip_queue_xmit (3 samples, 0.03%)</title><rect x="472.6" y="611.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="475.6" y="622.0"></text>
</g>
<g>
<title>read_tsc (10 samples, 0.09%)</title><rect x="473.1" y="611.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="476.1" y="622.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (26 samples, 0.23%)</title><rect x="474.3" y="611.0" width="2.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="477.3" y="622.0"></text>
</g>
<g>
<title>tcp_rearm_rto (16 samples, 0.14%)</title><rect x="475.4" y="595.0" width="1.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="478.4" y="606.0"></text>
</g>
<g>
<title>sk_reset_timer (15 samples, 0.14%)</title><rect x="475.5" y="579.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="478.5" y="590.0"></text>
</g>
<g>
<title>mod_timer (15 samples, 0.14%)</title><rect x="475.5" y="563.0" width="1.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="478.5" y="574.0"></text>
</g>
<g>
<title>__lock_text_start (11 samples, 0.10%)</title><rect x="475.8" y="547.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="478.8" y="558.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (9 samples, 0.08%)</title><rect x="477.3" y="611.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="480.3" y="622.0"></text>
</g>
<g>
<title>tcp_write_xmit (3 samples, 0.03%)</title><rect x="478.8" y="643.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="481.8" y="654.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (4 samples, 0.04%)</title><rect x="479.1" y="659.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="482.1" y="670.0"></text>
</g>
<g>
<title>tcp_send_mss (19 samples, 0.17%)</title><rect x="479.5" y="659.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="482.5" y="670.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (4 samples, 0.04%)</title><rect x="479.5" y="643.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="482.5" y="654.0"></text>
</g>
<g>
<title>ipv4_mtu (4 samples, 0.04%)</title><rect x="480.0" y="643.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="483.0" y="654.0"></text>
</g>
<g>
<title>tcp_current_mss (11 samples, 0.10%)</title><rect x="480.4" y="643.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="483.4" y="654.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.03%)</title><rect x="481.1" y="627.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="484.1" y="638.0"></text>
</g>
<g>
<title>security_socket_sendmsg (21 samples, 0.19%)</title><rect x="481.8" y="707.0" width="2.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="484.8" y="718.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (14 samples, 0.13%)</title><rect x="482.5" y="691.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="485.5" y="702.0"></text>
</g>
<g>
<title>aa_sk_perm (13 samples, 0.12%)</title><rect x="482.6" y="675.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="485.6" y="686.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (11 samples, 0.10%)</title><rect x="482.8" y="659.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="485.8" y="670.0"></text>
</g>
<g>
<title>aa_profile_af_perm (6 samples, 0.05%)</title><rect x="483.4" y="643.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="486.4" y="654.0"></text>
</g>
<g>
<title>sockfd_lookup_light (17 samples, 0.15%)</title><rect x="484.0" y="723.0" width="1.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="487.0" y="734.0"></text>
</g>
<g>
<title>__fdget (15 samples, 0.14%)</title><rect x="484.1" y="707.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="487.1" y="718.0"></text>
</g>
<g>
<title>__fget_light (13 samples, 0.12%)</title><rect x="484.3" y="691.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="487.3" y="702.0"></text>
</g>
<g>
<title>__fget (13 samples, 0.12%)</title><rect x="484.3" y="675.0" width="1.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="487.3" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (15 samples, 0.14%)</title><rect x="486.0" y="755.0" width="1.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="489.0" y="766.0"></text>
</g>
<g>
<title>schedule (10 samples, 0.09%)</title><rect x="486.6" y="739.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="489.6" y="750.0"></text>
</g>
<g>
<title>__sched_text_start (10 samples, 0.09%)</title><rect x="486.6" y="723.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="489.6" y="734.0"></text>
</g>
<g>
<title>finish_task_switch (9 samples, 0.08%)</title><rect x="486.7" y="707.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="489.7" y="718.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (33 samples, 0.30%)</title><rect x="487.7" y="819.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="490.7" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.07%)</title><rect x="488.5" y="803.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="491.5" y="814.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (7 samples, 0.06%)</title><rect x="488.5" y="787.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="491.5" y="798.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (6 samples, 0.05%)</title><rect x="488.6" y="771.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="491.6" y="782.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (18 samples, 0.16%)</title><rect x="489.3" y="803.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="492.3" y="814.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (15 samples, 0.14%)</title><rect x="489.6" y="787.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="492.6" y="798.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (5 samples, 0.05%)</title><rect x="490.7" y="771.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="493.7" y="782.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (6 samples, 0.05%)</title><rect x="491.2" y="819.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="494.2" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.03%)</title><rect x="491.6" y="803.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="494.6" y="814.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.03%)</title><rect x="491.6" y="787.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="494.6" y="798.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.03%)</title><rect x="491.6" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="494.6" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (19 samples, 0.17%)</title><rect x="491.9" y="867.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="494.9" y="878.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (12 samples, 0.11%)</title><rect x="492.6" y="851.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="495.6" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (12 samples, 0.11%)</title><rect x="492.6" y="835.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="495.6" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (56 samples, 0.51%)</title><rect x="493.9" y="867.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="496.9" y="878.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="495.2" y="851.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.2" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.03%)</title><rect x="495.2" y="835.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="498.2" y="846.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.06%)</title><rect x="495.5" y="851.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.5" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.06%)</title><rect x="495.5" y="835.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="498.5" y="846.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (7 samples, 0.06%)</title><rect x="495.5" y="819.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="498.5" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (23 samples, 0.21%)</title><rect x="496.3" y="851.0" width="2.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="499.3" y="862.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (10 samples, 0.09%)</title><rect x="498.8" y="851.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="501.8" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.06%)</title><rect x="499.1" y="835.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="502.1" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.06%)</title><rect x="499.1" y="819.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="502.1" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 0.06%)</title><rect x="499.1" y="803.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="502.1" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.getTimestamp (2,085 samples, 18.80%)</title><rect x="499.9" y="867.0" width="221.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="502.9" y="878.0">ru/mail/polis/service/manikhi..</text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.timestampFromByteBuffer (2,083 samples, 18.79%)</title><rect x="500.1" y="851.0" width="221.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="503.1" y="862.0">ru/mail/polis/service/manikhi..</text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (374 samples, 3.37%)</title><rect x="500.2" y="835.0" width="39.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="503.2" y="846.0">jav..</text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (374 samples, 3.37%)</title><rect x="500.2" y="819.0" width="39.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="503.2" y="830.0">jav..</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (374 samples, 3.37%)</title><rect x="500.2" y="803.0" width="39.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="503.2" y="814.0">jav..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (374 samples, 3.37%)</title><rect x="500.2" y="787.0" width="39.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="503.2" y="798.0">jav..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (374 samples, 3.37%)</title><rect x="500.2" y="771.0" width="39.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="503.2" y="782.0">jav..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (365 samples, 3.29%)</title><rect x="501.1" y="755.0" width="38.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="504.1" y="766.0">jav..</text>
</g>
<g>
<title>/usr/lib/jvm/java-11-openjdk-amd64/lib/libjava.so (3 samples, 0.03%)</title><rect x="502.3" y="739.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="505.3" y="750.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (351 samples, 3.17%)</title><rect x="502.6" y="739.0" width="37.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="505.6" y="750.0">Jav..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (8 samples, 0.07%)</title><rect x="502.6" y="723.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="505.6" y="734.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (339 samples, 3.06%)</title><rect x="503.5" y="723.0" width="36.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="506.5" y="734.0">JVM..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (6 samples, 0.05%)</title><rect x="503.6" y="707.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="506.6" y="718.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.03%)</title><rect x="504.4" y="707.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="507.4" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (7 samples, 0.06%)</title><rect x="504.8" y="707.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="507.8" y="718.0"></text>
</g>
<g>
<title>Universe::should_fill_in_stack_trace(Handle) (3 samples, 0.03%)</title><rect x="505.5" y="707.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="508.5" y="718.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (316 samples, 2.85%)</title><rect x="505.9" y="707.0" width="33.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="508.9" y="718.0">ja..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (7 samples, 0.06%)</title><rect x="506.1" y="691.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="509.1" y="702.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (16 samples, 0.14%)</title><rect x="506.9" y="691.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="509.9" y="702.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 573558ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (3 samples, 0.03%)</title><rect x="508.6" y="691.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="511.6" y="702.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (3 samples, 0.03%)</title><rect x="508.9" y="691.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="511.9" y="702.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (9 samples, 0.08%)</title><rect x="509.2" y="691.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="512.2" y="702.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.03%)</title><rect x="510.3" y="691.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="513.3" y="702.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (4 samples, 0.04%)</title><rect x="510.7" y="691.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="513.7" y="702.0"></text>
</g>
<g>
<title>PreserveExceptionMark::PreserveExceptionMark(Thread*&amp;) (4 samples, 0.04%)</title><rect x="511.4" y="691.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="514.4" y="702.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.05%)</title><rect x="512.2" y="691.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="515.2" y="702.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (5 samples, 0.05%)</title><rect x="512.8" y="691.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="515.8" y="702.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (244 samples, 2.20%)</title><rect x="513.4" y="691.0" width="25.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="516.4" y="702.0">j..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (7 samples, 0.06%)</title><rect x="519.5" y="675.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="522.5" y="686.0"></text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (66 samples, 0.60%)</title><rect x="520.6" y="675.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="523.6" y="686.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (3 samples, 0.03%)</title><rect x="521.5" y="659.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="524.5" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.06%)</title><rect x="521.8" y="659.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="524.8" y="670.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (5 samples, 0.05%)</title><rect x="522.5" y="659.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="525.5" y="670.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (24 samples, 0.22%)</title><rect x="523.1" y="659.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="526.1" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (20 samples, 0.18%)</title><rect x="523.4" y="643.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="526.4" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (17 samples, 0.15%)</title><rect x="523.4" y="627.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="526.4" y="638.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.05%)</title><rect x="523.6" y="611.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="526.6" y="622.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.03%)</title><rect x="524.3" y="611.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="527.3" y="622.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (5 samples, 0.05%)</title><rect x="524.7" y="611.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="527.7" y="622.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.03%)</title><rect x="525.2" y="627.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="528.2" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (19 samples, 0.17%)</title><rect x="525.6" y="659.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="528.6" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (16 samples, 0.14%)</title><rect x="525.9" y="643.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="528.9" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (14 samples, 0.13%)</title><rect x="526.0" y="627.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="529.0" y="638.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.05%)</title><rect x="526.1" y="611.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="529.1" y="622.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.03%)</title><rect x="527.0" y="611.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="530.0" y="622.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (8 samples, 0.07%)</title><rect x="527.7" y="675.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="530.7" y="686.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (15 samples, 0.14%)</title><rect x="528.6" y="675.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="531.6" y="686.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.04%)</title><rect x="528.6" y="659.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="531.6" y="670.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (8 samples, 0.07%)</title><rect x="529.0" y="659.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="532.0" y="670.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (3 samples, 0.03%)</title><rect x="529.9" y="659.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="532.9" y="670.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (5 samples, 0.05%)</title><rect x="530.2" y="675.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="533.2" y="686.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (72 samples, 0.65%)</title><rect x="531.3" y="675.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="534.3" y="686.0"></text>
</g>
<g>
<title>CodeBlob::is_compiled() const (3 samples, 0.03%)</title><rect x="532.3" y="659.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="535.3" y="670.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (3 samples, 0.03%)</title><rect x="532.6" y="659.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="535.6" y="670.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (56 samples, 0.51%)</title><rect x="533.0" y="659.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="536.0" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.05%)</title><rect x="533.8" y="643.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="536.8" y="654.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (37 samples, 0.33%)</title><rect x="534.3" y="643.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="537.3" y="654.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (6 samples, 0.05%)</title><rect x="538.3" y="643.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="541.3" y="654.0"></text>
</g>
<g>
<title>oopFactory::new_symbolArray(int, Thread*) (3 samples, 0.03%)</title><rect x="538.9" y="675.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="541.9" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/DAOImpl.getTimestampRecord (1,701 samples, 15.34%)</title><rect x="540.0" y="835.0" width="181.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="543.0" y="846.0">ru/mail/polis/dao/manik..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,624 samples, 14.65%)</title><rect x="540.2" y="819.0" width="172.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="543.2" y="830.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,624 samples, 14.65%)</title><rect x="540.2" y="803.0" width="172.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="543.2" y="814.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (4 samples, 0.04%)</title><rect x="543.6" y="787.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="546.6" y="798.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (1,541 samples, 13.90%)</title><rect x="544.0" y="787.0" width="164.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="547.0" y="798.0">Java_org_rocksdb_Rock..</text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (11 samples, 0.10%)</title><rect x="545.6" y="771.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="548.6" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.04%)</title><rect x="546.8" y="771.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="549.8" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (16 samples, 0.14%)</title><rect x="547.2" y="771.0" width="1.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="550.2" y="782.0"></text>
</g>
<g>
<title>cfree (10 samples, 0.09%)</title><rect x="549.1" y="771.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="552.1" y="782.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (7 samples, 0.06%)</title><rect x="550.2" y="771.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="553.2" y="782.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.08%)</title><rect x="550.9" y="771.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="553.9" y="782.0"></text>
</g>
<g>
<title>operator delete[](void*) (6 samples, 0.05%)</title><rect x="552.0" y="771.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="555.0" y="782.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (8 samples, 0.07%)</title><rect x="552.6" y="771.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="555.6" y="782.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (9 samples, 0.08%)</title><rect x="553.5" y="771.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="556.5" y="782.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,430 samples, 12.90%)</title><rect x="554.6" y="771.0" width="152.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="557.6" y="782.0">rocksdb_get_helper(..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (8 samples, 0.07%)</title><rect x="555.9" y="755.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="558.9" y="766.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (6 samples, 0.05%)</title><rect x="556.8" y="755.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="559.8" y="766.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.03%)</title><rect x="557.4" y="755.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="560.4" y="766.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (26 samples, 0.23%)</title><rect x="558.0" y="755.0" width="2.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="561.0" y="766.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (13 samples, 0.12%)</title><rect x="559.3" y="739.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="562.3" y="750.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (29 samples, 0.26%)</title><rect x="560.7" y="755.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="563.7" y="766.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (6 samples, 0.05%)</title><rect x="562.0" y="739.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="565.0" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (10 samples, 0.09%)</title><rect x="562.6" y="739.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="565.6" y="750.0"></text>
</g>
<g>
<title>jni_NewByteArray (17 samples, 0.15%)</title><rect x="563.8" y="755.0" width="1.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="566.8" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.03%)</title><rect x="565.6" y="755.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="568.6" y="766.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (1,206 samples, 10.88%)</title><rect x="566.2" y="755.0" width="128.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="569.2" y="766.0">rocksdb::DB::Get..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (5 samples, 0.05%)</title><rect x="566.5" y="739.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="569.5" y="750.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (1,196 samples, 10.79%)</title><rect x="567.2" y="739.0" width="127.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="570.2" y="750.0">rocksdb::DB::Get..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1,184 samples, 10.68%)</title><rect x="568.3" y="723.0" width="126.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="571.3" y="734.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (1,181 samples, 10.65%)</title><rect x="568.4" y="707.0" width="125.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="571.4" y="718.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.03%)</title><rect x="568.6" y="691.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="571.6" y="702.0"></text>
</g>
<g>
<title>__tls_get_addr (9 samples, 0.08%)</title><rect x="568.9" y="691.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="571.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (4 samples, 0.04%)</title><rect x="570.0" y="691.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="573.0" y="702.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (5 samples, 0.05%)</title><rect x="570.5" y="691.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="573.5" y="702.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (6 samples, 0.05%)</title><rect x="571.1" y="691.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="574.1" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (1,129 samples, 10.18%)</title><rect x="571.9" y="691.0" width="120.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="574.9" y="702.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (9 samples, 0.08%)</title><rect x="576.8" y="675.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="579.8" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (27 samples, 0.24%)</title><rect x="577.8" y="675.0" width="2.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="580.8" y="686.0"></text>
</g>
<g>
<title>memcpy (6 samples, 0.05%)</title><rect x="580.8" y="675.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="583.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (43 samples, 0.39%)</title><rect x="581.7" y="675.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="584.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (4 samples, 0.04%)</title><rect x="582.9" y="659.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="585.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (8 samples, 0.07%)</title><rect x="583.5" y="659.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="586.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (15 samples, 0.14%)</title><rect x="584.4" y="659.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="587.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (4 samples, 0.04%)</title><rect x="585.5" y="643.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="588.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (3 samples, 0.03%)</title><rect x="586.0" y="659.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="589.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (3 samples, 0.03%)</title><rect x="586.0" y="643.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="589.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (4 samples, 0.04%)</title><rect x="586.3" y="675.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="589.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (34 samples, 0.31%)</title><rect x="586.7" y="675.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="589.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (30 samples, 0.27%)</title><rect x="586.7" y="659.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="589.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (22 samples, 0.20%)</title><rect x="587.5" y="643.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="590.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (4 samples, 0.04%)</title><rect x="589.9" y="659.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="592.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (3 samples, 0.03%)</title><rect x="590.3" y="675.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="593.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) (3 samples, 0.03%)</title><rect x="590.6" y="675.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="593.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (920 samples, 8.30%)</title><rect x="591.0" y="675.0" width="97.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="594.0" y="686.0">rocksdb::Me..</text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (17 samples, 0.15%)</title><rect x="593.0" y="659.0" width="1.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="596.0" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.03%)</title><rect x="594.8" y="659.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="597.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (877 samples, 7.91%)</title><rect x="595.2" y="659.0" width="93.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="598.2" y="670.0">rocksdb::Me..</text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (867 samples, 7.82%)</title><rect x="596.0" y="643.0" width="92.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="599.0" y="654.0">/tmp/libroc..</text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (26 samples, 0.23%)</title><rect x="596.2" y="627.0" width="2.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="599.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (594 samples, 5.36%)</title><rect x="598.9" y="627.0" width="63.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="601.9" y="638.0">rocksdb..</text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (57 samples, 0.51%)</title><rect x="633.6" y="611.0" width="6.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="636.6" y="622.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (6 samples, 0.05%)</title><rect x="639.7" y="611.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="642.7" y="622.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context [clone .plt] (6 samples, 0.05%)</title><rect x="640.3" y="611.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="643.3" y="622.0"></text>
</g>
<g>
<title>__tls_get_addr (17 samples, 0.15%)</title><rect x="641.0" y="611.0" width="1.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="644.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (177 samples, 1.60%)</title><rect x="643.2" y="611.0" width="18.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="646.2" y="622.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (20 samples, 0.18%)</title><rect x="649.6" y="595.0" width="2.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="652.6" y="606.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (79 samples, 0.71%)</title><rect x="651.7" y="595.0" width="8.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="654.7" y="606.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (4 samples, 0.04%)</title><rect x="660.1" y="595.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="663.1" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (9 samples, 0.08%)</title><rect x="660.6" y="595.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="663.6" y="606.0"></text>
</g>
<g>
<title>memcmp@plt (4 samples, 0.04%)</title><rect x="661.5" y="595.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="664.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (236 samples, 2.13%)</title><rect x="662.2" y="627.0" width="25.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="665.2" y="638.0">r..</text>
</g>
<g>
<title>apic_timer_interrupt (4 samples, 0.04%)</title><rect x="686.5" y="611.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="689.5" y="622.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (4 samples, 0.04%)</title><rect x="686.5" y="595.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="689.5" y="606.0"></text>
</g>
<g>
<title>irq_exit (4 samples, 0.04%)</title><rect x="686.5" y="579.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="689.5" y="590.0"></text>
</g>
<g>
<title>__softirqentry_text_start (4 samples, 0.04%)</title><rect x="686.5" y="563.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="689.5" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.03%)</title><rect x="686.9" y="611.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="689.9" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.03%)</title><rect x="686.9" y="595.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="689.9" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.03%)</title><rect x="686.9" y="579.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="689.9" y="590.0"></text>
</g>
<g>
<title>std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long) (7 samples, 0.06%)</title><rect x="687.4" y="627.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="690.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) (3 samples, 0.03%)</title><rect x="688.5" y="659.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="691.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::MergeContext::~MergeContext() (3 samples, 0.03%)</title><rect x="689.2" y="675.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="692.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (3 samples, 0.03%)</title><rect x="689.5" y="675.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="692.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (11 samples, 0.10%)</title><rect x="690.1" y="675.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="693.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (7 samples, 0.06%)</title><rect x="691.3" y="675.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="694.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (6 samples, 0.05%)</title><rect x="693.0" y="691.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="696.0" y="702.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (4 samples, 0.04%)</title><rect x="693.7" y="691.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="696.7" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.03%)</title><rect x="694.5" y="755.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="697.5" y="766.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (110 samples, 0.99%)</title><rect x="694.8" y="755.0" width="11.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="697.8" y="766.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (9 samples, 0.08%)</title><rect x="695.1" y="739.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="698.1" y="750.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (11 samples, 0.10%)</title><rect x="696.3" y="739.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="699.3" y="750.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (4 samples, 0.04%)</title><rect x="697.1" y="723.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="700.1" y="734.0"></text>
</g>
<g>
<title>jni_NewByteArray (76 samples, 0.69%)</title><rect x="697.5" y="739.0" width="8.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="700.5" y="750.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (9 samples, 0.08%)</title><rect x="698.9" y="723.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="701.9" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (17 samples, 0.15%)</title><rect x="699.8" y="723.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="702.8" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (36 samples, 0.32%)</title><rect x="701.7" y="723.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="704.7" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (30 samples, 0.27%)</title><rect x="702.4" y="707.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="705.4" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (17 samples, 0.15%)</title><rect x="702.5" y="691.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="705.5" y="702.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.04%)</title><rect x="703.0" y="675.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="706.0" y="686.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 0.04%)</title><rect x="703.8" y="675.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="706.8" y="686.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (10 samples, 0.09%)</title><rect x="704.3" y="691.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="707.3" y="702.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (8 samples, 0.07%)</title><rect x="705.6" y="739.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="708.6" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.03%)</title><rect x="705.7" y="723.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="708.7" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (3 samples, 0.03%)</title><rect x="706.0" y="723.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="709.0" y="734.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (10 samples, 0.09%)</title><rect x="706.7" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="709.7" y="782.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.12%)</title><rect x="708.0" y="787.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="711.0" y="798.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (6 samples, 0.05%)</title><rect x="708.0" y="771.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="711.0" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (4 samples, 0.04%)</title><rect x="708.7" y="771.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="711.7" y="782.0"></text>
</g>
<g>
<title>__libc_malloc (15 samples, 0.14%)</title><rect x="709.4" y="787.0" width="1.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="712.4" y="798.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (11 samples, 0.10%)</title><rect x="711.1" y="787.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="714.1" y="798.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (3 samples, 0.03%)</title><rect x="712.4" y="787.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="715.4" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/ByteConvertor.toUnsignedArray (17 samples, 0.15%)</title><rect x="713.0" y="819.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="716.0" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (7 samples, 0.06%)</title><rect x="713.7" y="803.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="716.7" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (7 samples, 0.06%)</title><rect x="713.7" y="787.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="716.7" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.04%)</title><rect x="714.4" y="803.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="717.4" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="714.4" y="787.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="717.4" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="714.4" y="771.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="717.4" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="714.5" y="755.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="717.5" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.fromBytes (58 samples, 0.52%)</title><rect x="714.8" y="819.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="717.8" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.05%)</title><rect x="716.6" y="803.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="719.6" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.05%)</title><rect x="716.6" y="787.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="719.6" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="716.9" y="771.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="719.9" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getLong (4 samples, 0.04%)</title><rect x="717.3" y="803.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="720.3" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (4 samples, 0.04%)</title><rect x="717.3" y="787.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="720.3" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.05%)</title><rect x="717.8" y="803.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="720.8" y="814.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (14 samples, 0.13%)</title><rect x="718.4" y="803.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="721.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord$RecordType.fromValue (4 samples, 0.04%)</title><rect x="719.9" y="803.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="722.9" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.&lt;init&gt; (6 samples, 0.05%)</title><rect x="720.4" y="803.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="723.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.toBytes (7 samples, 0.06%)</title><rect x="721.0" y="835.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="724.0" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (4 samples, 0.04%)</title><rect x="721.1" y="819.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="724.1" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="721.1" y="803.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="724.1" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.processResponses (3,170 samples, 28.59%)</title><rect x="721.7" y="867.0" width="337.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="724.7" y="878.0">ru/mail/polis/service/manikhin/ReplicasRequest..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (33 samples, 0.30%)</title><rect x="722.0" y="851.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="725.0" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (16 samples, 0.14%)</title><rect x="723.8" y="835.0" width="1.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="726.8" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.getValueAsBytes (11 samples, 0.10%)</title><rect x="725.5" y="851.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="728.5" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (7 samples, 0.06%)</title><rect x="725.7" y="835.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="728.7" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (7 samples, 0.06%)</title><rect x="725.7" y="819.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="728.7" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.05%)</title><rect x="725.8" y="803.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="728.8" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.merge (270 samples, 2.44%)</title><rect x="726.7" y="851.0" width="28.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="729.7" y="862.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.04%)</title><rect x="741.3" y="835.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="744.3" y="846.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (3 samples, 0.03%)</title><rect x="742.4" y="835.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="745.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (5 samples, 0.05%)</title><rect x="742.7" y="835.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="745.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (30 samples, 0.27%)</title><rect x="743.2" y="835.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="746.2" y="846.0"></text>
</g>
<g>
<title>java/util/function/BinaryOperator.maxBy (5 samples, 0.05%)</title><rect x="743.5" y="819.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="746.5" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (5 samples, 0.05%)</title><rect x="743.5" y="803.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="746.5" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (5 samples, 0.05%)</title><rect x="743.5" y="787.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="746.5" y="798.0"></text>
</g>
<g>
<title>java/util/function/BinaryOperator$$Lambda$72/422474917.get$Lambda (5 samples, 0.05%)</title><rect x="743.5" y="771.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="746.5" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (23 samples, 0.21%)</title><rect x="744.0" y="819.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="747.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (21 samples, 0.19%)</title><rect x="744.1" y="803.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="747.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.sourceSpliterator (3 samples, 0.03%)</title><rect x="744.3" y="787.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="747.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (16 samples, 0.14%)</title><rect x="744.6" y="787.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="747.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (12 samples, 0.11%)</title><rect x="744.6" y="771.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="747.6" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (9 samples, 0.08%)</title><rect x="744.6" y="755.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="747.6" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (7 samples, 0.06%)</title><rect x="744.6" y="739.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="747.6" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (7 samples, 0.06%)</title><rect x="744.6" y="723.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="747.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.accept (5 samples, 0.05%)</title><rect x="744.7" y="707.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="747.7" y="718.0"></text>
</g>
<g>
<title>java/util/function/BinaryOperator$$Lambda$72/422474917.apply (4 samples, 0.04%)</title><rect x="744.8" y="691.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="747.8" y="702.0"></text>
</g>
<g>
<title>java/util/function/BinaryOperator.lambda$maxBy$1 (4 samples, 0.04%)</title><rect x="744.8" y="675.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="747.8" y="686.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1609489402.compare (3 samples, 0.03%)</title><rect x="744.9" y="659.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="747.9" y="670.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparingLong$6043328a$1 (3 samples, 0.03%)</title><rect x="744.9" y="643.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="747.9" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (3 samples, 0.03%)</title><rect x="745.6" y="755.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="748.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.get (4 samples, 0.04%)</title><rect x="745.9" y="771.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="748.9" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.get (4 samples, 0.04%)</title><rect x="745.9" y="755.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="748.9" y="766.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.04%)</title><rect x="745.9" y="739.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="748.9" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (53 samples, 0.48%)</title><rect x="746.6" y="835.0" width="5.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="749.6" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.03%)</title><rect x="752.5" y="835.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="755.5" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (7 samples, 0.06%)</title><rect x="753.0" y="835.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="756.0" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.isValue (5 samples, 0.05%)</title><rect x="754.0" y="835.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="757.0" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.sendResponse (6 samples, 0.05%)</title><rect x="754.6" y="835.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="757.6" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.toBytes (14 samples, 0.13%)</title><rect x="755.5" y="851.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="758.5" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (14 samples, 0.13%)</title><rect x="755.5" y="835.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="758.5" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.13%)</title><rect x="755.5" y="819.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="758.5" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (8 samples, 0.07%)</title><rect x="756.1" y="803.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="759.1" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.sendResponse (2,839 samples, 25.60%)</title><rect x="757.0" y="851.0" width="302.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="760.0" y="862.0">ru/mail/polis/service/manikhin/ReplicasRe..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2,838 samples, 25.60%)</title><rect x="757.0" y="835.0" width="302.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="760.0" y="846.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (61 samples, 0.55%)</title><rect x="760.6" y="819.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="763.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (61 samples, 0.55%)</title><rect x="760.6" y="803.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="763.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (61 samples, 0.55%)</title><rect x="760.6" y="787.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="763.6" y="798.0"></text>
</g>
<g>
<title>gettimeofday (9 samples, 0.08%)</title><rect x="762.6" y="771.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="765.6" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (33 samples, 0.30%)</title><rect x="763.6" y="771.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="766.6" y="782.0"></text>
</g>
<g>
<title>gettimeofday (30 samples, 0.27%)</title><rect x="763.9" y="755.0" width="3.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="766.9" y="766.0"></text>
</g>
<g>
<title>[vdso] (29 samples, 0.26%)</title><rect x="764.0" y="739.0" width="3.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="767.0" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (2,712 samples, 24.46%)</title><rect x="767.1" y="819.0" width="288.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="770.1" y="830.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (95 samples, 0.86%)</title><rect x="767.4" y="803.0" width="10.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="770.4" y="814.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (65 samples, 0.59%)</title><rect x="770.6" y="787.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="773.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (65 samples, 0.59%)</title><rect x="770.6" y="771.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="773.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.charAt (65 samples, 0.59%)</title><rect x="770.6" y="755.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="773.6" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (30 samples, 0.27%)</title><rect x="774.3" y="739.0" width="3.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="777.3" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (2,614 samples, 23.58%)</title><rect x="777.5" y="803.0" width="278.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="780.5" y="814.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (2,614 samples, 23.58%)</title><rect x="777.5" y="787.0" width="278.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="780.5" y="798.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (2,612 samples, 23.56%)</title><rect x="777.7" y="771.0" width="278.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="780.7" y="782.0">one/nio/net/Session$ArrayQueueItem.wr..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (2,602 samples, 23.47%)</title><rect x="778.8" y="755.0" width="276.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="781.8" y="766.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (27 samples, 0.24%)</title><rect x="783.7" y="739.0" width="2.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="786.7" y="750.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (56 samples, 0.51%)</title><rect x="786.7" y="739.0" width="5.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="789.7" y="750.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (6 samples, 0.05%)</title><rect x="788.3" y="723.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="791.3" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (8 samples, 0.07%)</title><rect x="788.9" y="723.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="791.9" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (26 samples, 0.23%)</title><rect x="789.7" y="723.0" width="2.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="792.7" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (5 samples, 0.05%)</title><rect x="790.7" y="707.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="793.7" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (10 samples, 0.09%)</title><rect x="791.2" y="707.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="794.2" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.05%)</title><rect x="792.7" y="739.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="795.7" y="750.0"></text>
</g>
<g>
<title>send (2,466 samples, 22.24%)</title><rect x="793.3" y="739.0" width="262.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="796.3" y="750.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2,409 samples, 21.73%)</title><rect x="799.2" y="723.0" width="256.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="802.2" y="734.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (9 samples, 0.08%)</title><rect x="799.3" y="707.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="802.3" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (2,399 samples, 21.64%)</title><rect x="800.3" y="707.0" width="255.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="803.3" y="718.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (2,351 samples, 21.20%)</title><rect x="804.4" y="691.0" width="250.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="807.4" y="702.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (2,342 samples, 21.12%)</title><rect x="804.4" y="675.0" width="249.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="807.4" y="686.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (8 samples, 0.07%)</title><rect x="805.5" y="659.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="808.5" y="670.0"></text>
</g>
<g>
<title>sock_sendmsg (2,283 samples, 20.59%)</title><rect x="806.6" y="659.0" width="242.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="809.6" y="670.0">sock_sendmsg</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (6 samples, 0.05%)</title><rect x="807.0" y="643.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="810.0" y="654.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (4 samples, 0.04%)</title><rect x="807.6" y="643.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="810.6" y="654.0"></text>
</g>
<g>
<title>inet6_sendmsg (2,221 samples, 20.03%)</title><rect x="808.1" y="643.0" width="236.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="811.1" y="654.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (2,215 samples, 19.98%)</title><rect x="808.4" y="627.0" width="235.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="811.4" y="638.0">tcp_sendmsg</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (10 samples, 0.09%)</title><rect x="809.0" y="611.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="812.0" y="622.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (22 samples, 0.20%)</title><rect x="810.4" y="611.0" width="2.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="813.4" y="622.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (3 samples, 0.03%)</title><rect x="812.7" y="611.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="815.7" y="622.0"></text>
</g>
<g>
<title>release_sock (48 samples, 0.43%)</title><rect x="813.1" y="611.0" width="5.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="816.1" y="622.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (5 samples, 0.05%)</title><rect x="813.6" y="595.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="816.6" y="606.0"></text>
</g>
<g>
<title>__release_sock (34 samples, 0.31%)</title><rect x="814.1" y="595.0" width="3.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="817.1" y="606.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (31 samples, 0.28%)</title><rect x="814.4" y="579.0" width="3.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="817.4" y="590.0"></text>
</g>
<g>
<title>tcp_rcv_established (30 samples, 0.27%)</title><rect x="814.5" y="563.0" width="3.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="817.5" y="574.0"></text>
</g>
<g>
<title>__tcp_ack_snd_check (5 samples, 0.05%)</title><rect x="814.8" y="547.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="817.8" y="558.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (5 samples, 0.05%)</title><rect x="814.8" y="531.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="817.8" y="542.0"></text>
</g>
<g>
<title>sk_reset_timer (5 samples, 0.05%)</title><rect x="814.8" y="515.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="817.8" y="526.0"></text>
</g>
<g>
<title>mod_timer (5 samples, 0.05%)</title><rect x="814.8" y="499.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="817.8" y="510.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.04%)</title><rect x="814.8" y="483.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="817.8" y="494.0"></text>
</g>
<g>
<title>tcp_ack (17 samples, 0.15%)</title><rect x="815.3" y="547.0" width="1.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="818.3" y="558.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (10 samples, 0.09%)</title><rect x="815.8" y="531.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="818.8" y="542.0"></text>
</g>
<g>
<title>__kfree_skb (6 samples, 0.05%)</title><rect x="816.0" y="515.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="819.0" y="526.0"></text>
</g>
<g>
<title>skb_release_all (5 samples, 0.05%)</title><rect x="816.1" y="499.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="819.1" y="510.0"></text>
</g>
<g>
<title>skb_release_data (5 samples, 0.05%)</title><rect x="816.1" y="483.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="819.1" y="494.0"></text>
</g>
<g>
<title>tcp_data_ready (4 samples, 0.04%)</title><rect x="817.1" y="547.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="820.1" y="558.0"></text>
</g>
<g>
<title>sock_def_readable (4 samples, 0.04%)</title><rect x="817.1" y="531.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="820.1" y="542.0"></text>
</g>
<g>
<title>__wake_up_sync_key (4 samples, 0.04%)</title><rect x="817.1" y="515.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="820.1" y="526.0"></text>
</g>
<g>
<title>__wake_up_common_lock (4 samples, 0.04%)</title><rect x="817.1" y="499.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="820.1" y="510.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.04%)</title><rect x="817.1" y="483.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="820.1" y="494.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (3 samples, 0.03%)</title><rect x="817.7" y="595.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="820.7" y="606.0"></text>
</g>
<g>
<title>tcp_push (7 samples, 0.06%)</title><rect x="818.5" y="611.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="821.5" y="622.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (2,105 samples, 18.98%)</title><rect x="819.3" y="611.0" width="224.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="822.3" y="622.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (9 samples, 0.08%)</title><rect x="821.1" y="595.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="824.1" y="606.0"></text>
</g>
<g>
<title>__virt_addr_valid (7 samples, 0.06%)</title><rect x="821.4" y="579.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="824.4" y="590.0"></text>
</g>
<g>
<title>_copy_from_iter_full (22 samples, 0.20%)</title><rect x="822.2" y="595.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="825.2" y="606.0"></text>
</g>
<g>
<title>copy_user_generic_string (15 samples, 0.14%)</title><rect x="822.2" y="579.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="825.2" y="590.0"></text>
</g>
<g>
<title>iov_iter_advance (7 samples, 0.06%)</title><rect x="823.8" y="579.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="826.8" y="590.0"></text>
</g>
<g>
<title>check_stack_object (3 samples, 0.03%)</title><rect x="824.5" y="595.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="827.5" y="606.0"></text>
</g>
<g>
<title>sk_page_frag_refill (6 samples, 0.05%)</title><rect x="825.1" y="595.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="828.1" y="606.0"></text>
</g>
<g>
<title>skb_page_frag_refill (6 samples, 0.05%)</title><rect x="825.1" y="579.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="828.1" y="590.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (173 samples, 1.56%)</title><rect x="825.7" y="595.0" width="18.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="828.7" y="606.0"></text>
</g>
<g>
<title>__alloc_skb (171 samples, 1.54%)</title><rect x="825.8" y="579.0" width="18.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="828.8" y="590.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (82 samples, 0.74%)</title><rect x="827.7" y="563.0" width="8.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="830.7" y="574.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (44 samples, 0.40%)</title><rect x="827.7" y="547.0" width="4.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="830.7" y="558.0"></text>
</g>
<g>
<title>__slab_alloc (23 samples, 0.21%)</title><rect x="829.0" y="531.0" width="2.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="832.0" y="542.0"></text>
</g>
<g>
<title>kmalloc_slab (9 samples, 0.08%)</title><rect x="831.5" y="531.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="834.5" y="542.0"></text>
</g>
<g>
<title>memset (36 samples, 0.32%)</title><rect x="832.6" y="547.0" width="3.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="835.6" y="558.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (32 samples, 0.29%)</title><rect x="836.7" y="563.0" width="3.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="839.7" y="574.0"></text>
</g>
<g>
<title>__slab_alloc (7 samples, 0.06%)</title><rect x="839.0" y="547.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="842.0" y="558.0"></text>
</g>
<g>
<title>ksize (8 samples, 0.07%)</title><rect x="840.1" y="563.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="843.1" y="574.0"></text>
</g>
<g>
<title>__ksize (8 samples, 0.07%)</title><rect x="840.1" y="547.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="843.1" y="558.0"></text>
</g>
<g>
<title>memset (24 samples, 0.22%)</title><rect x="840.9" y="563.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="843.9" y="574.0"></text>
</g>
<g>
<title>should_failslab (5 samples, 0.05%)</title><rect x="843.5" y="563.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="846.5" y="574.0"></text>
</g>
<g>
<title>skb_entail (10 samples, 0.09%)</title><rect x="844.1" y="595.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="847.1" y="606.0"></text>
</g>
<g>
<title>tcp_push (1,830 samples, 16.50%)</title><rect x="845.3" y="595.0" width="194.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="848.3" y="606.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (1,830 samples, 16.50%)</title><rect x="845.3" y="579.0" width="194.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="848.3" y="590.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>ktime_get (5 samples, 0.05%)</title><rect x="845.3" y="563.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="848.3" y="574.0"></text>
</g>
<g>
<title>tcp_write_xmit (1,822 samples, 16.43%)</title><rect x="846.2" y="563.0" width="193.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="849.2" y="574.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (1,656 samples, 14.94%)</title><rect x="848.1" y="547.0" width="176.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="851.1" y="558.0">__tcp_transmit_skb</text>
</g>
<g>
<title>ip_queue_xmit (1,598 samples, 14.41%)</title><rect x="851.6" y="531.0" width="170.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="854.6" y="542.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (1,597 samples, 14.40%)</title><rect x="851.6" y="515.0" width="169.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="854.6" y="526.0">__ip_queue_xmit</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (16 samples, 0.14%)</title><rect x="852.9" y="499.0" width="1.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="855.9" y="510.0"></text>
</g>
<g>
<title>ip_local_out (1,565 samples, 14.11%)</title><rect x="854.6" y="499.0" width="166.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="857.6" y="510.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (6 samples, 0.05%)</title><rect x="854.8" y="483.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="857.8" y="494.0"></text>
</g>
<g>
<title>ip_output (1,557 samples, 14.04%)</title><rect x="855.4" y="483.0" width="165.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="858.4" y="494.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (1,553 samples, 14.01%)</title><rect x="855.8" y="467.0" width="165.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="858.8" y="478.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (10 samples, 0.09%)</title><rect x="856.2" y="451.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="859.2" y="462.0"></text>
</g>
<g>
<title>__ip_finish_output (1,529 samples, 13.79%)</title><rect x="857.2" y="451.0" width="162.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="860.2" y="462.0">__ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (1,520 samples, 13.71%)</title><rect x="858.2" y="435.0" width="161.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="861.2" y="446.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (1,346 samples, 12.14%)</title><rect x="860.9" y="419.0" width="143.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="863.9" y="430.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.0 (1,344 samples, 12.12%)</title><rect x="860.9" y="403.0" width="143.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="863.9" y="414.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (1,302 samples, 11.74%)</title><rect x="865.3" y="387.0" width="138.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="868.3" y="398.0">do_softirq_own_st..</text>
</g>
<g>
<title>__softirqentry_text_start (1,300 samples, 11.72%)</title><rect x="865.3" y="371.0" width="138.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="868.3" y="382.0">__softirqentry_te..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="871.1" y="355.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="874.1" y="366.0"></text>
</g>
<g>
<title>net_rx_action (1,239 samples, 11.17%)</title><rect x="871.4" y="355.0" width="131.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="874.4" y="366.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (3 samples, 0.03%)</title><rect x="872.4" y="339.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="875.4" y="350.0"></text>
</g>
<g>
<title>process_backlog (1,225 samples, 11.05%)</title><rect x="872.9" y="339.0" width="130.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="875.9" y="350.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (1,173 samples, 10.58%)</title><rect x="878.3" y="323.0" width="124.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="881.3" y="334.0">__netif_receive..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (1,167 samples, 10.52%)</title><rect x="878.9" y="307.0" width="124.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="881.9" y="318.0">__netif_receive..</text>
</g>
<g>
<title>__netif_receive_skb_core (13 samples, 0.12%)</title><rect x="879.6" y="291.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="882.6" y="302.0"></text>
</g>
<g>
<title>ip_rcv (1,148 samples, 10.35%)</title><rect x="881.0" y="291.0" width="122.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="884.0" y="302.0">ip_rcv</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.07%)</title><rect x="881.1" y="275.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="884.1" y="286.0"></text>
</g>
<g>
<title>ip_rcv_finish (1,135 samples, 10.24%)</title><rect x="882.2" y="275.0" width="120.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="885.2" y="286.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (1,130 samples, 10.19%)</title><rect x="882.4" y="259.0" width="120.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="885.4" y="270.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (1,130 samples, 10.19%)</title><rect x="882.4" y="243.0" width="120.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="885.4" y="254.0">ip_local_delive..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (1,128 samples, 10.17%)</title><rect x="882.5" y="227.0" width="120.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="885.5" y="238.0">ip_protocol_del..</text>
</g>
<g>
<title>_raw_spin_lock (8 samples, 0.07%)</title><rect x="883.2" y="211.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="886.2" y="222.0"></text>
</g>
<g>
<title>raw_local_deliver (4 samples, 0.04%)</title><rect x="884.0" y="211.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="887.0" y="222.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1,108 samples, 9.99%)</title><rect x="884.7" y="211.0" width="117.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="887.7" y="222.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (32 samples, 0.29%)</title><rect x="887.1" y="195.0" width="3.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="890.1" y="206.0"></text>
</g>
<g>
<title>inet_ehashfn (3 samples, 0.03%)</title><rect x="890.2" y="179.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="893.2" y="190.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.03%)</title><rect x="890.8" y="195.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="893.8" y="206.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (33 samples, 0.30%)</title><rect x="891.2" y="195.0" width="3.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="894.2" y="206.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (13 samples, 0.12%)</title><rect x="891.3" y="179.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="894.3" y="190.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (13 samples, 0.12%)</title><rect x="892.7" y="179.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="895.7" y="190.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (3 samples, 0.03%)</title><rect x="894.0" y="179.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="897.0" y="190.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (3 samples, 0.03%)</title><rect x="894.4" y="179.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="897.4" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (1,011 samples, 9.12%)</title><rect x="894.7" y="195.0" width="107.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="897.7" y="206.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_check_space (19 samples, 0.17%)</title><rect x="895.5" y="179.0" width="2.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="898.5" y="190.0"></text>
</g>
<g>
<title>tcp_rcv_established (982 samples, 8.86%)</title><rect x="897.8" y="179.0" width="104.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="900.8" y="190.0">tcp_rcv_esta..</text>
</g>
<g>
<title>__tcp_ack_snd_check (43 samples, 0.39%)</title><rect x="899.9" y="163.0" width="4.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="902.9" y="174.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (43 samples, 0.39%)</title><rect x="899.9" y="147.0" width="4.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="902.9" y="158.0"></text>
</g>
<g>
<title>sk_reset_timer (42 samples, 0.38%)</title><rect x="900.0" y="131.0" width="4.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="903.0" y="142.0"></text>
</g>
<g>
<title>mod_timer (39 samples, 0.35%)</title><rect x="900.3" y="115.0" width="4.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="903.3" y="126.0"></text>
</g>
<g>
<title>__lock_text_start (26 samples, 0.23%)</title><rect x="900.9" y="99.0" width="2.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="903.9" y="110.0"></text>
</g>
<g>
<title>lock_timer_base (8 samples, 0.07%)</title><rect x="903.6" y="99.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="906.6" y="110.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (6 samples, 0.05%)</title><rect x="903.8" y="83.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="906.8" y="94.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (23 samples, 0.21%)</title><rect x="904.5" y="163.0" width="2.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="907.5" y="174.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.03%)</title><rect x="907.1" y="163.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="910.1" y="174.0"></text>
</g>
<g>
<title>tcp_ack (153 samples, 1.38%)</title><rect x="907.6" y="163.0" width="16.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="910.6" y="174.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.07%)</title><rect x="910.4" y="147.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="913.4" y="158.0"></text>
</g>
<g>
<title>bictcp_acked (4 samples, 0.04%)</title><rect x="911.3" y="147.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="914.3" y="158.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (103 samples, 0.93%)</title><rect x="911.9" y="147.0" width="11.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="914.9" y="158.0"></text>
</g>
<g>
<title>__kfree_skb (77 samples, 0.69%)</title><rect x="913.4" y="131.0" width="8.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="916.4" y="142.0"></text>
</g>
<g>
<title>kfree_skbmem (16 samples, 0.14%)</title><rect x="913.4" y="115.0" width="1.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="916.4" y="126.0"></text>
</g>
<g>
<title>kmem_cache_free (16 samples, 0.14%)</title><rect x="913.4" y="99.0" width="1.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="916.4" y="110.0"></text>
</g>
<g>
<title>__slab_free (4 samples, 0.04%)</title><rect x="914.7" y="83.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="917.7" y="94.0"></text>
</g>
<g>
<title>skb_release_all (61 samples, 0.55%)</title><rect x="915.1" y="115.0" width="6.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="918.1" y="126.0"></text>
</g>
<g>
<title>skb_release_data (60 samples, 0.54%)</title><rect x="915.1" y="99.0" width="6.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="918.1" y="110.0"></text>
</g>
<g>
<title>skb_free_head (39 samples, 0.35%)</title><rect x="917.3" y="83.0" width="4.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="920.3" y="94.0"></text>
</g>
<g>
<title>kfree (39 samples, 0.35%)</title><rect x="917.3" y="67.0" width="4.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="920.3" y="78.0"></text>
</g>
<g>
<title>__slab_free (29 samples, 0.26%)</title><rect x="918.4" y="51.0" width="3.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="921.4" y="62.0"></text>
</g>
<g>
<title>put_cpu_partial (5 samples, 0.05%)</title><rect x="921.0" y="35.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="924.0" y="46.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (5 samples, 0.05%)</title><rect x="922.0" y="131.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="925.0" y="142.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (3 samples, 0.03%)</title><rect x="922.6" y="131.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="925.6" y="142.0"></text>
</g>
<g>
<title>tcp_data_ready (697 samples, 6.29%)</title><rect x="923.8" y="163.0" width="74.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="926.8" y="174.0">tcp_data..</text>
</g>
<g>
<title>sock_def_readable (697 samples, 6.29%)</title><rect x="923.8" y="147.0" width="74.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="926.8" y="158.0">sock_def..</text>
</g>
<g>
<title>__wake_up_sync_key (687 samples, 6.20%)</title><rect x="924.9" y="131.0" width="73.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="927.9" y="142.0">__wake_u..</text>
</g>
<g>
<title>__wake_up_common_lock (687 samples, 6.20%)</title><rect x="924.9" y="115.0" width="73.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="927.9" y="126.0">__wake_u..</text>
</g>
<g>
<title>__lock_text_start (679 samples, 6.12%)</title><rect x="924.9" y="99.0" width="72.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="927.9" y="110.0">__lock_t..</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (8 samples, 0.07%)</title><rect x="997.2" y="99.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1000.2" y="110.0"></text>
</g>
<g>
<title>tcp_event_data_recv (9 samples, 0.08%)</title><rect x="998.0" y="163.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1001.0" y="174.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (20 samples, 0.18%)</title><rect x="999.0" y="163.0" width="2.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1002.0" y="174.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (7 samples, 0.06%)</title><rect x="999.2" y="147.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1002.2" y="158.0"></text>
</g>
<g>
<title>read_tsc (10 samples, 0.09%)</title><rect x="1000.0" y="147.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1003.0" y="158.0"></text>
</g>
<g>
<title>tcp_newly_delivered (3 samples, 0.03%)</title><rect x="1001.1" y="163.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1004.1" y="174.0"></text>
</g>
<g>
<title>tcp_queue_rcv (4 samples, 0.04%)</title><rect x="1001.4" y="163.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1004.4" y="174.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (3 samples, 0.03%)</title><rect x="1002.3" y="195.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1005.3" y="206.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (3 samples, 0.03%)</title><rect x="1002.7" y="259.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1005.7" y="270.0"></text>
</g>
<g>
<title>process_backlog (4 samples, 0.04%)</title><rect x="1003.2" y="355.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1006.2" y="366.0"></text>
</g>
<g>
<title>dev_queue_xmit (142 samples, 1.28%)</title><rect x="1004.2" y="419.0" width="15.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1007.2" y="430.0"></text>
</g>
<g>
<title>__dev_queue_xmit (139 samples, 1.25%)</title><rect x="1004.3" y="403.0" width="14.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1007.3" y="414.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (11 samples, 0.10%)</title><rect x="1009.5" y="387.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1012.5" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (61 samples, 0.55%)</title><rect x="1010.7" y="387.0" width="6.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1013.7" y="398.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="1011.3" y="371.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1014.3" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (52 samples, 0.47%)</title><rect x="1011.6" y="371.0" width="5.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1014.6" y="382.0"></text>
</g>
<g>
<title>eth_type_trans (7 samples, 0.06%)</title><rect x="1012.2" y="355.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1015.2" y="366.0"></text>
</g>
<g>
<title>netif_rx (32 samples, 0.29%)</title><rect x="1012.9" y="355.0" width="3.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1015.9" y="366.0"></text>
</g>
<g>
<title>netif_rx_internal (28 samples, 0.25%)</title><rect x="1013.3" y="339.0" width="3.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1016.3" y="350.0"></text>
</g>
<g>
<title>enqueue_to_backlog (28 samples, 0.25%)</title><rect x="1013.3" y="323.0" width="3.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1016.3" y="334.0"></text>
</g>
<g>
<title>tcp_wfree (4 samples, 0.04%)</title><rect x="1016.7" y="355.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1019.7" y="366.0"></text>
</g>
<g>
<title>validate_xmit_skb (13 samples, 0.12%)</title><rect x="1017.7" y="387.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1020.7" y="398.0"></text>
</g>
<g>
<title>netif_skb_features (3 samples, 0.03%)</title><rect x="1018.7" y="371.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1021.7" y="382.0"></text>
</g>
<g>
<title>do_softirq.part.0 (6 samples, 0.05%)</title><rect x="1019.3" y="419.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1022.3" y="430.0"></text>
</g>
<g>
<title>ret_from_intr (5 samples, 0.05%)</title><rect x="1019.4" y="403.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1022.4" y="414.0"></text>
</g>
<g>
<title>do_IRQ (5 samples, 0.05%)</title><rect x="1019.4" y="387.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1022.4" y="398.0"></text>
</g>
<g>
<title>irq_exit (5 samples, 0.05%)</title><rect x="1019.4" y="371.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1022.4" y="382.0"></text>
</g>
<g>
<title>__softirqentry_text_start (5 samples, 0.05%)</title><rect x="1019.4" y="355.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1022.4" y="366.0"></text>
</g>
<g>
<title>net_rx_action (4 samples, 0.04%)</title><rect x="1019.5" y="339.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1022.5" y="350.0"></text>
</g>
<g>
<title>process_backlog (4 samples, 0.04%)</title><rect x="1019.5" y="323.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1022.5" y="334.0"></text>
</g>
<g>
<title>__netif_receive_skb (4 samples, 0.04%)</title><rect x="1019.5" y="307.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1022.5" y="318.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (4 samples, 0.04%)</title><rect x="1019.5" y="291.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1022.5" y="302.0"></text>
</g>
<g>
<title>ip_rcv (4 samples, 0.04%)</title><rect x="1019.5" y="275.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1022.5" y="286.0"></text>
</g>
<g>
<title>ip_rcv_finish (4 samples, 0.04%)</title><rect x="1019.5" y="259.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1022.5" y="270.0"></text>
</g>
<g>
<title>ip_local_deliver (3 samples, 0.03%)</title><rect x="1019.5" y="243.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1022.5" y="254.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (3 samples, 0.03%)</title><rect x="1019.5" y="227.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1022.5" y="238.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (3 samples, 0.03%)</title><rect x="1019.5" y="211.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1022.5" y="222.0"></text>
</g>
<g>
<title>tcp_v4_rcv (3 samples, 0.03%)</title><rect x="1019.5" y="195.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1022.5" y="206.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (3 samples, 0.03%)</title><rect x="1019.5" y="179.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1022.5" y="190.0"></text>
</g>
<g>
<title>tcp_rcv_established (3 samples, 0.03%)</title><rect x="1019.5" y="163.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1022.5" y="174.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (4 samples, 0.04%)</title><rect x="1019.9" y="451.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1022.9" y="462.0"></text>
</g>
<g>
<title>ipv4_mtu (5 samples, 0.05%)</title><rect x="1020.6" y="451.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1023.6" y="462.0"></text>
</g>
<g>
<title>skb_clone (16 samples, 0.14%)</title><rect x="1021.6" y="531.0" width="1.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1024.6" y="542.0"></text>
</g>
<g>
<title>__copy_skb_header (4 samples, 0.04%)</title><rect x="1021.6" y="515.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1024.6" y="526.0"></text>
</g>
<g>
<title>__skb_clone (12 samples, 0.11%)</title><rect x="1022.1" y="515.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1025.1" y="526.0"></text>
</g>
<g>
<title>__copy_skb_header (6 samples, 0.05%)</title><rect x="1022.7" y="499.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1025.7" y="510.0"></text>
</g>
<g>
<title>tcp_established_options (3 samples, 0.03%)</title><rect x="1023.3" y="531.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1026.3" y="542.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (3 samples, 0.03%)</title><rect x="1023.7" y="531.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1026.7" y="542.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (3 samples, 0.03%)</title><rect x="1024.0" y="531.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1027.0" y="542.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (67 samples, 0.60%)</title><rect x="1024.5" y="547.0" width="7.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1027.5" y="558.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.03%)</title><rect x="1032.0" y="547.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1035.0" y="558.0"></text>
</g>
<g>
<title>read_tsc (8 samples, 0.07%)</title><rect x="1032.3" y="547.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1035.3" y="558.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (46 samples, 0.41%)</title><rect x="1033.3" y="547.0" width="4.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1036.3" y="558.0"></text>
</g>
<g>
<title>tcp_rearm_rto (35 samples, 0.32%)</title><rect x="1034.5" y="531.0" width="3.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1037.5" y="542.0"></text>
</g>
<g>
<title>sk_reset_timer (33 samples, 0.30%)</title><rect x="1034.7" y="515.0" width="3.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1037.7" y="526.0"></text>
</g>
<g>
<title>mod_timer (32 samples, 0.29%)</title><rect x="1034.8" y="499.0" width="3.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1037.8" y="510.0"></text>
</g>
<g>
<title>__lock_text_start (25 samples, 0.23%)</title><rect x="1035.1" y="483.0" width="2.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1038.1" y="494.0"></text>
</g>
<g>
<title>lock_timer_base (4 samples, 0.04%)</title><rect x="1037.8" y="483.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1040.8" y="494.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (4 samples, 0.04%)</title><rect x="1037.8" y="467.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1040.8" y="478.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (7 samples, 0.06%)</title><rect x="1038.5" y="547.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1041.5" y="558.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.0 (3 samples, 0.03%)</title><rect x="1039.2" y="547.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1042.2" y="558.0"></text>
</g>
<g>
<title>tcp_v4_send_check (4 samples, 0.04%)</title><rect x="1039.6" y="547.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1042.6" y="558.0"></text>
</g>
<g>
<title>tcp_send_mss (29 samples, 0.26%)</title><rect x="1040.3" y="595.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1043.3" y="606.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (6 samples, 0.05%)</title><rect x="1040.7" y="579.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1043.7" y="590.0"></text>
</g>
<g>
<title>ipv4_mtu (6 samples, 0.05%)</title><rect x="1041.3" y="579.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1044.3" y="590.0"></text>
</g>
<g>
<title>tcp_current_mss (13 samples, 0.12%)</title><rect x="1042.0" y="579.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1045.0" y="590.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.03%)</title><rect x="1042.9" y="563.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1045.9" y="574.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (6 samples, 0.05%)</title><rect x="1043.4" y="611.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1046.4" y="622.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (3 samples, 0.03%)</title><rect x="1044.1" y="627.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1047.1" y="638.0"></text>
</g>
<g>
<title>security_socket_sendmsg (46 samples, 0.41%)</title><rect x="1044.6" y="643.0" width="4.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1047.6" y="654.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (42 samples, 0.38%)</title><rect x="1045.1" y="627.0" width="4.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1048.1" y="638.0"></text>
</g>
<g>
<title>aa_sk_perm (41 samples, 0.37%)</title><rect x="1045.2" y="611.0" width="4.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1048.2" y="622.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (32 samples, 0.29%)</title><rect x="1046.1" y="595.0" width="3.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1049.1" y="606.0"></text>
</g>
<g>
<title>aa_profile_af_perm (19 samples, 0.17%)</title><rect x="1047.5" y="579.0" width="2.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1050.5" y="590.0"></text>
</g>
<g>
<title>aa_apply_modes_to_perms (3 samples, 0.03%)</title><rect x="1049.0" y="563.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1052.0" y="574.0"></text>
</g>
<g>
<title>sockfd_lookup_light (39 samples, 0.35%)</title><rect x="1049.5" y="659.0" width="4.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1052.5" y="670.0"></text>
</g>
<g>
<title>__fdget (34 samples, 0.31%)</title><rect x="1049.6" y="643.0" width="3.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1052.6" y="654.0"></text>
</g>
<g>
<title>__fget_light (34 samples, 0.31%)</title><rect x="1049.6" y="627.0" width="3.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1052.6" y="638.0"></text>
</g>
<g>
<title>__fget (34 samples, 0.31%)</title><rect x="1049.6" y="611.0" width="3.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1052.6" y="622.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.04%)</title><rect x="1053.2" y="643.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1056.2" y="654.0"></text>
</g>
<g>
<title>import_single_range (6 samples, 0.05%)</title><rect x="1053.8" y="675.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1056.8" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (8 samples, 0.07%)</title><rect x="1054.7" y="691.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1057.7" y="702.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.04%)</title><rect x="1055.2" y="675.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1058.2" y="686.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.03%)</title><rect x="1055.3" y="659.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1058.3" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.03%)</title><rect x="1055.3" y="643.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1058.3" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (31 samples, 0.28%)</title><rect x="1055.7" y="819.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1058.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (26 samples, 0.23%)</title><rect x="1056.2" y="803.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1059.2" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (26 samples, 0.23%)</title><rect x="1056.2" y="787.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1059.2" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (15 samples, 0.14%)</title><rect x="1057.4" y="771.0" width="1.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1060.4" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.multiPut (7 samples, 0.06%)</title><rect x="1059.1" y="883.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1062.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (5 samples, 0.05%)</title><rect x="1059.3" y="867.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1062.3" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (5 samples, 0.05%)</title><rect x="1059.3" y="851.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1062.3" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.multiGet (5 samples, 0.05%)</title><rect x="1059.3" y="835.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1062.3" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Topology.getReplicas (72 samples, 0.65%)</title><rect x="1059.8" y="899.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1062.8" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (42 samples, 0.38%)</title><rect x="1059.8" y="883.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1062.8" y="894.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (27 samples, 0.24%)</title><rect x="1061.3" y="867.0" width="2.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1064.3" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.add (24 samples, 0.22%)</title><rect x="1064.3" y="883.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1067.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.put (24 samples, 0.22%)</title><rect x="1064.3" y="867.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1067.3" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (16 samples, 0.14%)</title><rect x="1065.2" y="851.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1068.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 0.04%)</title><rect x="1065.7" y="835.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1068.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (3 samples, 0.03%)</title><rect x="1066.1" y="835.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1069.1" y="846.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.04%)</title><rect x="1066.4" y="835.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1069.4" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.handleMultiRequest (6 samples, 0.05%)</title><rect x="1066.9" y="883.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1069.9" y="894.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (111 samples, 1.00%)</title><rect x="1067.5" y="931.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1070.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (111 samples, 1.00%)</title><rect x="1067.5" y="915.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1070.5" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (79 samples, 0.71%)</title><rect x="1067.5" y="899.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1070.5" y="910.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (27 samples, 0.24%)</title><rect x="1073.0" y="883.0" width="2.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1076.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (32 samples, 0.29%)</title><rect x="1075.9" y="899.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1078.9" y="910.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (32 samples, 0.29%)</title><rect x="1075.9" y="883.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1078.9" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (32 samples, 0.29%)</title><rect x="1075.9" y="867.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1078.9" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (71 samples, 0.64%)</title><rect x="1079.4" y="963.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1082.4" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (12 samples, 0.11%)</title><rect x="1079.9" y="947.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1082.9" y="958.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (11 samples, 0.10%)</title><rect x="1080.0" y="931.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1083.0" y="942.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (11 samples, 0.10%)</title><rect x="1080.0" y="915.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1083.0" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (11 samples, 0.10%)</title><rect x="1080.0" y="899.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1083.0" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="1080.7" y="883.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1083.7" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (47 samples, 0.42%)</title><rect x="1081.1" y="947.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1084.1" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (43 samples, 0.39%)</title><rect x="1081.6" y="931.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1084.6" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (8 samples, 0.07%)</title><rect x="1086.1" y="947.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1089.1" y="958.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (47 samples, 0.42%)</title><rect x="1087.0" y="963.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1090.0" y="974.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (20 samples, 0.18%)</title><rect x="1089.9" y="947.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1092.9" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (20 samples, 0.18%)</title><rect x="1089.9" y="931.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1092.9" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (114 samples, 1.03%)</title><rect x="1092.0" y="963.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1095.0" y="974.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (22 samples, 0.20%)</title><rect x="1093.1" y="947.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1096.1" y="958.0"></text>
</g>
<g>
<title>itable stub (28 samples, 0.25%)</title><rect x="1095.4" y="947.0" width="3.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1098.4" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (54 samples, 0.49%)</title><rect x="1098.4" y="947.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1101.4" y="958.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (3 samples, 0.03%)</title><rect x="1104.1" y="979.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1107.1" y="990.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (717 samples, 6.47%)</title><rect x="1104.4" y="979.0" width="76.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1107.4" y="990.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (706 samples, 6.37%)</title><rect x="1105.6" y="963.0" width="75.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1108.6" y="974.0">one/nio/..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (23 samples, 0.21%)</title><rect x="1108.9" y="947.0" width="2.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1111.9" y="958.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (67 samples, 0.60%)</title><rect x="1111.4" y="947.0" width="7.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1114.4" y="958.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (17 samples, 0.15%)</title><rect x="1111.9" y="931.0" width="1.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1114.9" y="942.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (7 samples, 0.06%)</title><rect x="1113.7" y="931.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.7" y="942.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (30 samples, 0.27%)</title><rect x="1114.9" y="931.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1117.9" y="942.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (5 samples, 0.05%)</title><rect x="1116.4" y="915.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.4" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (7 samples, 0.06%)</title><rect x="1116.9" y="915.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1119.9" y="926.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.04%)</title><rect x="1117.6" y="915.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1120.6" y="926.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.04%)</title><rect x="1118.1" y="931.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1121.1" y="942.0"></text>
</g>
<g>
<title>__recv (577 samples, 5.20%)</title><rect x="1118.5" y="947.0" width="61.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1121.5" y="958.0">__recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (518 samples, 4.67%)</title><rect x="1124.8" y="931.0" width="55.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1127.8" y="942.0">entry..</text>
</g>
<g>
<title>__x64_sys_recvfrom (3 samples, 0.03%)</title><rect x="1124.8" y="915.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1127.8" y="926.0"></text>
</g>
<g>
<title>do_syscall_64 (513 samples, 4.63%)</title><rect x="1125.3" y="915.0" width="54.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1128.3" y="926.0">do_sy..</text>
</g>
<g>
<title>__x64_sys_recvfrom (488 samples, 4.40%)</title><rect x="1128.0" y="899.0" width="51.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1131.0" y="910.0">__x64..</text>
</g>
<g>
<title>__sys_recvfrom (487 samples, 4.39%)</title><rect x="1128.0" y="883.0" width="51.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1131.0" y="894.0">__sys..</text>
</g>
<g>
<title>fput_many (3 samples, 0.03%)</title><rect x="1128.6" y="867.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1131.6" y="878.0"></text>
</g>
<g>
<title>sock_recvmsg (458 samples, 4.13%)</title><rect x="1128.9" y="867.0" width="48.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1131.9" y="878.0">sock..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (11 samples, 0.10%)</title><rect x="1129.3" y="851.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1132.3" y="862.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (4 samples, 0.04%)</title><rect x="1130.5" y="851.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1133.5" y="862.0"></text>
</g>
<g>
<title>inet6_recvmsg (371 samples, 3.35%)</title><rect x="1130.9" y="851.0" width="39.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1133.9" y="862.0">ine..</text>
</g>
<g>
<title>tcp_recvmsg (366 samples, 3.30%)</title><rect x="1131.5" y="835.0" width="38.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1134.5" y="846.0">tcp..</text>
</g>
<g>
<title>__kfree_skb (65 samples, 0.59%)</title><rect x="1134.1" y="819.0" width="6.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1137.1" y="830.0"></text>
</g>
<g>
<title>kfree_skbmem (6 samples, 0.05%)</title><rect x="1134.1" y="803.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1137.1" y="814.0"></text>
</g>
<g>
<title>skb_release_all (59 samples, 0.53%)</title><rect x="1134.8" y="803.0" width="6.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1137.8" y="814.0"></text>
</g>
<g>
<title>skb_release_data (19 samples, 0.17%)</title><rect x="1134.8" y="787.0" width="2.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1137.8" y="798.0"></text>
</g>
<g>
<title>skb_release_head_state (35 samples, 0.32%)</title><rect x="1136.8" y="787.0" width="3.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1139.8" y="798.0"></text>
</g>
<g>
<title>dst_release (34 samples, 0.31%)</title><rect x="1136.9" y="771.0" width="3.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1139.9" y="782.0"></text>
</g>
<g>
<title>sock_rfree (5 samples, 0.05%)</title><rect x="1140.5" y="787.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1143.5" y="798.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (35 samples, 0.32%)</title><rect x="1141.4" y="819.0" width="3.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1144.4" y="830.0"></text>
</g>
<g>
<title>lock_sock_nested (9 samples, 0.08%)</title><rect x="1145.1" y="819.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1148.1" y="830.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (8 samples, 0.07%)</title><rect x="1145.2" y="803.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1148.2" y="814.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (8 samples, 0.07%)</title><rect x="1145.2" y="787.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1148.2" y="798.0"></text>
</g>
<g>
<title>release_sock (6 samples, 0.05%)</title><rect x="1146.0" y="819.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1149.0" y="830.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (41 samples, 0.37%)</title><rect x="1146.7" y="819.0" width="4.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1149.7" y="830.0"></text>
</g>
<g>
<title>__skb_datagram_iter (39 samples, 0.35%)</title><rect x="1146.8" y="803.0" width="4.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1149.8" y="814.0"></text>
</g>
<g>
<title>simple_copy_to_iter (28 samples, 0.25%)</title><rect x="1148.0" y="787.0" width="2.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1151.0" y="798.0"></text>
</g>
<g>
<title>__check_object_size (3 samples, 0.03%)</title><rect x="1148.0" y="771.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1151.0" y="782.0"></text>
</g>
<g>
<title>_copy_to_iter (24 samples, 0.22%)</title><rect x="1148.3" y="771.0" width="2.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1151.3" y="782.0"></text>
</g>
<g>
<title>copy_user_generic_string (22 samples, 0.20%)</title><rect x="1148.5" y="755.0" width="2.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1151.5" y="766.0"></text>
</g>
<g>
<title>skb_release_all (3 samples, 0.03%)</title><rect x="1151.0" y="819.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1154.0" y="830.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (150 samples, 1.35%)</title><rect x="1151.4" y="819.0" width="15.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1154.4" y="830.0"></text>
</g>
<g>
<title>tcp_send_ack (140 samples, 1.26%)</title><rect x="1152.4" y="803.0" width="14.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1155.4" y="814.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (140 samples, 1.26%)</title><rect x="1152.4" y="787.0" width="14.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1155.4" y="798.0"></text>
</g>
<g>
<title>__alloc_skb (13 samples, 0.12%)</title><rect x="1152.4" y="771.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1155.4" y="782.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (8 samples, 0.07%)</title><rect x="1152.4" y="755.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1155.4" y="766.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (4 samples, 0.04%)</title><rect x="1152.4" y="739.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1155.4" y="750.0"></text>
</g>
<g>
<title>memset (4 samples, 0.04%)</title><rect x="1152.9" y="739.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1155.9" y="750.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (4 samples, 0.04%)</title><rect x="1153.3" y="755.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1156.3" y="766.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (127 samples, 1.15%)</title><rect x="1153.8" y="771.0" width="13.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1156.8" y="782.0"></text>
</g>
<g>
<title>ip_queue_xmit (121 samples, 1.09%)</title><rect x="1154.3" y="755.0" width="12.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1157.3" y="766.0"></text>
</g>
<g>
<title>__ip_queue_xmit (120 samples, 1.08%)</title><rect x="1154.3" y="739.0" width="12.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1157.3" y="750.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="1154.7" y="723.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1157.7" y="734.0"></text>
</g>
<g>
<title>ip_local_out (114 samples, 1.03%)</title><rect x="1155.0" y="723.0" width="12.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1158.0" y="734.0"></text>
</g>
<g>
<title>__ip_local_out (3 samples, 0.03%)</title><rect x="1155.0" y="707.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1158.0" y="718.0"></text>
</g>
<g>
<title>ip_output (111 samples, 1.00%)</title><rect x="1155.3" y="707.0" width="11.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1158.3" y="718.0"></text>
</g>
<g>
<title>ip_finish_output (109 samples, 0.98%)</title><rect x="1155.5" y="691.0" width="11.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1158.5" y="702.0"></text>
</g>
<g>
<title>__ip_finish_output (107 samples, 0.97%)</title><rect x="1155.6" y="675.0" width="11.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1158.6" y="686.0"></text>
</g>
<g>
<title>ip_finish_output2 (107 samples, 0.97%)</title><rect x="1155.6" y="659.0" width="11.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1158.6" y="670.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (90 samples, 0.81%)</title><rect x="1155.7" y="643.0" width="9.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1158.7" y="654.0"></text>
</g>
<g>
<title>do_softirq.part.0 (90 samples, 0.81%)</title><rect x="1155.7" y="627.0" width="9.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1158.7" y="638.0"></text>
</g>
<g>
<title>do_softirq_own_stack (82 samples, 0.74%)</title><rect x="1156.5" y="611.0" width="8.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1159.5" y="622.0"></text>
</g>
<g>
<title>__softirqentry_text_start (81 samples, 0.73%)</title><rect x="1156.5" y="595.0" width="8.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1159.5" y="606.0"></text>
</g>
<g>
<title>net_rx_action (74 samples, 0.67%)</title><rect x="1157.2" y="579.0" width="7.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1160.2" y="590.0"></text>
</g>
<g>
<title>process_backlog (72 samples, 0.65%)</title><rect x="1157.4" y="563.0" width="7.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1160.4" y="574.0"></text>
</g>
<g>
<title>__netif_receive_skb (69 samples, 0.62%)</title><rect x="1157.8" y="547.0" width="7.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1160.8" y="558.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (67 samples, 0.60%)</title><rect x="1158.0" y="531.0" width="7.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1161.0" y="542.0"></text>
</g>
<g>
<title>ip_rcv (61 samples, 0.55%)</title><rect x="1158.6" y="515.0" width="6.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1161.6" y="526.0"></text>
</g>
<g>
<title>ip_rcv_finish (59 samples, 0.53%)</title><rect x="1158.8" y="499.0" width="6.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1161.8" y="510.0"></text>
</g>
<g>
<title>ip_local_deliver (57 samples, 0.51%)</title><rect x="1158.9" y="483.0" width="6.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1161.9" y="494.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (57 samples, 0.51%)</title><rect x="1158.9" y="467.0" width="6.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1161.9" y="478.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (57 samples, 0.51%)</title><rect x="1158.9" y="451.0" width="6.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1161.9" y="462.0"></text>
</g>
<g>
<title>sock_put (3 samples, 0.03%)</title><rect x="1159.0" y="435.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1162.0" y="446.0"></text>
</g>
<g>
<title>tcp_v4_rcv (53 samples, 0.48%)</title><rect x="1159.4" y="435.0" width="5.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1162.4" y="446.0"></text>
</g>
<g>
<title>__inet_lookup_established (4 samples, 0.04%)</title><rect x="1159.6" y="419.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1162.6" y="430.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (5 samples, 0.05%)</title><rect x="1160.0" y="419.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1163.0" y="430.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (3 samples, 0.03%)</title><rect x="1160.0" y="403.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1163.0" y="414.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (42 samples, 0.38%)</title><rect x="1160.5" y="419.0" width="4.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1163.5" y="430.0"></text>
</g>
<g>
<title>tcp_rcv_established (41 samples, 0.37%)</title><rect x="1160.6" y="403.0" width="4.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1163.6" y="414.0"></text>
</g>
<g>
<title>__kfree_skb (10 samples, 0.09%)</title><rect x="1160.8" y="387.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1163.8" y="398.0"></text>
</g>
<g>
<title>skb_release_all (10 samples, 0.09%)</title><rect x="1160.8" y="371.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1163.8" y="382.0"></text>
</g>
<g>
<title>skb_release_data (7 samples, 0.06%)</title><rect x="1160.8" y="355.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1163.8" y="366.0"></text>
</g>
<g>
<title>skb_free_head (5 samples, 0.05%)</title><rect x="1161.1" y="339.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1164.1" y="350.0"></text>
</g>
<g>
<title>kfree (5 samples, 0.05%)</title><rect x="1161.1" y="323.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1164.1" y="334.0"></text>
</g>
<g>
<title>skb_release_head_state (3 samples, 0.03%)</title><rect x="1161.6" y="355.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1164.6" y="366.0"></text>
</g>
<g>
<title>dst_release (3 samples, 0.03%)</title><rect x="1161.6" y="339.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1164.6" y="350.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (5 samples, 0.05%)</title><rect x="1161.9" y="387.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1164.9" y="398.0"></text>
</g>
<g>
<title>tcp_ack (22 samples, 0.20%)</title><rect x="1162.5" y="387.0" width="2.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1165.5" y="398.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (15 samples, 0.14%)</title><rect x="1163.2" y="371.0" width="1.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1166.2" y="382.0"></text>
</g>
<g>
<title>__kfree_skb (9 samples, 0.08%)</title><rect x="1163.5" y="355.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1166.5" y="366.0"></text>
</g>
<g>
<title>kfree_skbmem (4 samples, 0.04%)</title><rect x="1163.5" y="339.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1166.5" y="350.0"></text>
</g>
<g>
<title>kmem_cache_free (4 samples, 0.04%)</title><rect x="1163.5" y="323.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1166.5" y="334.0"></text>
</g>
<g>
<title>__slab_free (4 samples, 0.04%)</title><rect x="1163.5" y="307.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1166.5" y="318.0"></text>
</g>
<g>
<title>skb_release_all (5 samples, 0.05%)</title><rect x="1163.9" y="339.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1166.9" y="350.0"></text>
</g>
<g>
<title>skb_release_data (4 samples, 0.04%)</title><rect x="1163.9" y="323.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1166.9" y="334.0"></text>
</g>
<g>
<title>dev_queue_xmit (16 samples, 0.14%)</title><rect x="1165.3" y="643.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1168.3" y="654.0"></text>
</g>
<g>
<title>__dev_queue_xmit (16 samples, 0.14%)</title><rect x="1165.3" y="627.0" width="1.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1168.3" y="638.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (8 samples, 0.07%)</title><rect x="1165.9" y="611.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1168.9" y="622.0"></text>
</g>
<g>
<title>loopback_xmit (4 samples, 0.04%)</title><rect x="1166.3" y="595.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1169.3" y="606.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (27 samples, 0.24%)</title><rect x="1167.4" y="819.0" width="2.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1170.4" y="830.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (24 samples, 0.22%)</title><rect x="1167.8" y="803.0" width="2.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1170.8" y="814.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (15 samples, 0.14%)</title><rect x="1168.1" y="787.0" width="1.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1171.1" y="798.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.04%)</title><rect x="1169.9" y="787.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1172.9" y="798.0"></text>
</g>
<g>
<title>security_socket_recvmsg (67 samples, 0.60%)</title><rect x="1170.4" y="851.0" width="7.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1173.4" y="862.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (56 samples, 0.51%)</title><rect x="1171.6" y="835.0" width="5.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1174.6" y="846.0"></text>
</g>
<g>
<title>aa_sk_perm (56 samples, 0.51%)</title><rect x="1171.6" y="819.0" width="5.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1174.6" y="830.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (45 samples, 0.41%)</title><rect x="1172.8" y="803.0" width="4.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1175.8" y="814.0"></text>
</g>
<g>
<title>aa_apply_modes_to_perms (3 samples, 0.03%)</title><rect x="1175.1" y="787.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1178.1" y="798.0"></text>
</g>
<g>
<title>aa_profile_af_perm (19 samples, 0.17%)</title><rect x="1175.5" y="787.0" width="2.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1178.5" y="798.0"></text>
</g>
<g>
<title>sockfd_lookup_light (20 samples, 0.18%)</title><rect x="1177.7" y="867.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1180.7" y="878.0"></text>
</g>
<g>
<title>__fdget (17 samples, 0.15%)</title><rect x="1177.8" y="851.0" width="1.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1180.8" y="862.0"></text>
</g>
<g>
<title>__fget_light (17 samples, 0.15%)</title><rect x="1177.8" y="835.0" width="1.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1180.8" y="846.0"></text>
</g>
<g>
<title>__fget (16 samples, 0.14%)</title><rect x="1177.9" y="819.0" width="1.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1180.9" y="830.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (7 samples, 0.06%)</title><rect x="1179.9" y="947.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1182.9" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (18 samples, 0.16%)</title><rect x="1181.0" y="1011.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.0" y="1022.0"></text>
</g>
<g>
<title>gettimeofday (16 samples, 0.14%)</title><rect x="1181.2" y="995.0" width="1.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1184.2" y="1006.0"></text>
</g>
<g>
<title>[vdso] (15 samples, 0.14%)</title><rect x="1181.3" y="979.0" width="1.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1184.3" y="990.0"></text>
</g>
<g>
<title>start_thread (67 samples, 0.60%)</title><rect x="1182.9" y="1027.0" width="7.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1185.9" y="1038.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (67 samples, 0.60%)</title><rect x="1182.9" y="1011.0" width="7.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1185.9" y="1022.0"></text>
</g>
<g>
<title>Thread::call_run() (67 samples, 0.60%)</title><rect x="1182.9" y="995.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="1006.0"></text>
</g>
<g>
<title>GangWorker::loop() (55 samples, 0.50%)</title><rect x="1183.0" y="979.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="990.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (51 samples, 0.46%)</title><rect x="1183.2" y="963.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (45 samples, 0.41%)</title><rect x="1183.2" y="947.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.2" y="958.0"></text>
</g>
<g>
<title>SpinPause (43 samples, 0.39%)</title><rect x="1183.4" y="931.0" width="4.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1186.4" y="942.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 0.03%)</title><rect x="1188.0" y="947.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.0" y="958.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (3 samples, 0.03%)</title><rect x="1188.0" y="931.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.0" y="942.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (3 samples, 0.03%)</title><rect x="1188.0" y="915.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.0" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.03%)</title><rect x="1188.3" y="947.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.3" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.03%)</title><rect x="1188.3" y="931.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.3" y="942.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (3 samples, 0.03%)</title><rect x="1188.3" y="915.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.3" y="926.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (3 samples, 0.03%)</title><rect x="1188.3" y="899.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.3" y="910.0"></text>
</g>
<g>
<title>VMThread::run() (8 samples, 0.07%)</title><rect x="1188.9" y="979.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.9" y="990.0"></text>
</g>
<g>
<title>VMThread::loop() (8 samples, 0.07%)</title><rect x="1188.9" y="963.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.9" y="974.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.0] (7 samples, 0.06%)</title><rect x="1189.0" y="947.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.0" y="958.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (7 samples, 0.06%)</title><rect x="1189.0" y="931.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.0" y="942.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (7 samples, 0.06%)</title><rect x="1189.0" y="915.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (7 samples, 0.06%)</title><rect x="1189.0" y="899.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (5 samples, 0.05%)</title><rect x="1189.3" y="883.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.3" y="894.0"></text>
</g>
<g>
<title>G1STWIsAliveClosure::do_object_b(oopDesc*) (3 samples, 0.03%)</title><rect x="1189.4" y="867.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.4" y="878.0"></text>
</g>
</g>
</svg>
