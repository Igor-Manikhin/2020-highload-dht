<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="405"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="405"> </text>
<g id="frames">
<g>
<title>all (53,299 samples, 100.00%)</title><rect x="10.0" y="371.0" width="1180.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="13.0" y="382.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (53,299 samples, 100.00%)</title><rect x="10.0" y="355.0" width="1180.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="366.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (576 samples, 1.08%)</title><rect x="10.0" y="339.0" width="12.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (576 samples, 1.08%)</title><rect x="10.0" y="323.0" width="12.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (52,723 samples, 98.92%)</title><rect x="22.8" y="339.0" width="1167.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="25.8" y="350.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (52,723 samples, 98.92%)</title><rect x="22.8" y="323.0" width="1167.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.8" y="334.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (52,723 samples, 98.92%)</title><rect x="22.8" y="307.0" width="1167.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="25.8" y="318.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (38,711 samples, 72.63%)</title><rect x="22.8" y="291.0" width="857.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.8" y="302.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (38,711 samples, 72.63%)</title><rect x="22.8" y="275.0" width="857.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.8" y="286.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (37,646 samples, 70.63%)</title><rect x="22.8" y="259.0" width="833.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.8" y="270.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (56 samples, 0.11%)</title><rect x="22.8" y="243.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.8" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (56 samples, 0.11%)</title><rect x="22.8" y="227.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.8" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (56 samples, 0.11%)</title><rect x="22.8" y="211.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="25.8" y="222.0"></text>
</g>
<g>
<title>java.lang.String (30 samples, 0.06%)</title><rect x="22.8" y="195.0" width="0.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="25.8" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (26 samples, 0.05%)</title><rect x="23.4" y="195.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.4" y="206.0"></text>
</g>
<g>
<title>byte[] (26 samples, 0.05%)</title><rect x="23.4" y="179.0" width="0.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="26.4" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (914 samples, 1.71%)</title><rect x="24.0" y="243.0" width="20.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.0" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (914 samples, 1.71%)</title><rect x="24.0" y="227.0" width="20.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="27.0" y="238.0"></text>
</g>
<g>
<title>java/lang/String.substring (914 samples, 1.71%)</title><rect x="24.0" y="211.0" width="20.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.0" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (914 samples, 1.71%)</title><rect x="24.0" y="195.0" width="20.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="27.0" y="206.0"></text>
</g>
<g>
<title>java.lang.String (414 samples, 0.78%)</title><rect x="24.0" y="179.0" width="9.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="27.0" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (500 samples, 0.94%)</title><rect x="33.2" y="179.0" width="11.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="36.2" y="190.0"></text>
</g>
<g>
<title>byte[] (500 samples, 0.94%)</title><rect x="33.2" y="163.0" width="11.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="36.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/AsyncServiceImpl.entity (36,676 samples, 68.81%)</title><rect x="44.2" y="243.0" width="812.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.2" y="254.0">ru/mail/polis/service/manikhin/AsyncServiceImpl.entity</text>
</g>
<g>
<title>java/lang/String.getBytes (372 samples, 0.70%)</title><rect x="44.2" y="227.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.2" y="238.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (372 samples, 0.70%)</title><rect x="44.2" y="211.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="47.2" y="222.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (372 samples, 0.70%)</title><rect x="44.2" y="195.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.2" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (372 samples, 0.70%)</title><rect x="44.2" y="179.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.2" y="190.0"></text>
</g>
<g>
<title>byte[] (372 samples, 0.70%)</title><rect x="44.2" y="163.0" width="8.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="47.2" y="174.0"></text>
</g>
<g>
<title>java/util/Collections.singleton (339 samples, 0.64%)</title><rect x="52.5" y="227.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.5" y="238.0"></text>
</g>
<g>
<title>java.util.Collections$SingletonSet (339 samples, 0.64%)</title><rect x="52.5" y="211.0" width="7.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="55.5" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (614 samples, 1.15%)</title><rect x="60.0" y="227.0" width="13.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="63.0" y="238.0"></text>
</g>
<g>
<title>java/lang/String.substring (614 samples, 1.15%)</title><rect x="60.0" y="211.0" width="13.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="63.0" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (614 samples, 1.15%)</title><rect x="60.0" y="195.0" width="13.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.0" y="206.0"></text>
</g>
<g>
<title>java.lang.String (303 samples, 0.57%)</title><rect x="60.0" y="179.0" width="6.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="63.0" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (311 samples, 0.58%)</title><rect x="66.7" y="179.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="69.7" y="190.0"></text>
</g>
<g>
<title>byte[] (311 samples, 0.58%)</title><rect x="66.7" y="163.0" width="6.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="69.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Replicas.replicaFactor (185 samples, 0.35%)</title><rect x="73.6" y="227.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Replicas.parser (185 samples, 0.35%)</title><rect x="73.6" y="211.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="76.6" y="222.0"></text>
</g>
<g>
<title>java/lang/String.split (171 samples, 0.32%)</title><rect x="73.6" y="195.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.6" y="206.0"></text>
</g>
<g>
<title>java/lang/String.split (171 samples, 0.32%)</title><rect x="73.6" y="179.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="76.6" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (19 samples, 0.04%)</title><rect x="73.6" y="163.0" width="0.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="76.6" y="174.0"></text>
</g>
<g>
<title>java/lang/String.substring (101 samples, 0.19%)</title><rect x="74.0" y="163.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.0" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (101 samples, 0.19%)</title><rect x="74.0" y="147.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.0" y="158.0"></text>
</g>
<g>
<title>java.lang.String (62 samples, 0.12%)</title><rect x="74.0" y="131.0" width="1.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="77.0" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (39 samples, 0.07%)</title><rect x="75.4" y="131.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.4" y="142.0"></text>
</g>
<g>
<title>byte[] (39 samples, 0.07%)</title><rect x="75.4" y="115.0" width="0.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="78.4" y="126.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (51 samples, 0.10%)</title><rect x="76.2" y="163.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.2" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (51 samples, 0.10%)</title><rect x="76.2" y="147.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="79.2" y="158.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (51 samples, 0.10%)</title><rect x="76.2" y="131.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.2" y="142.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (51 samples, 0.10%)</title><rect x="76.2" y="115.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.2" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (51 samples, 0.10%)</title><rect x="76.2" y="99.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.2" y="110.0"></text>
</g>
<g>
<title>java.lang.Object[] (51 samples, 0.10%)</title><rect x="76.2" y="83.0" width="1.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="79.2" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.service.manikhin.Replicas (14 samples, 0.03%)</title><rect x="77.3" y="195.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="80.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.handleMultiRequest (34,956 samples, 65.58%)</title><rect x="77.7" y="227.0" width="773.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="80.7" y="238.0">ru/mail/polis/service/manikhin/ReplicasRequests.handleMultiRequest</text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.multiPut (34,956 samples, 65.58%)</title><rect x="77.7" y="211.0" width="773.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.7" y="222.0">ru/mail/polis/service/manikhin/ReplicasRequests.multiPut</text>
</g>
<g>
<title>java.lang.String[] (52 samples, 0.10%)</title><rect x="77.7" y="195.0" width="1.1" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="80.7" y="206.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (414 samples, 0.78%)</title><rect x="78.8" y="195.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="81.8" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (414 samples, 0.78%)</title><rect x="78.8" y="179.0" width="9.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="81.8" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (414 samples, 0.78%)</title><rect x="78.8" y="163.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.8" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (414 samples, 0.78%)</title><rect x="78.8" y="147.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.8" y="158.0"></text>
</g>
<g>
<title>byte[] (414 samples, 0.78%)</title><rect x="78.8" y="131.0" width="9.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="81.8" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (103 samples, 0.19%)</title><rect x="88.0" y="195.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="91.0" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/841283083.invoke (103 samples, 0.19%)</title><rect x="88.0" y="179.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.0" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (103 samples, 0.19%)</title><rect x="88.0" y="163.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="91.0" y="174.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (32 samples, 0.06%)</title><rect x="88.0" y="147.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="91.0" y="158.0"></text>
</g>
<g>
<title>java.lang.String (32 samples, 0.06%)</title><rect x="88.0" y="131.0" width="0.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="91.0" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (71 samples, 0.13%)</title><rect x="88.7" y="147.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="91.7" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (71 samples, 0.13%)</title><rect x="88.7" y="131.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="91.7" y="142.0"></text>
</g>
<g>
<title>byte[] (71 samples, 0.13%)</title><rect x="88.7" y="115.0" width="1.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="91.7" y="126.0"></text>
</g>
<g>
<title>java/util/Collections$SingletonSet.iterator (475 samples, 0.89%)</title><rect x="90.3" y="195.0" width="10.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.3" y="206.0"></text>
</g>
<g>
<title>java/util/Collections.singletonIterator (475 samples, 0.89%)</title><rect x="90.3" y="179.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.3" y="190.0"></text>
</g>
<g>
<title>java.util.Collections$1 (475 samples, 0.89%)</title><rect x="90.3" y="163.0" width="10.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="93.3" y="174.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (49 samples, 0.09%)</title><rect x="100.8" y="195.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.8" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (39 samples, 0.07%)</title><rect x="100.8" y="179.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="103.8" y="190.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (39 samples, 0.07%)</title><rect x="100.8" y="163.0" width="0.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="103.8" y="174.0"></text>
</g>
<g>
<title>one.nio.http.Response (416 samples, 0.78%)</title><rect x="101.9" y="195.0" width="9.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="104.9" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.put (21,931 samples, 41.15%)</title><rect x="111.1" y="195.0" width="485.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="114.1" y="206.0">one/nio/http/HttpClient.put</text>
</g>
<g>
<title>byte[] (64 samples, 0.12%)</title><rect x="111.1" y="179.0" width="1.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="114.1" y="190.0"></text>
</g>
<g>
<title>java.lang.String (39 samples, 0.07%)</title><rect x="112.5" y="179.0" width="0.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="115.5" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (180 samples, 0.34%)</title><rect x="113.3" y="179.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="116.3" y="190.0"></text>
</g>
<g>
<title>one.nio.http.Request (70 samples, 0.13%)</title><rect x="113.3" y="163.0" width="1.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="116.3" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (110 samples, 0.21%)</title><rect x="114.9" y="163.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.9" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (110 samples, 0.21%)</title><rect x="114.9" y="147.0" width="2.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="117.9" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (21,648 samples, 40.62%)</title><rect x="117.3" y="179.0" width="479.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="120.3" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (21,648 samples, 40.62%)</title><rect x="117.3" y="163.0" width="479.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="120.3" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (111 samples, 0.21%)</title><rect x="117.3" y="147.0" width="2.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="120.3" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (19,415 samples, 36.43%)</title><rect x="119.8" y="147.0" width="429.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="122.8" y="158.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (11,274 samples, 21.15%)</title><rect x="119.8" y="131.0" width="249.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="122.8" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (8,141 samples, 15.27%)</title><rect x="369.4" y="131.0" width="180.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="372.4" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1,830 samples, 3.43%)</title><rect x="549.6" y="147.0" width="40.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="552.6" y="158.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (97 samples, 0.18%)</title><rect x="549.8" y="131.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="552.8" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (97 samples, 0.18%)</title><rect x="549.8" y="115.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="552.8" y="126.0"></text>
</g>
<g>
<title>java.lang.String (62 samples, 0.12%)</title><rect x="549.8" y="99.0" width="1.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="552.8" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (35 samples, 0.07%)</title><rect x="551.2" y="99.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="554.2" y="110.0"></text>
</g>
<g>
<title>byte[] (35 samples, 0.07%)</title><rect x="551.2" y="83.0" width="0.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="554.2" y="94.0"></text>
</g>
<g>
<title>one.nio.http.Response (32 samples, 0.06%)</title><rect x="552.0" y="131.0" width="0.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="555.0" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (1,604 samples, 3.01%)</title><rect x="552.7" y="131.0" width="35.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="555.7" y="142.0">one..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,604 samples, 3.01%)</title><rect x="552.7" y="115.0" width="35.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="555.7" y="126.0">one..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,604 samples, 3.01%)</title><rect x="552.7" y="99.0" width="35.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="555.7" y="110.0">one..</text>
</g>
<g>
<title>char[] (1,266 samples, 2.38%)</title><rect x="552.7" y="83.0" width="28.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="555.7" y="94.0">ch..</text>
</g>
<g>
<title>java.lang.String (137 samples, 0.26%)</title><rect x="580.7" y="83.0" width="3.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="583.7" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (201 samples, 0.38%)</title><rect x="583.8" y="83.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="586.8" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (201 samples, 0.38%)</title><rect x="583.8" y="67.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="586.8" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (201 samples, 0.38%)</title><rect x="583.8" y="51.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="586.8" y="62.0"></text>
</g>
<g>
<title>byte[] (201 samples, 0.38%)</title><rect x="583.8" y="35.0" width="4.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="586.8" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (43 samples, 0.08%)</title><rect x="588.2" y="131.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="591.2" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (43 samples, 0.08%)</title><rect x="588.2" y="115.0" width="1.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="591.2" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (44 samples, 0.08%)</title><rect x="589.2" y="131.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="592.2" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (44 samples, 0.08%)</title><rect x="589.2" y="115.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="592.2" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (44 samples, 0.08%)</title><rect x="589.2" y="99.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="592.2" y="110.0"></text>
</g>
<g>
<title>java.lang.String (29 samples, 0.05%)</title><rect x="589.2" y="83.0" width="0.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="592.2" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (15 samples, 0.03%)</title><rect x="589.8" y="83.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="592.8" y="94.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.03%)</title><rect x="589.8" y="67.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="592.8" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (214 samples, 0.40%)</title><rect x="590.1" y="147.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="593.1" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (214 samples, 0.40%)</title><rect x="590.1" y="131.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="593.1" y="142.0"></text>
</g>
<g>
<title>byte[] (214 samples, 0.40%)</title><rect x="590.1" y="115.0" width="4.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="593.1" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (41 samples, 0.08%)</title><rect x="594.9" y="147.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="597.9" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (41 samples, 0.08%)</title><rect x="594.9" y="131.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="597.9" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (41 samples, 0.08%)</title><rect x="594.9" y="115.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="597.9" y="126.0"></text>
</g>
<g>
<title>java.lang.String (13 samples, 0.02%)</title><rect x="594.9" y="99.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="597.9" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (28 samples, 0.05%)</title><rect x="595.2" y="99.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="598.2" y="110.0"></text>
</g>
<g>
<title>byte[] (28 samples, 0.05%)</title><rect x="595.2" y="83.0" width="0.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="598.2" y="94.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (37 samples, 0.07%)</title><rect x="595.8" y="147.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="598.8" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (37 samples, 0.07%)</title><rect x="595.8" y="131.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="598.8" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (37 samples, 0.07%)</title><rect x="595.8" y="115.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="598.8" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (37 samples, 0.07%)</title><rect x="595.8" y="99.0" width="0.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="598.8" y="110.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (713 samples, 1.34%)</title><rect x="596.6" y="195.0" width="15.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="599.6" y="206.0"></text>
</g>
<g>
<title>java/lang/String.substring (713 samples, 1.34%)</title><rect x="596.6" y="179.0" width="15.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="599.6" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (713 samples, 1.34%)</title><rect x="596.6" y="163.0" width="15.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="599.6" y="174.0"></text>
</g>
<g>
<title>java.lang.String (364 samples, 0.68%)</title><rect x="596.6" y="147.0" width="8.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="599.6" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (349 samples, 0.65%)</title><rect x="604.7" y="147.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="607.7" y="158.0"></text>
</g>
<g>
<title>byte[] (349 samples, 0.65%)</title><rect x="604.7" y="131.0" width="7.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="607.7" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (929 samples, 1.74%)</title><rect x="612.4" y="195.0" width="20.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="615.4" y="206.0"></text>
</g>
<g>
<title>java/lang/String.substring (929 samples, 1.74%)</title><rect x="612.4" y="179.0" width="20.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="615.4" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (929 samples, 1.74%)</title><rect x="612.4" y="163.0" width="20.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="615.4" y="174.0"></text>
</g>
<g>
<title>java.lang.String (466 samples, 0.87%)</title><rect x="612.4" y="147.0" width="10.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="615.4" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (463 samples, 0.87%)</title><rect x="622.7" y="147.0" width="10.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="625.7" y="158.0"></text>
</g>
<g>
<title>byte[] (463 samples, 0.87%)</title><rect x="622.7" y="131.0" width="10.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="625.7" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1,751 samples, 3.29%)</title><rect x="633.0" y="195.0" width="38.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="636.0" y="206.0">one..</text>
</g>
<g>
<title>byte[] (774 samples, 1.45%)</title><rect x="633.0" y="179.0" width="17.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="636.0" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (484 samples, 0.91%)</title><rect x="650.1" y="179.0" width="10.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="653.1" y="190.0"></text>
</g>
<g>
<title>java.lang.String (493 samples, 0.92%)</title><rect x="660.8" y="179.0" width="10.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="663.8" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.putTimestamp (4,641 samples, 8.71%)</title><rect x="671.7" y="195.0" width="102.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="674.7" y="206.0">ru/mail/poli..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (824 samples, 1.55%)</title><rect x="671.7" y="179.0" width="18.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="674.7" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (824 samples, 1.55%)</title><rect x="671.7" y="163.0" width="18.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="674.7" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (824 samples, 1.55%)</title><rect x="671.7" y="147.0" width="18.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="674.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/DAOImpl.upsertTimestampRecord (3,817 samples, 7.16%)</title><rect x="690.0" y="179.0" width="84.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="693.0" y="190.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/ByteConvertor.toUnsignedArray (1,283 samples, 2.41%)</title><rect x="690.0" y="163.0" width="28.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="693.0" y="174.0">ru..</text>
</g>
<g>
<title>byte[] (407 samples, 0.76%)</title><rect x="690.0" y="147.0" width="9.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="693.0" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (876 samples, 1.64%)</title><rect x="699.0" y="147.0" width="19.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="702.0" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (876 samples, 1.64%)</title><rect x="699.0" y="131.0" width="19.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="702.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.toBytes (2,534 samples, 4.75%)</title><rect x="718.4" y="163.0" width="56.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="721.4" y="174.0">ru/mai..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,530 samples, 2.87%)</title><rect x="718.4" y="147.0" width="33.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="721.4" y="158.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (937 samples, 1.76%)</title><rect x="718.4" y="131.0" width="20.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="721.4" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (593 samples, 1.11%)</title><rect x="739.1" y="131.0" width="13.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="742.1" y="142.0"></text>
</g>
<g>
<title>byte[] (593 samples, 1.11%)</title><rect x="739.1" y="115.0" width="13.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="742.1" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1,004 samples, 1.88%)</title><rect x="752.2" y="147.0" width="22.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="755.2" y="158.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,004 samples, 1.88%)</title><rect x="752.2" y="131.0" width="22.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="755.2" y="142.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.sendResponse (3,482 samples, 6.53%)</title><rect x="774.5" y="195.0" width="77.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="777.5" y="206.0">ru/mail/p..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3,482 samples, 6.53%)</title><rect x="774.5" y="179.0" width="77.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="777.5" y="190.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (2,579 samples, 4.84%)</title><rect x="774.5" y="163.0" width="57.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="777.5" y="174.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1,826 samples, 3.43%)</title><rect x="774.5" y="147.0" width="40.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="777.5" y="158.0">one..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,826 samples, 3.43%)</title><rect x="774.5" y="131.0" width="40.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="777.5" y="142.0">one..</text>
</g>
<g>
<title>byte[] (1,826 samples, 3.43%)</title><rect x="774.5" y="115.0" width="40.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="777.5" y="126.0">byt..</text>
</g>
<g>
<title>one/nio/net/Session.write (753 samples, 1.41%)</title><rect x="814.9" y="147.0" width="16.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="817.9" y="158.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (753 samples, 1.41%)</title><rect x="814.9" y="131.0" width="16.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="817.9" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (903 samples, 1.69%)</title><rect x="831.6" y="163.0" width="20.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="834.6" y="174.0"></text>
</g>
<g>
<title>java/lang/String.substring (903 samples, 1.69%)</title><rect x="831.6" y="147.0" width="20.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="834.6" y="158.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (903 samples, 1.69%)</title><rect x="831.6" y="131.0" width="20.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="834.6" y="142.0"></text>
</g>
<g>
<title>java.lang.String (413 samples, 0.77%)</title><rect x="831.6" y="115.0" width="9.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="834.6" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (490 samples, 0.92%)</title><rect x="840.7" y="115.0" width="10.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="843.7" y="126.0"></text>
</g>
<g>
<title>byte[] (490 samples, 0.92%)</title><rect x="840.7" y="99.0" width="10.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="843.7" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Topology.getReplicas (210 samples, 0.39%)</title><rect x="851.6" y="227.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="854.6" y="238.0"></text>
</g>
<g>
<title>java.util.HashSet (49 samples, 0.09%)</title><rect x="851.6" y="211.0" width="1.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="854.6" y="222.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (33 samples, 0.06%)</title><rect x="852.6" y="211.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="855.6" y="222.0"></text>
</g>
<g>
<title>java.util.HashMap (33 samples, 0.06%)</title><rect x="852.6" y="195.0" width="0.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="855.6" y="206.0"></text>
</g>
<g>
<title>java/util/HashSet.add (128 samples, 0.24%)</title><rect x="853.4" y="211.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="856.4" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.put (128 samples, 0.24%)</title><rect x="853.4" y="195.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="856.4" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (128 samples, 0.24%)</title><rect x="853.4" y="179.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="856.4" y="190.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (73 samples, 0.14%)</title><rect x="853.4" y="163.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="856.4" y="174.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (73 samples, 0.14%)</title><rect x="853.4" y="147.0" width="1.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="856.4" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (55 samples, 0.10%)</title><rect x="855.0" y="163.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="858.0" y="174.0"></text>
</g>
<g>
<title>java.util.HashMap$Node[] (55 samples, 0.10%)</title><rect x="855.0" y="147.0" width="1.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="858.0" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1,065 samples, 2.00%)</title><rect x="856.2" y="259.0" width="23.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="859.2" y="270.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (1,065 samples, 2.00%)</title><rect x="856.2" y="243.0" width="23.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="859.2" y="254.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,065 samples, 2.00%)</title><rect x="856.2" y="227.0" width="23.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="859.2" y="238.0">j..</text>
</g>
<g>
<title>java.lang.String (432 samples, 0.81%)</title><rect x="856.2" y="211.0" width="9.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="859.2" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (633 samples, 1.19%)</title><rect x="865.8" y="211.0" width="14.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="868.8" y="222.0"></text>
</g>
<g>
<title>byte[] (633 samples, 1.19%)</title><rect x="865.8" y="195.0" width="14.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="868.8" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4,614 samples, 8.66%)</title><rect x="879.8" y="291.0" width="102.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="882.8" y="302.0">one/nio/http..</text>
</g>
<g>
<title>one.nio.http.Request (736 samples, 1.38%)</title><rect x="879.8" y="275.0" width="16.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="882.8" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,434 samples, 2.69%)</title><rect x="896.1" y="275.0" width="31.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="899.1" y="286.0">on..</text>
</g>
<g>
<title>java.lang.String[] (1,434 samples, 2.69%)</title><rect x="896.1" y="259.0" width="31.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="899.1" y="270.0">ja..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,444 samples, 4.59%)</title><rect x="927.8" y="275.0" width="54.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="930.8" y="286.0">one/n..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,444 samples, 4.59%)</title><rect x="927.8" y="259.0" width="54.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="930.8" y="270.0">one/n..</text>
</g>
<g>
<title>char[] (1,367 samples, 2.56%)</title><rect x="927.8" y="243.0" width="30.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="930.8" y="254.0">ch..</text>
</g>
<g>
<title>java.lang.String (378 samples, 0.71%)</title><rect x="958.1" y="243.0" width="8.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="961.1" y="254.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (699 samples, 1.31%)</title><rect x="966.5" y="243.0" width="15.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="969.5" y="254.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (699 samples, 1.31%)</title><rect x="966.5" y="227.0" width="15.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="969.5" y="238.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (699 samples, 1.31%)</title><rect x="966.5" y="211.0" width="15.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="969.5" y="222.0"></text>
</g>
<g>
<title>byte[] (699 samples, 1.31%)</title><rect x="966.5" y="195.0" width="15.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="969.5" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (522 samples, 0.98%)</title><rect x="981.9" y="291.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="984.9" y="302.0"></text>
</g>
<g>
<title>byte[] (522 samples, 0.98%)</title><rect x="981.9" y="275.0" width="11.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="984.9" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (937 samples, 1.76%)</title><rect x="993.5" y="291.0" width="20.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="996.5" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (937 samples, 1.76%)</title><rect x="993.5" y="275.0" width="20.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="996.5" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (937 samples, 1.76%)</title><rect x="993.5" y="259.0" width="20.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="996.5" y="270.0"></text>
</g>
<g>
<title>java.lang.String (431 samples, 0.81%)</title><rect x="993.5" y="243.0" width="9.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="996.5" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (506 samples, 0.95%)</title><rect x="1003.0" y="243.0" width="11.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1006.0" y="254.0"></text>
</g>
<g>
<title>byte[] (506 samples, 0.95%)</title><rect x="1003.0" y="227.0" width="11.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1006.0" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7,939 samples, 14.90%)</title><rect x="1014.2" y="291.0" width="175.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1017.2" y="302.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (7,939 samples, 14.90%)</title><rect x="1014.2" y="275.0" width="175.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1017.2" y="286.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (3,817 samples, 7.16%)</title><rect x="1014.2" y="259.0" width="84.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1017.2" y="270.0">char[]</text>
</g>
<g>
<title>java.lang.String (1,579 samples, 2.96%)</title><rect x="1098.7" y="259.0" width="35.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1101.7" y="270.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,543 samples, 4.77%)</title><rect x="1133.7" y="259.0" width="56.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1136.7" y="270.0">java/l..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,543 samples, 4.77%)</title><rect x="1133.7" y="243.0" width="56.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1136.7" y="254.0">java/l..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,543 samples, 4.77%)</title><rect x="1133.7" y="227.0" width="56.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1136.7" y="238.0">java/l..</text>
</g>
<g>
<title>byte[] (2,543 samples, 4.77%)</title><rect x="1133.7" y="211.0" width="56.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1136.7" y="222.0">byte[]</text>
</g>
</g>
</svg>
