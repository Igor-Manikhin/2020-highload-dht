<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1077"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1077"> </text>
<g id="frames">
<g>
<title>all (10,645 samples, 100.00%)</title><rect x="10.0" y="1043.0" width="1180.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="13.0" y="1054.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.03%)</title><rect x="10.0" y="1027.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.03%)</title><rect x="10.0" y="1011.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.03%)</title><rect x="10.0" y="995.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.03%)</title><rect x="10.0" y="979.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>[not_walkable_Java] (8 samples, 0.08%)</title><rect x="10.3" y="1027.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="13.3" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.07%)</title><rect x="10.4" y="1011.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.4" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (7 samples, 0.07%)</title><rect x="10.4" y="995.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.4" y="1006.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="11.2" y="1027.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="14.2" y="1038.0"></text>
</g>
<g>
<title>[unknown_Java] (5 samples, 0.05%)</title><rect x="11.8" y="1027.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="14.8" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.03%)</title><rect x="11.9" y="1011.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.9" y="1022.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.04%)</title><rect x="12.4" y="1027.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="15.4" y="1038.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.04%)</title><rect x="12.4" y="1011.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="15.4" y="1022.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.04%)</title><rect x="12.4" y="995.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="15.4" y="1006.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (10,566 samples, 99.26%)</title><rect x="12.9" y="1027.0" width="1171.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="15.9" y="1038.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (568 samples, 5.34%)</title><rect x="16.2" y="1011.0" width="63.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="19.2" y="1022.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (549 samples, 5.16%)</title><rect x="18.3" y="995.0" width="60.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.3" y="1006.0">one/ni..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (29 samples, 0.27%)</title><rect x="23.4" y="979.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="26.4" y="990.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (5 samples, 0.05%)</title><rect x="26.6" y="979.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="29.6" y="990.0"></text>
</g>
<g>
<title>clock_gettime (70 samples, 0.66%)</title><rect x="27.3" y="979.0" width="7.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="30.3" y="990.0"></text>
</g>
<g>
<title>clock_gettime (24 samples, 0.23%)</title><rect x="32.3" y="963.0" width="2.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="35.3" y="974.0"></text>
</g>
<g>
<title>[vdso] (20 samples, 0.19%)</title><rect x="32.7" y="947.0" width="2.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="35.7" y="958.0"></text>
</g>
<g>
<title>epoll_wait (398 samples, 3.74%)</title><rect x="35.1" y="979.0" width="44.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="38.1" y="990.0">epol..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (283 samples, 2.66%)</title><rect x="47.8" y="963.0" width="31.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="50.8" y="974.0">en..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (5 samples, 0.05%)</title><rect x="47.8" y="947.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="50.8" y="958.0"></text>
</g>
<g>
<title>do_syscall_64 (278 samples, 2.61%)</title><rect x="48.4" y="947.0" width="30.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="51.4" y="958.0">do..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (258 samples, 2.42%)</title><rect x="50.6" y="931.0" width="28.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="53.6" y="942.0">__..</text>
</g>
<g>
<title>do_epoll_wait (257 samples, 2.41%)</title><rect x="50.7" y="915.0" width="28.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="53.7" y="926.0">do..</text>
</g>
<g>
<title>__fdget (10 samples, 0.09%)</title><rect x="51.2" y="899.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="54.2" y="910.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.09%)</title><rect x="51.2" y="883.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="54.2" y="894.0"></text>
</g>
<g>
<title>__fget (10 samples, 0.09%)</title><rect x="51.2" y="867.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="54.2" y="878.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.04%)</title><rect x="52.3" y="899.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="55.3" y="910.0"></text>
</g>
<g>
<title>ep_poll (234 samples, 2.20%)</title><rect x="52.8" y="899.0" width="25.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="55.8" y="910.0">e..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (6 samples, 0.06%)</title><rect x="54.9" y="883.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="57.9" y="894.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (148 samples, 1.39%)</title><rect x="55.6" y="883.0" width="16.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="58.6" y="894.0"></text>
</g>
<g>
<title>ep_send_events_proc (83 samples, 0.78%)</title><rect x="60.8" y="867.0" width="9.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="63.8" y="878.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (20 samples, 0.19%)</title><rect x="61.8" y="851.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="64.8" y="862.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (52 samples, 0.49%)</title><rect x="64.0" y="851.0" width="5.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="67.0" y="862.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="65.0" y="835.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="68.0" y="846.0"></text>
</g>
<g>
<title>sock_poll (36 samples, 0.34%)</title><rect x="65.3" y="835.0" width="4.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="68.3" y="846.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (11 samples, 0.10%)</title><rect x="66.8" y="819.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="69.8" y="830.0"></text>
</g>
<g>
<title>tcp_poll (8 samples, 0.08%)</title><rect x="68.0" y="819.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="71.0" y="830.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (4 samples, 0.04%)</title><rect x="68.9" y="819.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="71.9" y="830.0"></text>
</g>
<g>
<title>tcp_poll (4 samples, 0.04%)</title><rect x="69.3" y="835.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="72.3" y="846.0"></text>
</g>
<g>
<title>mutex_lock (18 samples, 0.17%)</title><rect x="70.0" y="867.0" width="2.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="73.0" y="878.0"></text>
</g>
<g>
<title>ep_send_events_proc (3 samples, 0.03%)</title><rect x="72.0" y="883.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="75.0" y="894.0"></text>
</g>
<g>
<title>mutex_unlock (8 samples, 0.08%)</title><rect x="72.3" y="883.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="75.3" y="894.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (50 samples, 0.47%)</title><rect x="73.2" y="883.0" width="5.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="76.2" y="894.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (50 samples, 0.47%)</title><rect x="73.2" y="867.0" width="5.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="76.2" y="878.0"></text>
</g>
<g>
<title>schedule (49 samples, 0.46%)</title><rect x="73.3" y="851.0" width="5.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="76.3" y="862.0"></text>
</g>
<g>
<title>__sched_text_start (49 samples, 0.46%)</title><rect x="73.3" y="835.0" width="5.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="76.3" y="846.0"></text>
</g>
<g>
<title>finish_task_switch (43 samples, 0.40%)</title><rect x="74.0" y="819.0" width="4.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="77.0" y="830.0"></text>
</g>
<g>
<title>apic_timer_interrupt (3 samples, 0.03%)</title><rect x="78.4" y="803.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="81.4" y="814.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (3 samples, 0.03%)</title><rect x="78.4" y="787.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="81.4" y="798.0"></text>
</g>
<g>
<title>irq_exit (3 samples, 0.03%)</title><rect x="78.4" y="771.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="81.4" y="782.0"></text>
</g>
<g>
<title>__softirqentry_text_start (3 samples, 0.03%)</title><rect x="78.4" y="755.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="81.4" y="766.0"></text>
</g>
<g>
<title>fput_many (4 samples, 0.04%)</title><rect x="78.7" y="899.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="81.7" y="910.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (9,953 samples, 93.50%)</title><rect x="79.2" y="1011.0" width="1103.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="82.2" y="1022.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (9,909 samples, 93.09%)</title><rect x="83.8" y="995.0" width="1098.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="86.8" y="1006.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (9,233 samples, 86.74%)</title><rect x="84.0" y="979.0" width="1023.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.0" y="990.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (8,922 samples, 83.81%)</title><rect x="91.3" y="963.0" width="989.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="94.3" y="974.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (8,922 samples, 83.81%)</title><rect x="91.3" y="947.0" width="989.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.3" y="958.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (8,836 samples, 83.01%)</title><rect x="91.6" y="931.0" width="979.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.6" y="942.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (41 samples, 0.39%)</title><rect x="91.8" y="915.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.8" y="926.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10 samples, 0.09%)</title><rect x="94.4" y="899.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="97.4" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (10 samples, 0.09%)</title><rect x="94.4" y="883.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="97.4" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="95.6" y="899.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="98.6" y="910.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.03%)</title><rect x="96.0" y="899.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="99.0" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (103 samples, 0.97%)</title><rect x="96.4" y="915.0" width="11.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.4" y="926.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (103 samples, 0.97%)</title><rect x="96.4" y="899.0" width="11.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="99.4" y="910.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (17 samples, 0.16%)</title><rect x="100.9" y="883.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="103.9" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (17 samples, 0.16%)</title><rect x="100.9" y="867.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.9" y="878.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.06%)</title><rect x="102.8" y="883.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.8" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.06%)</title><rect x="102.8" y="867.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.8" y="878.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.04%)</title><rect x="103.0" y="851.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.0" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (19 samples, 0.18%)</title><rect x="103.7" y="883.0" width="2.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="106.7" y="894.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (18 samples, 0.17%)</title><rect x="105.8" y="883.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="108.8" y="894.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10 samples, 0.09%)</title><rect x="106.7" y="867.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="109.7" y="878.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10 samples, 0.09%)</title><rect x="106.7" y="851.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="109.7" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (10 samples, 0.09%)</title><rect x="106.7" y="835.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="109.7" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/AsyncServiceImpl.entity (8,690 samples, 81.63%)</title><rect x="107.8" y="915.0" width="963.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="110.8" y="926.0">ru/mail/polis/service/manikhin/AsyncServiceImpl.entity</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (41 samples, 0.39%)</title><rect x="111.3" y="899.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="114.3" y="910.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (26 samples, 0.24%)</title><rect x="112.6" y="883.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.6" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (26 samples, 0.24%)</title><rect x="112.6" y="867.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="115.6" y="878.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="115.5" y="883.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="118.5" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="115.5" y="867.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="118.5" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="115.5" y="851.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="118.5" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Replicas.replicaFactor (53 samples, 0.50%)</title><rect x="115.9" y="899.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="118.9" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Replicas.parser (53 samples, 0.50%)</title><rect x="115.9" y="883.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="118.9" y="894.0"></text>
</g>
<g>
<title>java/lang/String.split (53 samples, 0.50%)</title><rect x="115.9" y="867.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="118.9" y="878.0"></text>
</g>
<g>
<title>java/lang/String.split (53 samples, 0.50%)</title><rect x="115.9" y="851.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="118.9" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (21 samples, 0.20%)</title><rect x="117.6" y="835.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="120.6" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (21 samples, 0.20%)</title><rect x="117.6" y="819.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="120.6" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (10 samples, 0.09%)</title><rect x="120.0" y="835.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="123.0" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (10 samples, 0.09%)</title><rect x="120.0" y="819.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="123.0" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (10 samples, 0.09%)</title><rect x="120.0" y="803.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="123.0" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (10 samples, 0.09%)</title><rect x="120.0" y="787.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="123.0" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.09%)</title><rect x="120.0" y="771.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="123.0" y="782.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_array_post_entry(HeapWord*, unsigned long) (3 samples, 0.03%)</title><rect x="120.3" y="755.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="123.3" y="766.0"></text>
</g>
<g>
<title>checkcast_arraycopy (4 samples, 0.04%)</title><rect x="120.6" y="755.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="123.6" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.06%)</title><rect x="121.1" y="835.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="124.1" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.handleMultiRequest (8,495 samples, 79.80%)</title><rect x="121.7" y="899.0" width="941.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="124.7" y="910.0">ru/mail/polis/service/manikhin/ReplicasRequests.handleMultiRequest</text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.multiGet (8,487 samples, 79.73%)</title><rect x="122.0" y="883.0" width="940.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="125.0" y="894.0">ru/mail/polis/service/manikhin/ReplicasRequests.multiGet</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (7 samples, 0.07%)</title><rect x="123.6" y="867.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.6" y="878.0"></text>
</g>
<g>
<title>java/util/AbstractList.&lt;init&gt; (5 samples, 0.05%)</title><rect x="123.8" y="851.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="126.8" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (14 samples, 0.13%)</title><rect x="125.1" y="867.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="128.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (13 samples, 0.12%)</title><rect x="125.2" y="851.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (10 samples, 0.09%)</title><rect x="126.6" y="867.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (6 samples, 0.06%)</title><rect x="126.6" y="851.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="129.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (6 samples, 0.06%)</title><rect x="126.6" y="835.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="129.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (6 samples, 0.06%)</title><rect x="126.6" y="819.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="129.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (4 samples, 0.04%)</title><rect x="127.3" y="851.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="130.3" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.get (3,185 samples, 29.92%)</title><rect x="127.7" y="867.0" width="353.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="130.7" y="878.0">one/nio/http/HttpClient.get</text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (25 samples, 0.23%)</title><rect x="127.8" y="851.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="130.8" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (9 samples, 0.08%)</title><rect x="129.6" y="835.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.6" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (9 samples, 0.08%)</title><rect x="129.6" y="819.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="132.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (9 samples, 0.08%)</title><rect x="129.6" y="803.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="132.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (9 samples, 0.08%)</title><rect x="129.6" y="787.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="132.6" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3,158 samples, 29.67%)</title><rect x="130.6" y="851.0" width="350.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="133.6" y="862.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3,156 samples, 29.65%)</title><rect x="130.8" y="835.0" width="349.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="133.8" y="846.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (24 samples, 0.23%)</title><rect x="159.1" y="819.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="162.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (24 samples, 0.23%)</title><rect x="159.1" y="803.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="162.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (24 samples, 0.23%)</title><rect x="159.1" y="787.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="162.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (23 samples, 0.22%)</title><rect x="159.2" y="771.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="162.2" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (22 samples, 0.21%)</title><rect x="159.3" y="755.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="162.3" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (593 samples, 5.57%)</title><rect x="161.8" y="819.0" width="65.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="164.8" y="830.0">one/nio..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (28 samples, 0.26%)</title><rect x="162.3" y="803.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="165.3" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (24 samples, 0.23%)</title><rect x="162.8" y="787.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="165.8" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (23 samples, 0.22%)</title><rect x="162.9" y="771.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="165.9" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (22 samples, 0.21%)</title><rect x="162.9" y="755.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="165.9" y="766.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (7 samples, 0.07%)</title><rect x="163.0" y="739.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="166.0" y="750.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (14 samples, 0.13%)</title><rect x="163.7" y="739.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="166.7" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (3 samples, 0.03%)</title><rect x="163.9" y="723.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="166.9" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (3 samples, 0.03%)</title><rect x="163.9" y="707.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="166.9" y="718.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (3 samples, 0.03%)</title><rect x="163.9" y="691.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="166.9" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (3 samples, 0.03%)</title><rect x="163.9" y="675.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="166.9" y="686.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (3 samples, 0.03%)</title><rect x="163.9" y="659.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="166.9" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (10 samples, 0.09%)</title><rect x="164.2" y="723.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="167.2" y="734.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (4 samples, 0.04%)</title><rect x="164.4" y="707.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="167.4" y="718.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (3 samples, 0.03%)</title><rect x="165.0" y="707.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="168.0" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (560 samples, 5.26%)</title><rect x="165.4" y="803.0" width="62.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="168.4" y="814.0">one/ni..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (10 samples, 0.09%)</title><rect x="167.5" y="787.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="170.5" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (39 samples, 0.37%)</title><rect x="168.6" y="787.0" width="4.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="171.6" y="798.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (8 samples, 0.08%)</title><rect x="169.7" y="771.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="172.7" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (18 samples, 0.17%)</title><rect x="171.0" y="771.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="174.0" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (11 samples, 0.10%)</title><rect x="171.6" y="755.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="174.6" y="766.0"></text>
</g>
<g>
<title>__recv (482 samples, 4.53%)</title><rect x="173.2" y="787.0" width="53.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="176.2" y="798.0">__recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (427 samples, 4.01%)</title><rect x="179.3" y="771.0" width="47.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="182.3" y="782.0">entr..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (4 samples, 0.04%)</title><rect x="179.5" y="755.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="182.5" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (421 samples, 3.95%)</title><rect x="179.9" y="755.0" width="46.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="182.9" y="766.0">do_s..</text>
</g>
<g>
<title>__x64_sys_recvfrom (384 samples, 3.61%)</title><rect x="184.0" y="739.0" width="42.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="187.0" y="750.0">__x6..</text>
</g>
<g>
<title>__sys_recvfrom (382 samples, 3.59%)</title><rect x="184.0" y="723.0" width="42.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="187.0" y="734.0">__sy..</text>
</g>
<g>
<title>fput_many (5 samples, 0.05%)</title><rect x="185.0" y="707.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="188.0" y="718.0"></text>
</g>
<g>
<title>sock_recvmsg (356 samples, 3.34%)</title><rect x="185.7" y="707.0" width="39.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="188.7" y="718.0">soc..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (5 samples, 0.05%)</title><rect x="186.4" y="691.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="189.4" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (4 samples, 0.04%)</title><rect x="186.9" y="691.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="189.9" y="702.0"></text>
</g>
<g>
<title>inet6_recvmsg (309 samples, 2.90%)</title><rect x="187.4" y="691.0" width="34.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="190.4" y="702.0">in..</text>
</g>
<g>
<title>tcp_recvmsg (302 samples, 2.84%)</title><rect x="188.1" y="675.0" width="33.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="191.1" y="686.0">tc..</text>
</g>
<g>
<title>__kfree_skb (59 samples, 0.55%)</title><rect x="191.7" y="659.0" width="6.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="194.7" y="670.0"></text>
</g>
<g>
<title>kfree_skbmem (9 samples, 0.08%)</title><rect x="191.7" y="643.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="194.7" y="654.0"></text>
</g>
<g>
<title>skb_release_all (50 samples, 0.47%)</title><rect x="192.7" y="643.0" width="5.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="195.7" y="654.0"></text>
</g>
<g>
<title>skb_release_data (14 samples, 0.13%)</title><rect x="192.9" y="627.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="195.9" y="638.0"></text>
</g>
<g>
<title>skb_release_head_state (26 samples, 0.24%)</title><rect x="194.5" y="627.0" width="2.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="197.5" y="638.0"></text>
</g>
<g>
<title>dst_release (23 samples, 0.22%)</title><rect x="194.8" y="611.0" width="2.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="197.8" y="622.0"></text>
</g>
<g>
<title>sock_rfree (8 samples, 0.08%)</title><rect x="197.3" y="627.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="200.3" y="638.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (20 samples, 0.19%)</title><rect x="198.3" y="659.0" width="2.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="201.3" y="670.0"></text>
</g>
<g>
<title>release_sock (7 samples, 0.07%)</title><rect x="200.9" y="659.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="203.9" y="670.0"></text>
</g>
<g>
<title>tcp_release_cb (4 samples, 0.04%)</title><rect x="201.2" y="643.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="204.2" y="654.0"></text>
</g>
<g>
<title>sk_wait_data (71 samples, 0.67%)</title><rect x="201.7" y="659.0" width="7.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="204.7" y="670.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="201.7" y="643.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="204.7" y="654.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (9 samples, 0.08%)</title><rect x="202.0" y="643.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="205.0" y="654.0"></text>
</g>
<g>
<title>lock_sock_nested (8 samples, 0.08%)</title><rect x="203.1" y="643.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="206.1" y="654.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (7 samples, 0.07%)</title><rect x="203.2" y="627.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="206.2" y="638.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (7 samples, 0.07%)</title><rect x="203.2" y="611.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="206.2" y="622.0"></text>
</g>
<g>
<title>remove_wait_queue (4 samples, 0.04%)</title><rect x="204.1" y="643.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="207.1" y="654.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (4 samples, 0.04%)</title><rect x="204.1" y="627.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="207.1" y="638.0"></text>
</g>
<g>
<title>wait_woken (44 samples, 0.41%)</title><rect x="204.7" y="643.0" width="4.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="207.7" y="654.0"></text>
</g>
<g>
<title>schedule_timeout (37 samples, 0.35%)</title><rect x="205.4" y="627.0" width="4.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="208.4" y="638.0"></text>
</g>
<g>
<title>__mod_timer (11 samples, 0.10%)</title><rect x="205.4" y="611.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="208.4" y="622.0"></text>
</g>
<g>
<title>__lock_text_start (10 samples, 0.09%)</title><rect x="205.4" y="595.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="208.4" y="606.0"></text>
</g>
<g>
<title>schedule (24 samples, 0.23%)</title><rect x="206.9" y="611.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="209.9" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (23 samples, 0.22%)</title><rect x="207.0" y="595.0" width="2.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="210.0" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (19 samples, 0.18%)</title><rect x="207.4" y="579.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="210.4" y="590.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (28 samples, 0.26%)</title><rect x="209.5" y="659.0" width="3.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="212.5" y="670.0"></text>
</g>
<g>
<title>__skb_datagram_iter (28 samples, 0.26%)</title><rect x="209.5" y="643.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="212.5" y="654.0"></text>
</g>
<g>
<title>simple_copy_to_iter (24 samples, 0.23%)</title><rect x="210.0" y="627.0" width="2.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="213.0" y="638.0"></text>
</g>
<g>
<title>__check_object_size (10 samples, 0.09%)</title><rect x="210.0" y="611.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="213.0" y="622.0"></text>
</g>
<g>
<title>__virt_addr_valid (4 samples, 0.04%)</title><rect x="210.6" y="595.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="213.6" y="606.0"></text>
</g>
<g>
<title>_copy_to_iter (12 samples, 0.11%)</title><rect x="211.1" y="611.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="214.1" y="622.0"></text>
</g>
<g>
<title>copy_user_generic_string (9 samples, 0.08%)</title><rect x="211.4" y="595.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="214.4" y="606.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (63 samples, 0.59%)</title><rect x="212.6" y="659.0" width="7.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="215.6" y="670.0"></text>
</g>
<g>
<title>tcp_send_ack (46 samples, 0.43%)</title><rect x="214.5" y="643.0" width="5.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="217.5" y="654.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (46 samples, 0.43%)</title><rect x="214.5" y="627.0" width="5.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="217.5" y="638.0"></text>
</g>
<g>
<title>__alloc_skb (9 samples, 0.08%)</title><rect x="214.5" y="611.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="217.5" y="622.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (3 samples, 0.03%)</title><rect x="214.6" y="595.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="217.6" y="606.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (3 samples, 0.03%)</title><rect x="215.0" y="595.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="218.0" y="606.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (37 samples, 0.35%)</title><rect x="215.5" y="611.0" width="4.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="218.5" y="622.0"></text>
</g>
<g>
<title>ip_queue_xmit (34 samples, 0.32%)</title><rect x="215.8" y="595.0" width="3.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="218.8" y="606.0"></text>
</g>
<g>
<title>__ip_queue_xmit (34 samples, 0.32%)</title><rect x="215.8" y="579.0" width="3.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="218.8" y="590.0"></text>
</g>
<g>
<title>ip_local_out (34 samples, 0.32%)</title><rect x="215.8" y="563.0" width="3.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="218.8" y="574.0"></text>
</g>
<g>
<title>ip_output (34 samples, 0.32%)</title><rect x="215.8" y="547.0" width="3.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="218.8" y="558.0"></text>
</g>
<g>
<title>ip_finish_output (33 samples, 0.31%)</title><rect x="216.0" y="531.0" width="3.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="219.0" y="542.0"></text>
</g>
<g>
<title>__ip_finish_output (32 samples, 0.30%)</title><rect x="216.0" y="515.0" width="3.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="219.0" y="526.0"></text>
</g>
<g>
<title>ip_finish_output2 (30 samples, 0.28%)</title><rect x="216.1" y="499.0" width="3.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="219.1" y="510.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (24 samples, 0.23%)</title><rect x="216.1" y="483.0" width="2.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="219.1" y="494.0"></text>
</g>
<g>
<title>do_softirq.part.0 (24 samples, 0.23%)</title><rect x="216.1" y="467.0" width="2.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="219.1" y="478.0"></text>
</g>
<g>
<title>do_softirq_own_stack (23 samples, 0.22%)</title><rect x="216.2" y="451.0" width="2.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="219.2" y="462.0"></text>
</g>
<g>
<title>__softirqentry_text_start (23 samples, 0.22%)</title><rect x="216.2" y="435.0" width="2.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="219.2" y="446.0"></text>
</g>
<g>
<title>net_rx_action (20 samples, 0.19%)</title><rect x="216.4" y="419.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="219.4" y="430.0"></text>
</g>
<g>
<title>process_backlog (20 samples, 0.19%)</title><rect x="216.4" y="403.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="219.4" y="414.0"></text>
</g>
<g>
<title>__netif_receive_skb (17 samples, 0.16%)</title><rect x="216.7" y="387.0" width="1.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="219.7" y="398.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (16 samples, 0.15%)</title><rect x="216.8" y="371.0" width="1.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="219.8" y="382.0"></text>
</g>
<g>
<title>ip_rcv (15 samples, 0.14%)</title><rect x="217.0" y="355.0" width="1.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="220.0" y="366.0"></text>
</g>
<g>
<title>ip_rcv_finish (13 samples, 0.12%)</title><rect x="217.2" y="339.0" width="1.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="220.2" y="350.0"></text>
</g>
<g>
<title>ip_local_deliver (13 samples, 0.12%)</title><rect x="217.2" y="323.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="220.2" y="334.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (13 samples, 0.12%)</title><rect x="217.2" y="307.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="220.2" y="318.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (13 samples, 0.12%)</title><rect x="217.2" y="291.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="220.2" y="302.0"></text>
</g>
<g>
<title>tcp_v4_rcv (12 samples, 0.11%)</title><rect x="217.3" y="275.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="220.3" y="286.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (10 samples, 0.09%)</title><rect x="217.5" y="259.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="220.5" y="270.0"></text>
</g>
<g>
<title>tcp_rcv_established (10 samples, 0.09%)</title><rect x="217.5" y="243.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="220.5" y="254.0"></text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.03%)</title><rect x="217.5" y="227.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="220.5" y="238.0"></text>
</g>
<g>
<title>skb_release_all (3 samples, 0.03%)</title><rect x="217.5" y="211.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="220.5" y="222.0"></text>
</g>
<g>
<title>tcp_ack (6 samples, 0.06%)</title><rect x="218.0" y="227.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="221.0" y="238.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (5 samples, 0.05%)</title><rect x="218.1" y="211.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="221.1" y="222.0"></text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.03%)</title><rect x="218.2" y="195.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="221.2" y="206.0"></text>
</g>
<g>
<title>dev_queue_xmit (6 samples, 0.06%)</title><rect x="218.7" y="483.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="221.7" y="494.0"></text>
</g>
<g>
<title>__dev_queue_xmit (6 samples, 0.06%)</title><rect x="218.7" y="467.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="221.7" y="478.0"></text>
</g>
<g>
<title>validate_xmit_skb (3 samples, 0.03%)</title><rect x="219.1" y="451.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="222.1" y="462.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (14 samples, 0.13%)</title><rect x="219.7" y="659.0" width="1.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="222.7" y="670.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (11 samples, 0.10%)</title><rect x="220.1" y="643.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="223.1" y="654.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.08%)</title><rect x="220.1" y="627.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="223.1" y="638.0"></text>
</g>
<g>
<title>security_socket_recvmsg (32 samples, 0.30%)</title><rect x="221.6" y="691.0" width="3.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="224.6" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (27 samples, 0.25%)</title><rect x="222.2" y="675.0" width="3.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="225.2" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (26 samples, 0.24%)</title><rect x="222.3" y="659.0" width="2.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="225.3" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (21 samples, 0.20%)</title><rect x="222.7" y="643.0" width="2.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="225.7" y="654.0"></text>
</g>
<g>
<title>aa_profile_af_perm (12 samples, 0.11%)</title><rect x="223.7" y="627.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="226.7" y="638.0"></text>
</g>
<g>
<title>sockfd_lookup_light (11 samples, 0.10%)</title><rect x="225.2" y="707.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="228.2" y="718.0"></text>
</g>
<g>
<title>__fdget (10 samples, 0.09%)</title><rect x="225.2" y="691.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="228.2" y="702.0"></text>
</g>
<g>
<title>__fget_light (9 samples, 0.08%)</title><rect x="225.3" y="675.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="228.3" y="686.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.08%)</title><rect x="225.3" y="659.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="228.3" y="670.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.06%)</title><rect x="226.6" y="787.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="229.6" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (188 samples, 1.77%)</title><rect x="227.5" y="819.0" width="20.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.5" y="830.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (8 samples, 0.08%)</title><rect x="227.8" y="803.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.08%)</title><rect x="227.8" y="787.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.8" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.08%)</title><rect x="227.8" y="771.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.8" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (7 samples, 0.07%)</title><rect x="227.9" y="755.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.9" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.05%)</title><rect x="228.2" y="739.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="231.2" y="750.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.03%)</title><rect x="228.4" y="723.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.4" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (28 samples, 0.26%)</title><rect x="228.7" y="803.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.7" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (17 samples, 0.16%)</title><rect x="229.9" y="787.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (13 samples, 0.12%)</title><rect x="230.4" y="771.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (76 samples, 0.71%)</title><rect x="231.8" y="803.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.8" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.07%)</title><rect x="232.5" y="787.0" width="0.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="235.5" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (63 samples, 0.59%)</title><rect x="233.3" y="787.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.3" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (63 samples, 0.59%)</title><rect x="233.3" y="771.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.3" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (14 samples, 0.13%)</title><rect x="240.2" y="803.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (18 samples, 0.17%)</title><rect x="241.8" y="803.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.8" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.06%)</title><rect x="242.8" y="787.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="245.8" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="243.5" y="787.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (41 samples, 0.39%)</title><rect x="243.8" y="803.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (24 samples, 0.23%)</title><rect x="245.7" y="787.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="248.7" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (24 samples, 0.23%)</title><rect x="245.7" y="771.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.7" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="247.9" y="755.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="250.9" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (125 samples, 1.17%)</title><rect x="248.3" y="819.0" width="13.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.3" y="830.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (20 samples, 0.19%)</title><rect x="249.4" y="803.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="252.4" y="814.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (10 samples, 0.09%)</title><rect x="250.4" y="787.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.4" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (9 samples, 0.08%)</title><rect x="250.5" y="771.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="253.5" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (86 samples, 0.81%)</title><rect x="251.7" y="803.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.7" y="814.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.07%)</title><rect x="253.5" y="787.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.5" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (5 samples, 0.05%)</title><rect x="253.8" y="771.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="256.8" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (27 samples, 0.25%)</title><rect x="254.3" y="787.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="257.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="255.5" y="771.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="258.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.03%)</title><rect x="255.5" y="755.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.5" y="766.0"></text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.03%)</title><rect x="255.9" y="771.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="258.9" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (10 samples, 0.09%)</title><rect x="256.2" y="771.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="259.2" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (35 samples, 0.33%)</title><rect x="257.3" y="787.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="260.3" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (35 samples, 0.33%)</title><rect x="257.3" y="771.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="260.3" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (34 samples, 0.32%)</title><rect x="257.4" y="755.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (16 samples, 0.15%)</title><rect x="259.4" y="739.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="262.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.coder (5 samples, 0.05%)</title><rect x="260.6" y="723.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.6" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (9 samples, 0.08%)</title><rect x="261.2" y="803.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="264.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (31 samples, 0.29%)</title><rect x="262.2" y="819.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (26 samples, 0.24%)</title><rect x="262.7" y="803.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.7" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (26 samples, 0.24%)</title><rect x="262.7" y="787.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="265.7" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (17 samples, 0.16%)</title><rect x="263.7" y="771.0" width="1.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="266.7" y="782.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (328 samples, 3.08%)</title><rect x="265.6" y="819.0" width="36.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="268.6" y="830.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (3 samples, 0.03%)</title><rect x="267.1" y="803.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="270.1" y="814.0"></text>
</g>
<g>
<title>setsockopt (311 samples, 2.92%)</title><rect x="267.4" y="803.0" width="34.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="270.4" y="814.0">se..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (261 samples, 2.45%)</title><rect x="272.9" y="787.0" width="29.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="275.9" y="798.0">en..</text>
</g>
<g>
<title>__x64_sys_setsockopt (5 samples, 0.05%)</title><rect x="272.9" y="771.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="275.9" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (254 samples, 2.39%)</title><rect x="273.7" y="771.0" width="28.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="276.7" y="782.0">do..</text>
</g>
<g>
<title>__sys_setsockopt (4 samples, 0.04%)</title><rect x="280.1" y="755.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="283.1" y="766.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (191 samples, 1.79%)</title><rect x="280.6" y="755.0" width="21.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="283.6" y="766.0">_..</text>
</g>
<g>
<title>__sys_setsockopt (185 samples, 1.74%)</title><rect x="280.6" y="739.0" width="20.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="283.6" y="750.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_setsockopt (7 samples, 0.07%)</title><rect x="281.3" y="723.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="284.3" y="734.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (11 samples, 0.10%)</title><rect x="282.6" y="723.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="285.6" y="734.0"></text>
</g>
<g>
<title>fput_many (4 samples, 0.04%)</title><rect x="283.8" y="723.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="286.8" y="734.0"></text>
</g>
<g>
<title>security_socket_setsockopt (56 samples, 0.53%)</title><rect x="284.4" y="723.0" width="6.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="287.4" y="734.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (45 samples, 0.42%)</title><rect x="285.6" y="707.0" width="5.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="288.6" y="718.0"></text>
</g>
<g>
<title>aa_sk_perm (42 samples, 0.39%)</title><rect x="285.9" y="691.0" width="4.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="288.9" y="702.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (34 samples, 0.32%)</title><rect x="286.7" y="675.0" width="3.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="289.7" y="686.0"></text>
</g>
<g>
<title>aa_profile_af_perm (14 samples, 0.13%)</title><rect x="288.9" y="659.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="291.9" y="670.0"></text>
</g>
<g>
<title>aa_apply_modes_to_perms (3 samples, 0.03%)</title><rect x="290.1" y="643.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="293.1" y="654.0"></text>
</g>
<g>
<title>sock_setsockopt (64 samples, 0.60%)</title><rect x="290.7" y="723.0" width="7.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="293.7" y="734.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (5 samples, 0.05%)</title><rect x="291.2" y="707.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="294.2" y="718.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (18 samples, 0.17%)</title><rect x="291.9" y="707.0" width="2.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="294.9" y="718.0"></text>
</g>
<g>
<title>release_sock (8 samples, 0.08%)</title><rect x="294.0" y="707.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="297.0" y="718.0"></text>
</g>
<g>
<title>tcp_release_cb (3 samples, 0.03%)</title><rect x="294.6" y="691.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="297.6" y="702.0"></text>
</g>
<g>
<title>sock_set_timeout (22 samples, 0.21%)</title><rect x="294.9" y="707.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="297.9" y="718.0"></text>
</g>
<g>
<title>_copy_from_user (3 samples, 0.03%)</title><rect x="295.8" y="691.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="298.8" y="702.0"></text>
</g>
<g>
<title>copy_user_generic_string (11 samples, 0.10%)</title><rect x="296.1" y="691.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="299.1" y="702.0"></text>
</g>
<g>
<title>tcp_release_cb (4 samples, 0.04%)</title><rect x="297.3" y="707.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="300.3" y="718.0"></text>
</g>
<g>
<title>sockfd_lookup_light (30 samples, 0.28%)</title><rect x="297.8" y="723.0" width="3.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="300.8" y="734.0"></text>
</g>
<g>
<title>__fdget (23 samples, 0.22%)</title><rect x="297.9" y="707.0" width="2.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="300.9" y="718.0"></text>
</g>
<g>
<title>__fget_light (23 samples, 0.22%)</title><rect x="297.9" y="691.0" width="2.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="300.9" y="702.0"></text>
</g>
<g>
<title>__fget (23 samples, 0.22%)</title><rect x="297.9" y="675.0" width="2.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="300.9" y="686.0"></text>
</g>
<g>
<title>__fget_light (6 samples, 0.06%)</title><rect x="300.4" y="707.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="303.4" y="718.0"></text>
</g>
<g>
<title>sock_setsockopt (3 samples, 0.03%)</title><rect x="301.3" y="739.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="304.3" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (1,561 samples, 14.66%)</title><rect x="302.0" y="819.0" width="173.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.0" y="830.0">one/nio/net/NativeSock..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (20 samples, 0.19%)</title><rect x="305.5" y="803.0" width="2.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="308.5" y="814.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (36 samples, 0.34%)</title><rect x="307.7" y="803.0" width="4.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="310.7" y="814.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (8 samples, 0.08%)</title><rect x="308.9" y="787.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="311.9" y="798.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (16 samples, 0.15%)</title><rect x="310.0" y="787.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="313.0" y="798.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.04%)</title><rect x="310.6" y="771.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="313.6" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (6 samples, 0.06%)</title><rect x="311.1" y="771.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="314.1" y="782.0"></text>
</g>
<g>
<title>send (1,473 samples, 13.84%)</title><rect x="311.7" y="803.0" width="163.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="314.7" y="814.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,447 samples, 13.59%)</title><rect x="314.6" y="787.0" width="160.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="317.6" y="798.0">entry_SYSCALL_64_aft..</text>
</g>
<g>
<title>do_syscall_64 (1,445 samples, 13.57%)</title><rect x="314.8" y="771.0" width="160.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="317.8" y="782.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (1,431 samples, 13.44%)</title><rect x="315.6" y="755.0" width="158.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="318.6" y="766.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,427 samples, 13.41%)</title><rect x="315.6" y="739.0" width="158.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="318.6" y="750.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (3 samples, 0.03%)</title><rect x="315.9" y="723.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="318.9" y="734.0"></text>
</g>
<g>
<title>sock_sendmsg (1,408 samples, 13.23%)</title><rect x="316.3" y="723.0" width="156.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="319.3" y="734.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (3 samples, 0.03%)</title><rect x="316.9" y="707.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="319.9" y="718.0"></text>
</g>
<g>
<title>inet6_sendmsg (1,381 samples, 12.97%)</title><rect x="317.3" y="707.0" width="153.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="320.3" y="718.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (1,376 samples, 12.93%)</title><rect x="317.7" y="691.0" width="152.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="320.7" y="702.0">tcp_sendmsg</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (6 samples, 0.06%)</title><rect x="317.9" y="675.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="320.9" y="686.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (16 samples, 0.15%)</title><rect x="318.6" y="675.0" width="1.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="321.6" y="686.0"></text>
</g>
<g>
<title>release_sock (16 samples, 0.15%)</title><rect x="320.4" y="675.0" width="1.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="323.4" y="686.0"></text>
</g>
<g>
<title>__release_sock (11 samples, 0.10%)</title><rect x="320.6" y="659.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="323.6" y="670.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (10 samples, 0.09%)</title><rect x="320.7" y="643.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="323.7" y="654.0"></text>
</g>
<g>
<title>tcp_rcv_established (10 samples, 0.09%)</title><rect x="320.7" y="627.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="323.7" y="638.0"></text>
</g>
<g>
<title>__tcp_ack_snd_check (3 samples, 0.03%)</title><rect x="320.7" y="611.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="323.7" y="622.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (3 samples, 0.03%)</title><rect x="320.7" y="595.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="323.7" y="606.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.03%)</title><rect x="320.7" y="579.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="323.7" y="590.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.03%)</title><rect x="320.7" y="563.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="323.7" y="574.0"></text>
</g>
<g>
<title>tcp_ack (4 samples, 0.04%)</title><rect x="321.3" y="611.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="324.3" y="622.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (4 samples, 0.04%)</title><rect x="321.3" y="595.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="324.3" y="606.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (3 samples, 0.03%)</title><rect x="321.8" y="659.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="324.8" y="670.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.03%)</title><rect x="321.8" y="643.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="324.8" y="654.0"></text>
</g>
<g>
<title>tcp_push (5 samples, 0.05%)</title><rect x="322.2" y="675.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="325.2" y="686.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (4 samples, 0.04%)</title><rect x="322.7" y="675.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="325.7" y="686.0"></text>
</g>
<g>
<title>tcp_release_cb (3 samples, 0.03%)</title><rect x="323.2" y="675.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="326.2" y="686.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,321 samples, 12.41%)</title><rect x="323.5" y="675.0" width="146.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="326.5" y="686.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (4 samples, 0.04%)</title><rect x="326.6" y="659.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="329.6" y="670.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.03%)</title><rect x="326.7" y="643.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="329.7" y="654.0"></text>
</g>
<g>
<title>_copy_from_iter_full (14 samples, 0.13%)</title><rect x="327.0" y="659.0" width="1.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="330.0" y="670.0"></text>
</g>
<g>
<title>copy_user_generic_string (13 samples, 0.12%)</title><rect x="327.1" y="643.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="330.1" y="654.0"></text>
</g>
<g>
<title>sk_page_frag_refill (8 samples, 0.08%)</title><rect x="328.8" y="659.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="331.8" y="670.0"></text>
</g>
<g>
<title>skb_page_frag_refill (8 samples, 0.08%)</title><rect x="328.8" y="643.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="331.8" y="654.0"></text>
</g>
<g>
<title>alloc_pages_current (3 samples, 0.03%)</title><rect x="329.4" y="627.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="332.4" y="638.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (3 samples, 0.03%)</title><rect x="329.4" y="611.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="332.4" y="622.0"></text>
</g>
<g>
<title>get_page_from_freelist (3 samples, 0.03%)</title><rect x="329.4" y="595.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="332.4" y="606.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (101 samples, 0.95%)</title><rect x="329.7" y="659.0" width="11.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="332.7" y="670.0"></text>
</g>
<g>
<title>__alloc_skb (97 samples, 0.91%)</title><rect x="330.0" y="643.0" width="10.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="333.0" y="654.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (39 samples, 0.37%)</title><rect x="331.4" y="627.0" width="4.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="334.4" y="638.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (21 samples, 0.20%)</title><rect x="331.6" y="611.0" width="2.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="334.6" y="622.0"></text>
</g>
<g>
<title>__slab_alloc (7 samples, 0.07%)</title><rect x="332.7" y="595.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="335.7" y="606.0"></text>
</g>
<g>
<title>kmalloc_slab (4 samples, 0.04%)</title><rect x="333.5" y="595.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="336.5" y="606.0"></text>
</g>
<g>
<title>memset (12 samples, 0.11%)</title><rect x="334.3" y="611.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="337.3" y="622.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (20 samples, 0.19%)</title><rect x="335.8" y="627.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="338.8" y="638.0"></text>
</g>
<g>
<title>__slab_alloc (4 samples, 0.04%)</title><rect x="337.6" y="611.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="340.6" y="622.0"></text>
</g>
<g>
<title>ksize (5 samples, 0.05%)</title><rect x="338.0" y="627.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="341.0" y="638.0"></text>
</g>
<g>
<title>__ksize (5 samples, 0.05%)</title><rect x="338.0" y="611.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="341.0" y="622.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (3 samples, 0.03%)</title><rect x="338.6" y="627.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="341.6" y="638.0"></text>
</g>
<g>
<title>memset (15 samples, 0.14%)</title><rect x="338.9" y="627.0" width="1.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="341.9" y="638.0"></text>
</g>
<g>
<title>skb_entail (7 samples, 0.07%)</title><rect x="340.9" y="659.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="343.9" y="670.0"></text>
</g>
<g>
<title>tcp_push (1,140 samples, 10.71%)</title><rect x="341.9" y="659.0" width="126.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="344.9" y="670.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (1,140 samples, 10.71%)</title><rect x="341.9" y="643.0" width="126.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="344.9" y="654.0">__tcp_push_pendi..</text>
</g>
<g>
<title>tcp_write_xmit (1,136 samples, 10.67%)</title><rect x="342.3" y="627.0" width="126.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="345.3" y="638.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (1,043 samples, 9.80%)</title><rect x="344.2" y="611.0" width="115.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="347.2" y="622.0">__tcp_transmit..</text>
</g>
<g>
<title>ip_queue_xmit (1,002 samples, 9.41%)</title><rect x="346.4" y="595.0" width="111.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="349.4" y="606.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (1,002 samples, 9.41%)</title><rect x="346.4" y="579.0" width="111.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="349.4" y="590.0">__ip_queue_xmit</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (7 samples, 0.07%)</title><rect x="347.6" y="563.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="350.6" y="574.0"></text>
</g>
<g>
<title>ip_local_out (983 samples, 9.23%)</title><rect x="348.4" y="563.0" width="109.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="351.4" y="574.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (3 samples, 0.03%)</title><rect x="348.8" y="547.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="351.8" y="558.0"></text>
</g>
<g>
<title>ip_output (976 samples, 9.17%)</title><rect x="349.1" y="547.0" width="108.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="352.1" y="558.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (973 samples, 9.14%)</title><rect x="349.4" y="531.0" width="107.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="352.4" y="542.0">ip_finish_out..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (4 samples, 0.04%)</title><rect x="349.9" y="515.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="352.9" y="526.0"></text>
</g>
<g>
<title>__ip_finish_output (961 samples, 9.03%)</title><rect x="350.3" y="515.0" width="106.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="353.3" y="526.0">__ip_finish_o..</text>
</g>
<g>
<title>ip_finish_output2 (951 samples, 8.93%)</title><rect x="351.2" y="499.0" width="105.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="354.2" y="510.0">ip_finish_out..</text>
</g>
<g>
<title>__local_bh_enable_ip (858 samples, 8.06%)</title><rect x="353.3" y="483.0" width="95.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="356.3" y="494.0">__local_bh_..</text>
</g>
<g>
<title>do_softirq.part.0 (855 samples, 8.03%)</title><rect x="353.6" y="467.0" width="94.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="356.6" y="478.0">do_softirq...</text>
</g>
<g>
<title>do_softirq_own_stack (842 samples, 7.91%)</title><rect x="355.0" y="451.0" width="93.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="358.0" y="462.0">do_softirq_..</text>
</g>
<g>
<title>__softirqentry_text_start (842 samples, 7.91%)</title><rect x="355.0" y="435.0" width="93.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="358.0" y="446.0">__softirqen..</text>
</g>
<g>
<title>net_rx_action (824 samples, 7.74%)</title><rect x="356.6" y="419.0" width="91.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="359.6" y="430.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (817 samples, 7.67%)</title><rect x="357.4" y="403.0" width="90.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="360.4" y="414.0">process_ba..</text>
</g>
<g>
<title>__netif_receive_skb (796 samples, 7.48%)</title><rect x="359.7" y="387.0" width="88.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="362.7" y="398.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (796 samples, 7.48%)</title><rect x="359.7" y="371.0" width="88.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="362.7" y="382.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_core (13 samples, 0.12%)</title><rect x="360.6" y="355.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="363.6" y="366.0"></text>
</g>
<g>
<title>ip_rcv (775 samples, 7.28%)</title><rect x="362.1" y="355.0" width="85.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="365.1" y="366.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_core.isra.0 (4 samples, 0.04%)</title><rect x="362.3" y="339.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="365.3" y="350.0"></text>
</g>
<g>
<title>ip_rcv_finish (769 samples, 7.22%)</title><rect x="362.7" y="339.0" width="85.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="365.7" y="350.0">ip_rcv_fin..</text>
</g>
<g>
<title>ip_local_deliver (759 samples, 7.13%)</title><rect x="363.2" y="323.0" width="84.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="366.2" y="334.0">ip_local_d..</text>
</g>
<g>
<title>ip_local_deliver_finish (756 samples, 7.10%)</title><rect x="363.4" y="307.0" width="83.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="366.4" y="318.0">ip_local_..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (754 samples, 7.08%)</title><rect x="363.5" y="291.0" width="83.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="366.5" y="302.0">ip_protoc..</text>
</g>
<g>
<title>_raw_spin_lock (13 samples, 0.12%)</title><rect x="363.9" y="275.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="366.9" y="286.0"></text>
</g>
<g>
<title>sock_put (3 samples, 0.03%)</title><rect x="365.8" y="275.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="368.8" y="286.0"></text>
</g>
<g>
<title>tcp_v4_rcv (728 samples, 6.84%)</title><rect x="366.4" y="275.0" width="80.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="369.4" y="286.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (18 samples, 0.17%)</title><rect x="367.8" y="259.0" width="2.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="370.8" y="270.0"></text>
</g>
<g>
<title>inet_ehashfn (3 samples, 0.03%)</title><rect x="369.5" y="243.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="372.5" y="254.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (9 samples, 0.08%)</title><rect x="370.3" y="259.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="373.3" y="270.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (4 samples, 0.04%)</title><rect x="370.8" y="243.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="373.8" y="254.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (681 samples, 6.40%)</title><rect x="371.3" y="259.0" width="75.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="374.3" y="270.0">tcp_v4_d..</text>
</g>
<g>
<title>tcp_check_space (10 samples, 0.09%)</title><rect x="371.7" y="243.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="374.7" y="254.0"></text>
</g>
<g>
<title>tcp_rcv_established (667 samples, 6.27%)</title><rect x="372.8" y="243.0" width="73.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="375.8" y="254.0">tcp_rcv_..</text>
</g>
<g>
<title>__tcp_ack_snd_check (14 samples, 0.13%)</title><rect x="374.1" y="227.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="377.1" y="238.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (13 samples, 0.12%)</title><rect x="374.3" y="211.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="377.3" y="222.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.03%)</title><rect x="374.3" y="195.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="377.3" y="206.0"></text>
</g>
<g>
<title>sk_reset_timer (10 samples, 0.09%)</title><rect x="374.6" y="195.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="377.6" y="206.0"></text>
</g>
<g>
<title>mod_timer (9 samples, 0.08%)</title><rect x="374.7" y="179.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="377.7" y="190.0"></text>
</g>
<g>
<title>__lock_text_start (6 samples, 0.06%)</title><rect x="374.9" y="163.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="377.9" y="174.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.08%)</title><rect x="375.7" y="227.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="378.7" y="238.0"></text>
</g>
<g>
<title>tcp_ack (133 samples, 1.25%)</title><rect x="377.0" y="227.0" width="14.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="380.0" y="238.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (4 samples, 0.04%)</title><rect x="379.8" y="211.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="382.8" y="222.0"></text>
</g>
<g>
<title>rb_erase (4 samples, 0.04%)</title><rect x="380.5" y="211.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="383.5" y="222.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (90 samples, 0.85%)</title><rect x="380.9" y="211.0" width="10.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="383.9" y="222.0"></text>
</g>
<g>
<title>__kfree_skb (65 samples, 0.61%)</title><rect x="382.9" y="195.0" width="7.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="385.9" y="206.0"></text>
</g>
<g>
<title>kfree_skbmem (18 samples, 0.17%)</title><rect x="382.9" y="179.0" width="2.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="385.9" y="190.0"></text>
</g>
<g>
<title>kmem_cache_free (17 samples, 0.16%)</title><rect x="383.0" y="163.0" width="1.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="386.0" y="174.0"></text>
</g>
<g>
<title>__slab_free (11 samples, 0.10%)</title><rect x="383.7" y="147.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="386.7" y="158.0"></text>
</g>
<g>
<title>put_cpu_partial (3 samples, 0.03%)</title><rect x="384.6" y="131.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="387.6" y="142.0"></text>
</g>
<g>
<title>skb_release_all (47 samples, 0.44%)</title><rect x="384.9" y="179.0" width="5.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="387.9" y="190.0"></text>
</g>
<g>
<title>skb_release_data (44 samples, 0.41%)</title><rect x="385.0" y="163.0" width="4.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="388.0" y="174.0"></text>
</g>
<g>
<title>skb_free_head (26 samples, 0.24%)</title><rect x="387.0" y="147.0" width="2.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="390.0" y="158.0"></text>
</g>
<g>
<title>kfree (25 samples, 0.23%)</title><rect x="387.1" y="131.0" width="2.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="390.1" y="142.0"></text>
</g>
<g>
<title>__slab_free (11 samples, 0.10%)</title><rect x="388.7" y="115.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="391.7" y="126.0"></text>
</g>
<g>
<title>put_cpu_partial (4 samples, 0.04%)</title><rect x="389.4" y="99.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="392.4" y="110.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (4 samples, 0.04%)</title><rect x="390.2" y="195.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="393.2" y="206.0"></text>
</g>
<g>
<title>tcp_data_ready (476 samples, 4.47%)</title><rect x="391.8" y="227.0" width="52.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="394.8" y="238.0">tcp_d..</text>
</g>
<g>
<title>sock_def_readable (475 samples, 4.46%)</title><rect x="391.9" y="211.0" width="52.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="394.9" y="222.0">sock_..</text>
</g>
<g>
<title>__wake_up_sync_key (471 samples, 4.42%)</title><rect x="392.3" y="195.0" width="52.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="395.3" y="206.0">__wak..</text>
</g>
<g>
<title>__wake_up_common_lock (471 samples, 4.42%)</title><rect x="392.3" y="179.0" width="52.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="395.3" y="190.0">__wak..</text>
</g>
<g>
<title>__lock_text_start (466 samples, 4.38%)</title><rect x="392.5" y="163.0" width="51.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="395.5" y="174.0">__loc..</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (3 samples, 0.03%)</title><rect x="444.2" y="163.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="447.2" y="174.0"></text>
</g>
<g>
<title>tcp_event_data_recv (5 samples, 0.05%)</title><rect x="444.5" y="227.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="447.5" y="238.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.05%)</title><rect x="445.1" y="227.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="448.1" y="238.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="445.1" y="211.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="448.1" y="222.0"></text>
</g>
<g>
<title>tcp_queue_rcv (4 samples, 0.04%)</title><rect x="445.8" y="227.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="448.8" y="238.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (4 samples, 0.04%)</title><rect x="447.5" y="323.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="450.5" y="334.0"></text>
</g>
<g>
<title>process_backlog (3 samples, 0.03%)</title><rect x="448.0" y="419.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="451.0" y="430.0"></text>
</g>
<g>
<title>dev_queue_xmit (73 samples, 0.69%)</title><rect x="448.4" y="483.0" width="8.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="451.4" y="494.0"></text>
</g>
<g>
<title>__dev_queue_xmit (68 samples, 0.64%)</title><rect x="448.4" y="467.0" width="7.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="451.4" y="478.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.08%)</title><rect x="450.7" y="451.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="453.7" y="462.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (27 samples, 0.25%)</title><rect x="451.6" y="451.0" width="3.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="454.6" y="462.0"></text>
</g>
<g>
<title>loopback_xmit (22 samples, 0.21%)</title><rect x="452.1" y="435.0" width="2.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="455.1" y="446.0"></text>
</g>
<g>
<title>eth_type_trans (5 samples, 0.05%)</title><rect x="452.3" y="419.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="455.3" y="430.0"></text>
</g>
<g>
<title>netif_rx (10 samples, 0.09%)</title><rect x="452.8" y="419.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="455.8" y="430.0"></text>
</g>
<g>
<title>netif_rx_internal (10 samples, 0.09%)</title><rect x="452.8" y="403.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="455.8" y="414.0"></text>
</g>
<g>
<title>enqueue_to_backlog (10 samples, 0.09%)</title><rect x="452.8" y="387.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="455.8" y="398.0"></text>
</g>
<g>
<title>tcp_wfree (3 samples, 0.03%)</title><rect x="454.2" y="419.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="457.2" y="430.0"></text>
</g>
<g>
<title>validate_xmit_skb (9 samples, 0.08%)</title><rect x="454.8" y="451.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="457.8" y="462.0"></text>
</g>
<g>
<title>skb_clone (17 samples, 0.16%)</title><rect x="457.5" y="595.0" width="1.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="460.5" y="606.0"></text>
</g>
<g>
<title>__copy_skb_header (4 samples, 0.04%)</title><rect x="457.7" y="579.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="460.7" y="590.0"></text>
</g>
<g>
<title>__skb_clone (11 samples, 0.10%)</title><rect x="458.2" y="579.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="461.2" y="590.0"></text>
</g>
<g>
<title>__copy_skb_header (5 samples, 0.05%)</title><rect x="458.8" y="563.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="461.8" y="574.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (25 samples, 0.23%)</title><rect x="459.8" y="611.0" width="2.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="462.8" y="622.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (4 samples, 0.04%)</title><rect x="462.6" y="611.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="465.6" y="622.0"></text>
</g>
<g>
<title>read_tsc (6 samples, 0.06%)</title><rect x="463.5" y="611.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="466.5" y="622.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (27 samples, 0.25%)</title><rect x="464.3" y="611.0" width="3.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="467.3" y="622.0"></text>
</g>
<g>
<title>rb_insert_color (3 samples, 0.03%)</title><rect x="465.4" y="595.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="468.4" y="606.0"></text>
</g>
<g>
<title>tcp_rearm_rto (14 samples, 0.13%)</title><rect x="465.7" y="595.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="468.7" y="606.0"></text>
</g>
<g>
<title>sk_reset_timer (10 samples, 0.09%)</title><rect x="466.1" y="579.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="469.1" y="590.0"></text>
</g>
<g>
<title>mod_timer (9 samples, 0.08%)</title><rect x="466.3" y="563.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="469.3" y="574.0"></text>
</g>
<g>
<title>__lock_text_start (6 samples, 0.06%)</title><rect x="466.5" y="547.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="469.5" y="558.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (6 samples, 0.06%)</title><rect x="467.5" y="611.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="470.5" y="622.0"></text>
</g>
<g>
<title>tcp_send_mss (14 samples, 0.13%)</title><rect x="468.3" y="659.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="471.3" y="670.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="468.3" y="643.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="471.3" y="654.0"></text>
</g>
<g>
<title>ipv4_mtu (4 samples, 0.04%)</title><rect x="468.6" y="643.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="471.6" y="654.0"></text>
</g>
<g>
<title>tcp_current_mss (7 samples, 0.07%)</title><rect x="469.0" y="643.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="472.0" y="654.0"></text>
</g>
<g>
<title>security_socket_sendmsg (17 samples, 0.16%)</title><rect x="470.4" y="707.0" width="1.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="473.4" y="718.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (14 samples, 0.13%)</title><rect x="470.7" y="691.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="473.7" y="702.0"></text>
</g>
<g>
<title>aa_sk_perm (12 samples, 0.11%)</title><rect x="470.9" y="675.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="473.9" y="686.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (11 samples, 0.10%)</title><rect x="471.0" y="659.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="474.0" y="670.0"></text>
</g>
<g>
<title>aa_profile_af_perm (7 samples, 0.07%)</title><rect x="471.5" y="643.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="474.5" y="654.0"></text>
</g>
<g>
<title>sockfd_lookup_light (13 samples, 0.12%)</title><rect x="472.4" y="723.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="475.4" y="734.0"></text>
</g>
<g>
<title>__fdget (12 samples, 0.11%)</title><rect x="472.4" y="707.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="475.4" y="718.0"></text>
</g>
<g>
<title>__fget_light (12 samples, 0.11%)</title><rect x="472.4" y="691.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="475.4" y="702.0"></text>
</g>
<g>
<title>__fget (12 samples, 0.11%)</title><rect x="472.4" y="675.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="475.4" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (7 samples, 0.07%)</title><rect x="474.2" y="755.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="477.2" y="766.0"></text>
</g>
<g>
<title>schedule (6 samples, 0.06%)</title><rect x="474.4" y="739.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="477.4" y="750.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.05%)</title><rect x="474.5" y="723.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="477.5" y="734.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.04%)</title><rect x="474.6" y="707.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="477.6" y="718.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (46 samples, 0.43%)</title><rect x="475.0" y="819.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="478.0" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.05%)</title><rect x="475.8" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="478.8" y="814.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (5 samples, 0.05%)</title><rect x="475.8" y="787.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="478.8" y="798.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.04%)</title><rect x="475.8" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="478.8" y="782.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (34 samples, 0.32%)</title><rect x="476.3" y="803.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="479.3" y="814.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (34 samples, 0.32%)</title><rect x="476.3" y="787.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="479.3" y="798.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (5 samples, 0.05%)</title><rect x="480.1" y="819.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="483.1" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (23 samples, 0.22%)</title><rect x="480.8" y="867.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="483.8" y="878.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (19 samples, 0.18%)</title><rect x="481.2" y="851.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="484.2" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (19 samples, 0.18%)</title><rect x="481.2" y="835.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="484.2" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (53 samples, 0.50%)</title><rect x="483.3" y="867.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="486.3" y="878.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.07%)</title><rect x="485.2" y="851.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="488.2" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 0.07%)</title><rect x="485.2" y="835.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="488.2" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (15 samples, 0.14%)</title><rect x="486.3" y="851.0" width="1.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="489.3" y="862.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (11 samples, 0.10%)</title><rect x="488.0" y="851.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="491.0" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.05%)</title><rect x="488.7" y="835.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="491.7" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.05%)</title><rect x="488.7" y="819.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="491.7" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.05%)</title><rect x="488.7" y="803.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="491.7" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.fromBytes (4 samples, 0.04%)</title><rect x="489.2" y="867.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="492.2" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.getEmpty (3 samples, 0.03%)</title><rect x="489.6" y="867.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="492.6" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.&lt;init&gt; (3 samples, 0.03%)</title><rect x="489.6" y="851.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="492.6" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.getTimestamp (2,187 samples, 20.54%)</title><rect x="490.0" y="867.0" width="242.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="493.0" y="878.0">ru/mail/polis/service/manikhin/R..</text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.timestampFromByteBuffer (2,185 samples, 20.53%)</title><rect x="490.2" y="851.0" width="242.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="493.2" y="862.0">ru/mail/polis/service/manikhin/R..</text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (301 samples, 2.83%)</title><rect x="490.6" y="835.0" width="33.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="493.6" y="846.0">ja..</text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (301 samples, 2.83%)</title><rect x="490.6" y="819.0" width="33.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="493.6" y="830.0">ja..</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (301 samples, 2.83%)</title><rect x="490.6" y="803.0" width="33.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="493.6" y="814.0">ja..</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (301 samples, 2.83%)</title><rect x="490.6" y="787.0" width="33.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="493.6" y="798.0">ja..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (301 samples, 2.83%)</title><rect x="490.6" y="771.0" width="33.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="493.6" y="782.0">ja..</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (292 samples, 2.74%)</title><rect x="491.6" y="755.0" width="32.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="494.6" y="766.0">ja..</text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (286 samples, 2.69%)</title><rect x="492.3" y="739.0" width="31.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="495.3" y="750.0">Ja..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.05%)</title><rect x="492.6" y="723.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="495.6" y="734.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (277 samples, 2.60%)</title><rect x="493.2" y="723.0" width="30.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="496.2" y="734.0">JV..</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (3 samples, 0.03%)</title><rect x="493.4" y="707.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="496.4" y="718.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (267 samples, 2.51%)</title><rect x="494.3" y="707.0" width="29.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="497.3" y="718.0">ja..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.04%)</title><rect x="494.4" y="691.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="497.4" y="702.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;2670710ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)1, 2670710ul&gt;::oop_access_barrier(oopDesc*, long, oopDesc*) (19 samples, 0.18%)</title><rect x="494.9" y="691.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="497.9" y="702.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (8 samples, 0.08%)</title><rect x="497.1" y="691.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="500.1" y="702.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.04%)</title><rect x="498.1" y="691.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="501.1" y="702.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (3 samples, 0.03%)</title><rect x="498.5" y="691.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="501.5" y="702.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (3 samples, 0.03%)</title><rect x="498.8" y="691.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="501.8" y="702.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (3 samples, 0.03%)</title><rect x="499.4" y="691.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="502.4" y="702.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (5 samples, 0.05%)</title><rect x="500.0" y="691.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="503.0" y="702.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (210 samples, 1.97%)</title><rect x="500.5" y="691.0" width="23.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="503.5" y="702.0">j..</text>
</g>
<g>
<title>BacktraceBuilder::BacktraceBuilder(Thread*) (39 samples, 0.37%)</title><rect x="510.5" y="675.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="513.5" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.06%)</title><rect x="510.7" y="659.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="513.7" y="670.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (20 samples, 0.19%)</title><rect x="511.4" y="659.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="514.4" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (14 samples, 0.13%)</title><rect x="512.0" y="643.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="515.0" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (8 samples, 0.08%)</title><rect x="512.0" y="627.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="515.0" y="638.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (4 samples, 0.04%)</title><rect x="512.5" y="611.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="515.5" y="622.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.04%)</title><rect x="512.9" y="627.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="515.9" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (11 samples, 0.10%)</title><rect x="513.6" y="659.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="516.6" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (9 samples, 0.08%)</title><rect x="513.8" y="643.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="516.8" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (9 samples, 0.08%)</title><rect x="513.8" y="627.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="516.8" y="638.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.03%)</title><rect x="514.0" y="611.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="517.0" y="622.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (18 samples, 0.17%)</title><rect x="515.1" y="675.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="518.1" y="686.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (6 samples, 0.06%)</title><rect x="515.3" y="659.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="518.3" y="670.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (8 samples, 0.08%)</title><rect x="515.9" y="659.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="518.9" y="670.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (3 samples, 0.03%)</title><rect x="516.8" y="659.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="519.8" y="670.0"></text>
</g>
<g>
<title>ObjArrayKlass::allocate(int, Thread*) (5 samples, 0.05%)</title><rect x="517.1" y="675.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="520.1" y="686.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (51 samples, 0.48%)</title><rect x="518.0" y="675.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="521.0" y="686.0"></text>
</g>
<g>
<title>CodeBlob::is_compiled() const (4 samples, 0.04%)</title><rect x="518.6" y="659.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="521.6" y="670.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (39 samples, 0.37%)</title><rect x="519.4" y="659.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="522.4" y="670.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (3 samples, 0.03%)</title><rect x="519.7" y="643.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="522.7" y="654.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (6 samples, 0.06%)</title><rect x="520.0" y="643.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="523.0" y="654.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (21 samples, 0.20%)</title><rect x="520.7" y="643.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="523.7" y="654.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (6 samples, 0.06%)</title><rect x="523.0" y="643.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="526.0" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/DAOImpl.getTimestampRecord (1,875 samples, 17.61%)</title><rect x="524.0" y="835.0" width="207.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="527.0" y="846.0">ru/mail/polis/dao/manikhin/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,791 samples, 16.82%)</title><rect x="524.1" y="819.0" width="198.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="527.1" y="830.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,791 samples, 16.82%)</title><rect x="524.1" y="803.0" width="198.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="527.1" y="814.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (4 samples, 0.04%)</title><rect x="527.8" y="787.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="530.8" y="798.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (1,682 samples, 15.80%)</title><rect x="528.2" y="787.0" width="186.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="531.2" y="798.0">Java_org_rocksdb_RocksDB..</text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (8 samples, 0.08%)</title><rect x="529.7" y="771.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="532.7" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.04%)</title><rect x="530.6" y="771.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="533.6" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (11 samples, 0.10%)</title><rect x="531.0" y="771.0" width="1.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="534.0" y="782.0"></text>
</g>
<g>
<title>__libc_malloc (9 samples, 0.08%)</title><rect x="532.2" y="771.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="535.2" y="782.0"></text>
</g>
<g>
<title>cfree (7 samples, 0.07%)</title><rect x="533.2" y="771.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="536.2" y="782.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.04%)</title><rect x="534.0" y="771.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="537.0" y="782.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (10 samples, 0.09%)</title><rect x="534.4" y="771.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="537.4" y="782.0"></text>
</g>
<g>
<title>operator delete[](void*) (7 samples, 0.07%)</title><rect x="535.5" y="771.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="538.5" y="782.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (8 samples, 0.08%)</title><rect x="536.3" y="771.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="539.3" y="782.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (4 samples, 0.04%)</title><rect x="537.5" y="771.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="540.5" y="782.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,586 samples, 14.90%)</title><rect x="538.0" y="771.0" width="175.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="541.0" y="782.0">rocksdb_get_helper(JNIE..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (9 samples, 0.08%)</title><rect x="539.4" y="755.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="542.4" y="766.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.04%)</title><rect x="540.4" y="755.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="543.4" y="766.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.03%)</title><rect x="540.9" y="755.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="543.9" y="766.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (18 samples, 0.17%)</title><rect x="541.3" y="755.0" width="2.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="544.3" y="766.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (8 samples, 0.08%)</title><rect x="542.4" y="739.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="545.4" y="750.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (21 samples, 0.20%)</title><rect x="543.3" y="755.0" width="2.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="546.3" y="766.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.04%)</title><rect x="544.1" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="547.1" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (9 samples, 0.08%)</title><rect x="544.5" y="739.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="547.5" y="750.0"></text>
</g>
<g>
<title>jni_NewByteArray (13 samples, 0.12%)</title><rect x="545.6" y="755.0" width="1.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="548.6" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.03%)</title><rect x="547.1" y="755.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="550.1" y="766.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (1,367 samples, 12.84%)</title><rect x="547.6" y="755.0" width="151.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="550.6" y="766.0">rocksdb::DB::Get(ro..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (3 samples, 0.03%)</title><rect x="548.0" y="739.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="551.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (1,360 samples, 12.78%)</title><rect x="548.4" y="739.0" width="150.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="551.4" y="750.0">rocksdb::DB::Get(ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1,342 samples, 12.61%)</title><rect x="549.8" y="723.0" width="148.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="552.8" y="734.0">rocksdb::DBImpl::Ge..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (1,340 samples, 12.59%)</title><rect x="549.8" y="707.0" width="148.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="552.8" y="718.0">rocksdb::DBImpl::Ge..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (8 samples, 0.08%)</title><rect x="550.1" y="691.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="553.1" y="702.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.03%)</title><rect x="551.1" y="691.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="554.1" y="702.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (18 samples, 0.17%)</title><rect x="551.6" y="691.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="554.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (12 samples, 0.11%)</title><rect x="553.6" y="691.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="556.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (3 samples, 0.03%)</title><rect x="554.9" y="691.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="557.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (1,271 samples, 11.94%)</title><rect x="555.3" y="691.0" width="140.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="558.3" y="702.0">rocksdb::DBImpl::G..</text>
</g>
<g>
<title>__tls_get_addr (17 samples, 0.16%)</title><rect x="559.6" y="675.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="562.6" y="686.0"></text>
</g>
<g>
<title>memcpy (6 samples, 0.06%)</title><rect x="561.6" y="675.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="564.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (36 samples, 0.34%)</title><rect x="562.3" y="675.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="565.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (4 samples, 0.04%)</title><rect x="563.5" y="659.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="566.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (9 samples, 0.08%)</title><rect x="564.1" y="659.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="567.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (10 samples, 0.09%)</title><rect x="565.1" y="659.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="568.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (7 samples, 0.07%)</title><rect x="565.5" y="643.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="568.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.03%)</title><rect x="566.2" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="569.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (36 samples, 0.34%)</title><rect x="566.6" y="675.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="569.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (24 samples, 0.23%)</title><rect x="566.6" y="659.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="569.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (19 samples, 0.18%)</title><rect x="567.0" y="643.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="570.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (5 samples, 0.05%)</title><rect x="569.2" y="659.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="572.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (7 samples, 0.07%)</title><rect x="569.8" y="659.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="572.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) (3 samples, 0.03%)</title><rect x="570.8" y="675.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="573.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (764 samples, 7.18%)</title><rect x="571.1" y="675.0" width="84.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="574.1" y="686.0">rocksdb::M..</text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (15 samples, 0.14%)</title><rect x="573.9" y="659.0" width="1.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="576.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (719 samples, 6.75%)</title><rect x="575.8" y="659.0" width="79.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="578.8" y="670.0">rocksdb::..</text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (710 samples, 6.67%)</title><rect x="576.7" y="643.0" width="78.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="579.7" y="654.0">/tmp/libr..</text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (20 samples, 0.19%)</title><rect x="577.4" y="627.0" width="2.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="580.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (471 samples, 4.42%)</title><rect x="579.9" y="627.0" width="52.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="582.9" y="638.0">rocks..</text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (53 samples, 0.50%)</title><rect x="605.4" y="611.0" width="5.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="608.4" y="622.0"></text>
</g>
<g>
<title>__tls_get_addr (17 samples, 0.16%)</title><rect x="611.6" y="611.0" width="1.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="614.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (166 samples, 1.56%)</title><rect x="613.6" y="611.0" width="18.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="616.6" y="622.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (23 samples, 0.22%)</title><rect x="619.8" y="595.0" width="2.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="622.8" y="606.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (68 samples, 0.64%)</title><rect x="622.3" y="595.0" width="7.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="625.3" y="606.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (6 samples, 0.06%)</title><rect x="629.9" y="595.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="632.9" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (10 samples, 0.09%)</title><rect x="630.5" y="595.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="633.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (202 samples, 1.90%)</title><rect x="632.1" y="627.0" width="22.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="635.1" y="638.0">r..</text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.03%)</title><rect x="654.2" y="611.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="657.2" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.03%)</title><rect x="654.2" y="595.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="657.2" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.03%)</title><rect x="654.2" y="579.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="657.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::UnPackSequenceAndType(unsigned long, unsigned long*, rocksdb::ValueType*) (4 samples, 0.04%)</title><rect x="654.5" y="627.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="657.5" y="638.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned long) (3 samples, 0.03%)</title><rect x="655.0" y="627.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="658.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) (3 samples, 0.03%)</title><rect x="655.5" y="659.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="658.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (3 samples, 0.03%)</title><rect x="655.8" y="675.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="658.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (3 samples, 0.03%)</title><rect x="657.0" y="675.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="660.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::StopWatchNano::StopWatchNano(rocksdb::Env*, bool) (3 samples, 0.03%)</title><rect x="657.4" y="675.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="660.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (344 samples, 3.23%)</title><rect x="658.0" y="675.0" width="38.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="661.0" y="686.0">roc..</text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (3 samples, 0.03%)</title><rect x="658.9" y="659.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="661.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (8 samples, 0.08%)</title><rect x="659.2" y="659.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="662.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (321 samples, 3.02%)</title><rect x="660.6" y="659.0" width="35.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="663.6" y="670.0">roc..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (291 samples, 2.73%)</title><rect x="661.2" y="643.0" width="32.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="664.2" y="654.0">ro..</text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (9 samples, 0.08%)</title><rect x="665.5" y="627.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="668.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (3 samples, 0.03%)</title><rect x="665.8" y="611.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="668.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (3 samples, 0.03%)</title><rect x="666.1" y="611.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="669.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::BlockCacheLookupContext::~BlockCacheLookupContext() (3 samples, 0.03%)</title><rect x="666.9" y="627.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="669.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::RegisterCleanup(void (*)(void*, void*), void*, void*) (3 samples, 0.03%)</title><rect x="667.6" y="627.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="670.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::NewDataBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::DataBlockIter*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::Status, rocksdb::FilePrefetchBuffer*, bool) const (76 samples, 0.71%)</title><rect x="668.2" y="627.0" width="8.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="671.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (65 samples, 0.61%)</title><rect x="669.4" y="611.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="672.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::GetDataBlockFromCache&lt;rocksdb::Block&gt;(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Cache*, rocksdb::Cache*, rocksdb::ReadOptions const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::UncompressionDict const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (3 samples, 0.03%)</title><rect x="669.7" y="595.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="672.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::MaybeReadBlockAndLoadToCache&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::BlockContents*) const (60 samples, 0.56%)</title><rect x="670.0" y="595.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="673.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::GetDataBlockFromCache&lt;rocksdb::Block&gt;(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Cache*, rocksdb::Cache*, rocksdb::ReadOptions const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::UncompressionDict const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (50 samples, 0.47%)</title><rect x="671.0" y="579.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="674.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetEntryFromCache(rocksdb::Cache*, rocksdb::Slice const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (39 samples, 0.37%)</title><rect x="671.2" y="563.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="674.2" y="574.0"></text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits (5 samples, 0.05%)</title><rect x="671.6" y="547.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="674.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (25 samples, 0.23%)</title><rect x="672.6" y="547.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="675.6" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.04%)</title><rect x="672.6" y="531.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="675.6" y="542.0"></text>
</g>
<g>
<title>pthread_mutex_lock (9 samples, 0.08%)</title><rect x="673.2" y="531.0" width="1.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="676.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::Lookup(rocksdb::Slice const&amp;, unsigned int) (4 samples, 0.04%)</title><rect x="674.8" y="531.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="677.8" y="542.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.03%)</title><rect x="674.8" y="515.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="677.8" y="526.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::GetUsage(rocksdb::Cache::Handle*) const (3 samples, 0.03%)</title><rect x="675.8" y="563.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="678.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (4 samples, 0.04%)</title><rect x="676.1" y="563.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="679.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (74 samples, 0.70%)</title><rect x="676.7" y="627.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="679.7" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (11 samples, 0.10%)</title><rect x="677.9" y="611.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="680.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::BlockIter&lt;rocksdb::Slice&gt;::FindKeyAfterBinarySeek(rocksdb::Slice const&amp;, unsigned int, bool, rocksdb::Comparator const*) (42 samples, 0.39%)</title><rect x="679.1" y="611.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="682.1" y="622.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni16919602326730826146.so (13 samples, 0.12%)</title><rect x="680.0" y="595.0" width="1.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="683.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (11 samples, 0.10%)</title><rect x="681.6" y="595.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="684.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (8 samples, 0.08%)</title><rect x="682.9" y="595.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="685.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (8 samples, 0.08%)</title><rect x="683.7" y="611.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="686.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::~DataBlockIter() (13 samples, 0.12%)</title><rect x="684.9" y="627.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="687.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (11 samples, 0.10%)</title><rect x="685.0" y="611.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="688.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (5 samples, 0.05%)</title><rect x="685.4" y="595.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="688.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (59 samples, 0.55%)</title><rect x="686.3" y="627.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="689.3" y="638.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (11 samples, 0.10%)</title><rect x="689.7" y="611.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="692.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (5 samples, 0.05%)</title><rect x="691.4" y="611.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="694.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::UserComparatorWrapper::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (8 samples, 0.08%)</title><rect x="692.0" y="611.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="695.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::~IndexBlockIter() (3 samples, 0.03%)</title><rect x="692.8" y="627.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="695.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::BlockIter&lt;rocksdb::IndexValue&gt;::status() const (5 samples, 0.05%)</title><rect x="693.7" y="643.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="696.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (8 samples, 0.08%)</title><rect x="694.9" y="643.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="697.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::MergeContext::~MergeContext() (4 samples, 0.04%)</title><rect x="696.7" y="691.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="699.7" y="702.0"></text>
</g>
<g>
<title>rocksdb::PerfStepTimer::Start() (3 samples, 0.03%)</title><rect x="697.2" y="691.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="700.2" y="702.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (6 samples, 0.06%)</title><rect x="697.5" y="691.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="700.5" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (5 samples, 0.05%)</title><rect x="698.6" y="723.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="701.6" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (5 samples, 0.05%)</title><rect x="699.2" y="755.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="702.2" y="766.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (123 samples, 1.16%)</title><rect x="699.7" y="755.0" width="13.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="702.7" y="766.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.03%)</title><rect x="699.9" y="739.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="702.9" y="750.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.05%)</title><rect x="700.3" y="739.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="703.3" y="750.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (9 samples, 0.08%)</title><rect x="701.3" y="739.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="704.3" y="750.0"></text>
</g>
<g>
<title>jni_NewByteArray (91 samples, 0.85%)</title><rect x="702.3" y="739.0" width="10.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="705.3" y="750.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (8 samples, 0.08%)</title><rect x="704.4" y="723.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="707.4" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (15 samples, 0.14%)</title><rect x="705.3" y="723.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="708.3" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (6 samples, 0.06%)</title><rect x="706.9" y="723.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="709.9" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (43 samples, 0.40%)</title><rect x="707.6" y="723.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="710.6" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (40 samples, 0.38%)</title><rect x="707.9" y="707.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="710.9" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (20 samples, 0.19%)</title><rect x="708.1" y="691.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="711.1" y="702.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (6 samples, 0.06%)</title><rect x="708.7" y="675.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="711.7" y="686.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (7 samples, 0.07%)</title><rect x="709.5" y="675.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="712.5" y="686.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (12 samples, 0.11%)</title><rect x="710.4" y="691.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="713.4" y="702.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.03%)</title><rect x="711.7" y="691.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="714.7" y="702.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.03%)</title><rect x="712.0" y="691.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="715.0" y="702.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (9 samples, 0.08%)</title><rect x="712.3" y="739.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="715.3" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (4 samples, 0.04%)</title><rect x="712.6" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="715.6" y="734.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.03%)</title><rect x="713.0" y="723.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="716.0" y="734.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.03%)</title><rect x="713.5" y="755.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="716.5" y="766.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (5 samples, 0.05%)</title><rect x="713.8" y="771.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="716.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.11%)</title><rect x="714.7" y="787.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="717.7" y="798.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.05%)</title><rect x="714.7" y="771.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="717.7" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (6 samples, 0.06%)</title><rect x="715.2" y="771.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="718.2" y="782.0"></text>
</g>
<g>
<title>__libc_malloc (31 samples, 0.29%)</title><rect x="716.0" y="787.0" width="3.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="719.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (18 samples, 0.17%)</title><rect x="719.4" y="787.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="722.4" y="798.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (9 samples, 0.08%)</title><rect x="721.5" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="724.5" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/ByteConvertor.toUnsignedArray (25 samples, 0.23%)</title><rect x="722.7" y="819.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="725.7" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (8 samples, 0.08%)</title><rect x="723.1" y="803.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="726.1" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (8 samples, 0.08%)</title><rect x="724.0" y="803.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="727.0" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (8 samples, 0.08%)</title><rect x="724.0" y="787.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="727.0" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.03%)</title><rect x="724.5" y="771.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="727.5" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.03%)</title><rect x="724.5" y="755.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="727.5" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.05%)</title><rect x="724.9" y="803.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="727.9" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="725.0" y="787.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="728.0" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.04%)</title><rect x="725.0" y="771.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="728.0" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="725.1" y="755.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="728.1" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.fromBytes (58 samples, 0.54%)</title><rect x="725.4" y="819.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="728.4" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="727.2" y="803.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="730.2" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.03%)</title><rect x="727.2" y="787.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.2" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.03%)</title><rect x="727.5" y="803.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="730.5" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getLong (5 samples, 0.05%)</title><rect x="727.9" y="803.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="730.9" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="728.5" y="803.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="731.5" y="814.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (19 samples, 0.18%)</title><rect x="729.0" y="803.0" width="2.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="732.0" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord$RecordType.fromValue (3 samples, 0.03%)</title><rect x="731.1" y="803.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="734.1" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.&lt;init&gt; (4 samples, 0.04%)</title><rect x="731.4" y="803.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="734.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.toBytes (5 samples, 0.05%)</title><rect x="731.9" y="835.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="734.9" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.processResponses (2,980 samples, 27.99%)</title><rect x="732.4" y="867.0" width="330.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="735.4" y="878.0">ru/mail/polis/service/manikhin/ReplicasReques..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (35 samples, 0.33%)</title><rect x="732.5" y="851.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="735.5" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (11 samples, 0.10%)</title><rect x="735.2" y="835.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="738.2" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.getValueAsBytes (8 samples, 0.08%)</title><rect x="736.4" y="851.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="739.4" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (4 samples, 0.04%)</title><rect x="736.6" y="835.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="739.6" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.04%)</title><rect x="736.6" y="819.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="739.6" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="736.7" y="803.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="739.7" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.merge (242 samples, 2.27%)</title><rect x="737.4" y="851.0" width="26.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="740.4" y="862.0">r..</text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.03%)</title><rect x="752.8" y="835.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="755.8" y="846.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (3 samples, 0.03%)</title><rect x="753.5" y="835.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="756.5" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (9 samples, 0.08%)</title><rect x="753.8" y="835.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="756.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (5 samples, 0.05%)</title><rect x="754.2" y="819.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="757.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (5 samples, 0.05%)</title><rect x="754.2" y="803.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="757.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (5 samples, 0.05%)</title><rect x="754.2" y="787.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="757.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (5 samples, 0.05%)</title><rect x="754.2" y="771.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="757.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (22 samples, 0.21%)</title><rect x="754.8" y="835.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="757.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (18 samples, 0.17%)</title><rect x="755.2" y="819.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="758.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (18 samples, 0.17%)</title><rect x="755.2" y="803.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="758.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.sourceSpliterator (5 samples, 0.05%)</title><rect x="755.2" y="787.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="758.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (13 samples, 0.12%)</title><rect x="755.8" y="787.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="758.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (11 samples, 0.10%)</title><rect x="755.8" y="771.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="758.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (10 samples, 0.09%)</title><rect x="755.8" y="755.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="758.8" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (10 samples, 0.09%)</title><rect x="755.8" y="739.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="758.8" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (8 samples, 0.08%)</title><rect x="756.0" y="723.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="759.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.accept (3 samples, 0.03%)</title><rect x="756.2" y="707.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="759.2" y="718.0"></text>
</g>
<g>
<title>java/util/function/BinaryOperator$$Lambda$72/422474917.apply (3 samples, 0.03%)</title><rect x="756.2" y="691.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="759.2" y="702.0"></text>
</g>
<g>
<title>java/util/function/BinaryOperator.lambda$maxBy$1 (3 samples, 0.03%)</title><rect x="756.2" y="675.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="759.2" y="686.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$69/1609489402.compare (3 samples, 0.03%)</title><rect x="756.2" y="659.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="759.2" y="670.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparingLong$6043328a$1 (3 samples, 0.03%)</title><rect x="756.2" y="643.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="759.2" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord$$Lambda$66/214604247.test (3 samples, 0.03%)</title><rect x="756.6" y="707.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="759.6" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (37 samples, 0.35%)</title><rect x="757.4" y="835.0" width="4.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="760.4" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (3 samples, 0.03%)</title><rect x="761.5" y="835.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="764.5" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (6 samples, 0.06%)</title><rect x="762.2" y="835.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="765.2" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.toBytes (4 samples, 0.04%)</title><rect x="763.4" y="835.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="766.4" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.sendResponse (3 samples, 0.03%)</title><rect x="763.9" y="835.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="766.9" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/manikhin/TimestampRecord.toBytes (14 samples, 0.13%)</title><rect x="764.2" y="851.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="767.2" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (14 samples, 0.13%)</title><rect x="764.2" y="835.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="767.2" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.13%)</title><rect x="764.2" y="819.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="767.2" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="765.2" y="803.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="768.2" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.sendResponse (2,679 samples, 25.17%)</title><rect x="765.8" y="851.0" width="296.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="768.8" y="862.0">ru/mail/polis/service/manikhin/ReplicasR..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2,678 samples, 25.16%)</title><rect x="765.8" y="835.0" width="296.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="768.8" y="846.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (51 samples, 0.48%)</title><rect x="769.5" y="819.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="772.5" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (51 samples, 0.48%)</title><rect x="769.5" y="803.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="772.5" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (51 samples, 0.48%)</title><rect x="769.5" y="787.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="772.5" y="798.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.07%)</title><rect x="771.3" y="771.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="774.3" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (28 samples, 0.26%)</title><rect x="772.1" y="771.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="775.1" y="782.0"></text>
</g>
<g>
<title>gettimeofday (25 samples, 0.23%)</title><rect x="772.4" y="755.0" width="2.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="775.4" y="766.0"></text>
</g>
<g>
<title>[vdso] (22 samples, 0.21%)</title><rect x="772.8" y="739.0" width="2.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="775.8" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (2,564 samples, 24.09%)</title><rect x="775.2" y="819.0" width="284.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="778.2" y="830.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.03%)</title><rect x="775.5" y="803.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="778.5" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (122 samples, 1.15%)</title><rect x="775.9" y="803.0" width="13.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="778.9" y="814.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (3 samples, 0.03%)</title><rect x="780.7" y="787.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="783.7" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="780.7" y="771.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="783.7" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.03%)</title><rect x="780.7" y="755.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="783.7" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.03%)</title><rect x="780.7" y="739.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="783.7" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.03%)</title><rect x="780.7" y="723.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="783.7" y="734.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.03%)</title><rect x="780.7" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="783.7" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.03%)</title><rect x="780.7" y="691.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="783.7" y="702.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (75 samples, 0.70%)</title><rect x="781.1" y="787.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="784.1" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (75 samples, 0.70%)</title><rect x="781.1" y="771.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="784.1" y="782.0"></text>
</g>
<g>
<title>java/lang/String.charAt (75 samples, 0.70%)</title><rect x="781.1" y="755.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="784.1" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (26 samples, 0.24%)</title><rect x="786.4" y="739.0" width="2.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="789.4" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (2,436 samples, 22.88%)</title><rect x="789.4" y="803.0" width="270.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="792.4" y="814.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (2,436 samples, 22.88%)</title><rect x="789.4" y="787.0" width="270.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="792.4" y="798.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (2,432 samples, 22.85%)</title><rect x="789.8" y="771.0" width="269.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="792.8" y="782.0">one/nio/net/Session$ArrayQueueItem.w..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.04%)</title><rect x="790.5" y="755.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="793.5" y="766.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (2,422 samples, 22.75%)</title><rect x="790.9" y="755.0" width="268.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="793.9" y="766.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (20 samples, 0.19%)</title><rect x="796.0" y="739.0" width="2.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="799.0" y="750.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (60 samples, 0.56%)</title><rect x="798.4" y="739.0" width="6.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="801.4" y="750.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (15 samples, 0.14%)</title><rect x="800.5" y="723.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="803.5" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.04%)</title><rect x="802.1" y="723.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="805.1" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (19 samples, 0.18%)</title><rect x="802.6" y="723.0" width="2.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="805.6" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.04%)</title><rect x="802.9" y="707.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="805.9" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (11 samples, 0.10%)</title><rect x="803.4" y="707.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="806.4" y="718.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.03%)</title><rect x="804.7" y="723.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="807.7" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.08%)</title><rect x="805.0" y="739.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="808.0" y="750.0"></text>
</g>
<g>
<title>send (2,285 samples, 21.47%)</title><rect x="805.9" y="739.0" width="253.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="808.9" y="750.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2,239 samples, 21.03%)</title><rect x="811.0" y="723.0" width="248.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="814.0" y="734.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x64_sys_sendto (6 samples, 0.06%)</title><rect x="811.0" y="707.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="814.0" y="718.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.08%)</title><rect x="811.7" y="707.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="814.7" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (2,225 samples, 20.90%)</title><rect x="812.6" y="707.0" width="246.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="815.6" y="718.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (2,177 samples, 20.45%)</title><rect x="817.2" y="691.0" width="241.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="820.2" y="702.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (2,170 samples, 20.39%)</title><rect x="817.2" y="675.0" width="240.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="820.2" y="686.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (7 samples, 0.07%)</title><rect x="818.7" y="659.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="821.7" y="670.0"></text>
</g>
<g>
<title>sock_sendmsg (2,122 samples, 19.93%)</title><rect x="819.4" y="659.0" width="235.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="822.4" y="670.0">sock_sendmsg</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (7 samples, 0.07%)</title><rect x="820.1" y="643.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="823.1" y="654.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (6 samples, 0.06%)</title><rect x="820.9" y="643.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="823.9" y="654.0"></text>
</g>
<g>
<title>inet6_sendmsg (2,058 samples, 19.33%)</title><rect x="821.5" y="643.0" width="228.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="824.5" y="654.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (2,050 samples, 19.26%)</title><rect x="822.2" y="627.0" width="227.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="825.2" y="638.0">tcp_sendmsg</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (6 samples, 0.06%)</title><rect x="823.2" y="611.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="826.2" y="622.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (22 samples, 0.21%)</title><rect x="824.0" y="611.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="827.0" y="622.0"></text>
</g>
<g>
<title>release_sock (20 samples, 0.19%)</title><rect x="826.9" y="611.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="829.9" y="622.0"></text>
</g>
<g>
<title>__release_sock (15 samples, 0.14%)</title><rect x="827.4" y="595.0" width="1.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="830.4" y="606.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (11 samples, 0.10%)</title><rect x="827.9" y="579.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="830.9" y="590.0"></text>
</g>
<g>
<title>tcp_rcv_established (11 samples, 0.10%)</title><rect x="827.9" y="563.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="830.9" y="574.0"></text>
</g>
<g>
<title>tcp_ack (4 samples, 0.04%)</title><rect x="828.0" y="547.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="831.0" y="558.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (3 samples, 0.03%)</title><rect x="828.1" y="531.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="831.1" y="542.0"></text>
</g>
<g>
<title>tcp_data_ready (5 samples, 0.05%)</title><rect x="828.4" y="547.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="831.4" y="558.0"></text>
</g>
<g>
<title>sock_def_readable (5 samples, 0.05%)</title><rect x="828.4" y="531.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="831.4" y="542.0"></text>
</g>
<g>
<title>__wake_up_sync_key (5 samples, 0.05%)</title><rect x="828.4" y="515.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="831.4" y="526.0"></text>
</g>
<g>
<title>__wake_up_common_lock (5 samples, 0.05%)</title><rect x="828.4" y="499.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="831.4" y="510.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.05%)</title><rect x="828.4" y="483.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="831.4" y="494.0"></text>
</g>
<g>
<title>tcp_release_cb (5 samples, 0.05%)</title><rect x="829.6" y="611.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="832.6" y="622.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,974 samples, 18.54%)</title><rect x="830.2" y="611.0" width="218.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="833.2" y="622.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (12 samples, 0.11%)</title><rect x="834.4" y="595.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="837.4" y="606.0"></text>
</g>
<g>
<title>__virt_addr_valid (9 samples, 0.08%)</title><rect x="834.7" y="579.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="837.7" y="590.0"></text>
</g>
<g>
<title>_copy_from_iter_full (28 samples, 0.26%)</title><rect x="835.7" y="595.0" width="3.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="838.7" y="606.0"></text>
</g>
<g>
<title>copy_user_generic_string (26 samples, 0.24%)</title><rect x="835.7" y="579.0" width="2.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="838.7" y="590.0"></text>
</g>
<g>
<title>sk_page_frag_refill (9 samples, 0.08%)</title><rect x="839.2" y="595.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="842.2" y="606.0"></text>
</g>
<g>
<title>skb_page_frag_refill (9 samples, 0.08%)</title><rect x="839.2" y="579.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="842.2" y="590.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (169 samples, 1.59%)</title><rect x="840.2" y="595.0" width="18.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="843.2" y="606.0"></text>
</g>
<g>
<title>__alloc_skb (166 samples, 1.56%)</title><rect x="840.4" y="579.0" width="18.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="843.4" y="590.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (82 samples, 0.77%)</title><rect x="841.9" y="563.0" width="9.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="844.9" y="574.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (50 samples, 0.47%)</title><rect x="841.9" y="547.0" width="5.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="844.9" y="558.0"></text>
</g>
<g>
<title>__slab_alloc (25 samples, 0.23%)</title><rect x="843.8" y="531.0" width="2.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="846.8" y="542.0"></text>
</g>
<g>
<title>kmalloc_slab (8 samples, 0.08%)</title><rect x="846.6" y="531.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="849.6" y="542.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (3 samples, 0.03%)</title><rect x="847.5" y="547.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="850.5" y="558.0"></text>
</g>
<g>
<title>memset (29 samples, 0.27%)</title><rect x="847.8" y="547.0" width="3.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="850.8" y="558.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (28 samples, 0.26%)</title><rect x="851.1" y="563.0" width="3.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="854.1" y="574.0"></text>
</g>
<g>
<title>__slab_alloc (8 samples, 0.08%)</title><rect x="853.3" y="547.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="856.3" y="558.0"></text>
</g>
<g>
<title>___slab_alloc (3 samples, 0.03%)</title><rect x="853.9" y="531.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="856.9" y="542.0"></text>
</g>
<g>
<title>new_slab (3 samples, 0.03%)</title><rect x="853.9" y="515.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="856.9" y="526.0"></text>
</g>
<g>
<title>ksize (8 samples, 0.08%)</title><rect x="854.2" y="563.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="857.2" y="574.0"></text>
</g>
<g>
<title>__ksize (8 samples, 0.08%)</title><rect x="854.2" y="547.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="857.2" y="558.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (3 samples, 0.03%)</title><rect x="855.1" y="563.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="858.1" y="574.0"></text>
</g>
<g>
<title>memset (27 samples, 0.25%)</title><rect x="855.5" y="563.0" width="2.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="858.5" y="574.0"></text>
</g>
<g>
<title>should_failslab (3 samples, 0.03%)</title><rect x="858.4" y="563.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="861.4" y="574.0"></text>
</g>
<g>
<title>skb_entail (8 samples, 0.08%)</title><rect x="858.9" y="595.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="861.9" y="606.0"></text>
</g>
<g>
<title>tcp_push (1,680 samples, 15.78%)</title><rect x="859.8" y="595.0" width="186.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="862.8" y="606.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (1,679 samples, 15.77%)</title><rect x="859.8" y="579.0" width="186.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="862.8" y="590.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>__tcp_transmit_skb (4 samples, 0.04%)</title><rect x="859.9" y="563.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="862.9" y="574.0"></text>
</g>
<g>
<title>ktime_get (5 samples, 0.05%)</title><rect x="860.3" y="563.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="863.3" y="574.0"></text>
</g>
<g>
<title>tcp_write_xmit (1,667 samples, 15.66%)</title><rect x="861.1" y="563.0" width="184.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="864.1" y="574.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (1,521 samples, 14.29%)</title><rect x="863.1" y="547.0" width="168.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="866.1" y="558.0">__tcp_transmit_skb</text>
</g>
<g>
<title>ip_queue_xmit (1,482 samples, 13.92%)</title><rect x="865.8" y="531.0" width="164.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="868.8" y="542.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (1,478 samples, 13.88%)</title><rect x="865.8" y="515.0" width="163.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="868.8" y="526.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (4 samples, 0.04%)</title><rect x="867.2" y="499.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="870.2" y="510.0"></text>
</g>
<g>
<title>ipv4_dst_check (4 samples, 0.04%)</title><rect x="867.2" y="483.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="870.2" y="494.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (20 samples, 0.19%)</title><rect x="867.6" y="499.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="870.6" y="510.0"></text>
</g>
<g>
<title>ip_local_out (1,436 samples, 13.49%)</title><rect x="869.9" y="499.0" width="159.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="872.9" y="510.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (3 samples, 0.03%)</title><rect x="870.5" y="483.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="873.5" y="494.0"></text>
</g>
<g>
<title>ip_output (1,426 samples, 13.40%)</title><rect x="870.9" y="483.0" width="158.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="873.9" y="494.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (1,416 samples, 13.30%)</title><rect x="872.0" y="467.0" width="156.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="875.0" y="478.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (12 samples, 0.11%)</title><rect x="872.5" y="451.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="875.5" y="462.0"></text>
</g>
<g>
<title>__ip_finish_output (1,393 samples, 13.09%)</title><rect x="873.9" y="451.0" width="154.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="876.9" y="462.0">__ip_finish_output</text>
</g>
<g>
<title>__local_bh_enable_ip (4 samples, 0.04%)</title><rect x="874.5" y="435.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="877.5" y="446.0"></text>
</g>
<g>
<title>ip_finish_output2 (1,383 samples, 12.99%)</title><rect x="875.0" y="435.0" width="153.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="878.0" y="446.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (1,268 samples, 11.91%)</title><rect x="876.6" y="419.0" width="140.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="879.6" y="430.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.0 (1,265 samples, 11.88%)</title><rect x="877.0" y="403.0" width="140.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="880.0" y="414.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (1,235 samples, 11.60%)</title><rect x="880.0" y="387.0" width="136.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="883.0" y="398.0">do_softirq_own_st..</text>
</g>
<g>
<title>__softirqentry_text_start (1,234 samples, 11.59%)</title><rect x="880.0" y="371.0" width="136.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="883.0" y="382.0">__softirqentry_te..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (4 samples, 0.04%)</title><rect x="883.9" y="355.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="886.9" y="366.0"></text>
</g>
<g>
<title>net_rx_action (1,190 samples, 11.18%)</title><rect x="884.4" y="355.0" width="131.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="887.4" y="366.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (1,170 samples, 10.99%)</title><rect x="886.6" y="339.0" width="129.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="889.6" y="350.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (1,115 samples, 10.47%)</title><rect x="892.6" y="323.0" width="123.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="895.6" y="334.0">__netif_receive..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (1,110 samples, 10.43%)</title><rect x="893.0" y="307.0" width="123.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="896.0" y="318.0">__netif_receive..</text>
</g>
<g>
<title>__netif_receive_skb_core (9 samples, 0.08%)</title><rect x="893.4" y="291.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="896.4" y="302.0"></text>
</g>
<g>
<title>ip_rcv (1,096 samples, 10.30%)</title><rect x="894.4" y="291.0" width="121.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="897.4" y="302.0">ip_rcv</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (7 samples, 0.07%)</title><rect x="894.7" y="275.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="897.7" y="286.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (7 samples, 0.07%)</title><rect x="895.6" y="275.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="898.6" y="286.0"></text>
</g>
<g>
<title>ip_rcv_finish (1,078 samples, 10.13%)</title><rect x="896.4" y="275.0" width="119.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="899.4" y="286.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (1,068 samples, 10.03%)</title><rect x="896.8" y="259.0" width="118.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="899.8" y="270.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (1,066 samples, 10.01%)</title><rect x="897.0" y="243.0" width="118.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="900.0" y="254.0">ip_local_deliv..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (1,062 samples, 9.98%)</title><rect x="897.1" y="227.0" width="117.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="900.1" y="238.0">ip_protocol_de..</text>
</g>
<g>
<title>_raw_spin_lock (10 samples, 0.09%)</title><rect x="897.5" y="211.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="900.5" y="222.0"></text>
</g>
<g>
<title>raw_local_deliver (4 samples, 0.04%)</title><rect x="898.6" y="211.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="901.6" y="222.0"></text>
</g>
<g>
<title>sock_put (3 samples, 0.03%)</title><rect x="899.0" y="211.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="902.0" y="222.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1,042 samples, 9.79%)</title><rect x="899.4" y="211.0" width="115.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="902.4" y="222.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (25 samples, 0.23%)</title><rect x="901.9" y="195.0" width="2.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="904.9" y="206.0"></text>
</g>
<g>
<title>inet_ehashfn (7 samples, 0.07%)</title><rect x="903.9" y="179.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="906.9" y="190.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (4 samples, 0.04%)</title><rect x="904.7" y="195.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="907.7" y="206.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (21 samples, 0.20%)</title><rect x="905.4" y="195.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="908.4" y="206.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (4 samples, 0.04%)</title><rect x="905.7" y="179.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="908.7" y="190.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.08%)</title><rect x="906.1" y="179.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="909.1" y="190.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (5 samples, 0.05%)</title><rect x="907.2" y="179.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="910.2" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (959 samples, 9.01%)</title><rect x="908.0" y="195.0" width="106.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="911.0" y="206.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_check_space (23 samples, 0.22%)</title><rect x="908.1" y="179.0" width="2.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="911.1" y="190.0"></text>
</g>
<g>
<title>tcp_rcv_established (935 samples, 8.78%)</title><rect x="910.7" y="179.0" width="103.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="913.7" y="190.0">tcp_rcv_esta..</text>
</g>
<g>
<title>__tcp_ack_snd_check (37 samples, 0.35%)</title><rect x="912.1" y="163.0" width="4.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="915.1" y="174.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (37 samples, 0.35%)</title><rect x="912.1" y="147.0" width="4.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="915.1" y="158.0"></text>
</g>
<g>
<title>sk_reset_timer (36 samples, 0.34%)</title><rect x="912.2" y="131.0" width="4.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="915.2" y="142.0"></text>
</g>
<g>
<title>mod_timer (36 samples, 0.34%)</title><rect x="912.2" y="115.0" width="4.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="915.2" y="126.0"></text>
</g>
<g>
<title>__lock_text_start (24 samples, 0.23%)</title><rect x="912.8" y="99.0" width="2.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="915.8" y="110.0"></text>
</g>
<g>
<title>lock_timer_base (7 samples, 0.07%)</title><rect x="915.4" y="99.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="918.4" y="110.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (7 samples, 0.07%)</title><rect x="915.4" y="83.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="918.4" y="94.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (16 samples, 0.15%)</title><rect x="916.2" y="163.0" width="1.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="919.2" y="174.0"></text>
</g>
<g>
<title>tcp_ack (209 samples, 1.96%)</title><rect x="918.5" y="163.0" width="23.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="921.5" y="174.0">t..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (7 samples, 0.07%)</title><rect x="922.2" y="147.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="925.2" y="158.0"></text>
</g>
<g>
<title>bictcp_acked (3 samples, 0.03%)</title><rect x="923.0" y="147.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="926.0" y="158.0"></text>
</g>
<g>
<title>rb_first (3 samples, 0.03%)</title><rect x="923.5" y="147.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="926.5" y="158.0"></text>
</g>
<g>
<title>rb_next (4 samples, 0.04%)</title><rect x="923.8" y="147.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="926.8" y="158.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (141 samples, 1.32%)</title><rect x="924.4" y="147.0" width="15.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="927.4" y="158.0"></text>
</g>
<g>
<title>__kfree_skb (87 samples, 0.82%)</title><rect x="928.5" y="131.0" width="9.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="931.5" y="142.0"></text>
</g>
<g>
<title>kfree_skbmem (28 samples, 0.26%)</title><rect x="928.5" y="115.0" width="3.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="931.5" y="126.0"></text>
</g>
<g>
<title>kmem_cache_free (27 samples, 0.25%)</title><rect x="928.6" y="99.0" width="3.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="931.6" y="110.0"></text>
</g>
<g>
<title>__slab_free (16 samples, 0.15%)</title><rect x="929.8" y="83.0" width="1.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="932.8" y="94.0"></text>
</g>
<g>
<title>skb_release_all (57 samples, 0.54%)</title><rect x="931.6" y="115.0" width="6.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="934.6" y="126.0"></text>
</g>
<g>
<title>skb_release_data (56 samples, 0.53%)</title><rect x="931.6" y="99.0" width="6.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="934.6" y="110.0"></text>
</g>
<g>
<title>skb_free_head (30 samples, 0.28%)</title><rect x="934.5" y="83.0" width="3.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="937.5" y="94.0"></text>
</g>
<g>
<title>kfree (30 samples, 0.28%)</title><rect x="934.5" y="67.0" width="3.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="937.5" y="78.0"></text>
</g>
<g>
<title>__slab_free (20 samples, 0.19%)</title><rect x="935.6" y="51.0" width="2.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="938.6" y="62.0"></text>
</g>
<g>
<title>put_cpu_partial (3 samples, 0.03%)</title><rect x="937.5" y="35.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="940.5" y="46.0"></text>
</g>
<g>
<title>bictcp_acked (4 samples, 0.04%)</title><rect x="938.1" y="131.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="941.1" y="142.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (10 samples, 0.09%)</title><rect x="938.6" y="131.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="941.6" y="142.0"></text>
</g>
<g>
<title>tcp_newly_delivered (4 samples, 0.04%)</title><rect x="940.0" y="147.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="943.0" y="158.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.03%)</title><rect x="940.9" y="147.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="943.9" y="158.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (4 samples, 0.04%)</title><rect x="941.3" y="147.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="944.3" y="158.0"></text>
</g>
<g>
<title>tcp_data_ready (621 samples, 5.83%)</title><rect x="941.9" y="163.0" width="68.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="944.9" y="174.0">tcp_dat..</text>
</g>
<g>
<title>sock_def_readable (621 samples, 5.83%)</title><rect x="941.9" y="147.0" width="68.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="944.9" y="158.0">sock_de..</text>
</g>
<g>
<title>__wake_up_sync_key (616 samples, 5.79%)</title><rect x="942.5" y="131.0" width="68.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="945.5" y="142.0">__wake_..</text>
</g>
<g>
<title>__wake_up_common_lock (615 samples, 5.78%)</title><rect x="942.5" y="115.0" width="68.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="945.5" y="126.0">__wake_..</text>
</g>
<g>
<title>__lock_text_start (612 samples, 5.75%)</title><rect x="942.5" y="99.0" width="67.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="945.5" y="110.0">__lock_..</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (3 samples, 0.03%)</title><rect x="1010.3" y="99.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1013.3" y="110.0"></text>
</g>
<g>
<title>tcp_event_data_recv (5 samples, 0.05%)</title><rect x="1010.8" y="163.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1013.8" y="174.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (15 samples, 0.14%)</title><rect x="1011.3" y="163.0" width="1.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1014.3" y="174.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (8 samples, 0.08%)</title><rect x="1011.4" y="147.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1014.4" y="158.0"></text>
</g>
<g>
<title>read_tsc (5 samples, 0.05%)</title><rect x="1012.4" y="147.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1015.4" y="158.0"></text>
</g>
<g>
<title>tcp_queue_rcv (10 samples, 0.09%)</title><rect x="1013.0" y="163.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1016.0" y="174.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (3 samples, 0.03%)</title><rect x="1014.3" y="195.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1017.3" y="206.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (6 samples, 0.06%)</title><rect x="1015.2" y="259.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1018.2" y="270.0"></text>
</g>
<g>
<title>ret_from_intr (3 samples, 0.03%)</title><rect x="1016.9" y="387.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1019.9" y="398.0"></text>
</g>
<g>
<title>do_IRQ (3 samples, 0.03%)</title><rect x="1016.9" y="371.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1019.9" y="382.0"></text>
</g>
<g>
<title>irq_exit (3 samples, 0.03%)</title><rect x="1016.9" y="355.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1019.9" y="366.0"></text>
</g>
<g>
<title>__softirqentry_text_start (3 samples, 0.03%)</title><rect x="1016.9" y="339.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1019.9" y="350.0"></text>
</g>
<g>
<title>dev_queue_xmit (98 samples, 0.92%)</title><rect x="1017.2" y="419.0" width="10.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1020.2" y="430.0"></text>
</g>
<g>
<title>__dev_queue_xmit (94 samples, 0.88%)</title><rect x="1017.2" y="403.0" width="10.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1020.2" y="414.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (9 samples, 0.08%)</title><rect x="1019.8" y="387.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1022.8" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (48 samples, 0.45%)</title><rect x="1020.8" y="387.0" width="5.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1023.8" y="398.0"></text>
</g>
<g>
<title>loopback_xmit (38 samples, 0.36%)</title><rect x="1021.5" y="371.0" width="4.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1024.5" y="382.0"></text>
</g>
<g>
<title>eth_type_trans (6 samples, 0.06%)</title><rect x="1021.8" y="355.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1024.8" y="366.0"></text>
</g>
<g>
<title>netif_rx (19 samples, 0.18%)</title><rect x="1022.5" y="355.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1025.5" y="366.0"></text>
</g>
<g>
<title>netif_rx_internal (18 samples, 0.17%)</title><rect x="1022.6" y="339.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1025.6" y="350.0"></text>
</g>
<g>
<title>enqueue_to_backlog (18 samples, 0.17%)</title><rect x="1022.6" y="323.0" width="2.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1025.6" y="334.0"></text>
</g>
<g>
<title>sk_free (3 samples, 0.03%)</title><rect x="1024.6" y="355.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1027.6" y="366.0"></text>
</g>
<g>
<title>tcp_wfree (5 samples, 0.05%)</title><rect x="1025.2" y="355.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1028.2" y="366.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (3 samples, 0.03%)</title><rect x="1025.7" y="371.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1028.7" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (3 samples, 0.03%)</title><rect x="1026.2" y="387.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1029.2" y="398.0"></text>
</g>
<g>
<title>validate_xmit_skb (8 samples, 0.08%)</title><rect x="1026.7" y="387.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1029.7" y="398.0"></text>
</g>
<g>
<title>netif_skb_features (3 samples, 0.03%)</title><rect x="1027.3" y="371.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1030.3" y="382.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.03%)</title><rect x="1027.6" y="403.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1030.6" y="414.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (3 samples, 0.03%)</title><rect x="1028.3" y="451.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1031.3" y="462.0"></text>
</g>
<g>
<title>ipv4_dst_check (4 samples, 0.04%)</title><rect x="1029.0" y="499.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1032.0" y="510.0"></text>
</g>
<g>
<title>ip_copy_addrs (4 samples, 0.04%)</title><rect x="1029.6" y="515.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1032.6" y="526.0"></text>
</g>
<g>
<title>skb_clone (12 samples, 0.11%)</title><rect x="1030.0" y="531.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1033.0" y="542.0"></text>
</g>
<g>
<title>__skb_clone (8 samples, 0.08%)</title><rect x="1030.5" y="515.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1033.5" y="526.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (57 samples, 0.54%)</title><rect x="1031.7" y="547.0" width="6.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1034.7" y="558.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.04%)</title><rect x="1038.5" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1041.5" y="558.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (44 samples, 0.41%)</title><rect x="1039.5" y="547.0" width="4.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1042.5" y="558.0"></text>
</g>
<g>
<title>tcp_rearm_rto (31 samples, 0.29%)</title><rect x="1040.9" y="531.0" width="3.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1043.9" y="542.0"></text>
</g>
<g>
<title>sk_reset_timer (27 samples, 0.25%)</title><rect x="1041.3" y="515.0" width="3.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1044.3" y="526.0"></text>
</g>
<g>
<title>mod_timer (27 samples, 0.25%)</title><rect x="1041.3" y="499.0" width="3.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1044.3" y="510.0"></text>
</g>
<g>
<title>__lock_text_start (22 samples, 0.21%)</title><rect x="1041.7" y="483.0" width="2.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1044.7" y="494.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (5 samples, 0.05%)</title><rect x="1044.9" y="547.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1047.9" y="558.0"></text>
</g>
<g>
<title>tcp_v4_send_check (3 samples, 0.03%)</title><rect x="1045.6" y="547.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1048.6" y="558.0"></text>
</g>
<g>
<title>tcp_send_mss (26 samples, 0.24%)</title><rect x="1046.1" y="595.0" width="2.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1049.1" y="606.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (4 samples, 0.04%)</title><rect x="1046.6" y="579.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1049.6" y="590.0"></text>
</g>
<g>
<title>tcp_current_mss (17 samples, 0.16%)</title><rect x="1047.1" y="579.0" width="1.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1050.1" y="590.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.03%)</title><rect x="1048.4" y="563.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1051.4" y="574.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (4 samples, 0.04%)</title><rect x="1049.0" y="611.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1052.0" y="622.0"></text>
</g>
<g>
<title>security_socket_sendmsg (43 samples, 0.40%)</title><rect x="1049.8" y="643.0" width="4.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1052.8" y="654.0"></text>
</g>
<g>
<title>aa_sk_perm (3 samples, 0.03%)</title><rect x="1050.2" y="627.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1053.2" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (36 samples, 0.34%)</title><rect x="1050.6" y="627.0" width="3.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1053.6" y="638.0"></text>
</g>
<g>
<title>aa_sk_perm (35 samples, 0.33%)</title><rect x="1050.7" y="611.0" width="3.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1053.7" y="622.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (27 samples, 0.25%)</title><rect x="1051.4" y="595.0" width="3.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1054.4" y="606.0"></text>
</g>
<g>
<title>aa_profile_af_perm (13 samples, 0.12%)</title><rect x="1053.0" y="579.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1056.0" y="590.0"></text>
</g>
<g>
<title>sockfd_lookup_light (28 samples, 0.26%)</title><rect x="1054.7" y="659.0" width="3.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1057.7" y="670.0"></text>
</g>
<g>
<title>__fdget (24 samples, 0.23%)</title><rect x="1054.8" y="643.0" width="2.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1057.8" y="654.0"></text>
</g>
<g>
<title>__fget_light (23 samples, 0.22%)</title><rect x="1054.9" y="627.0" width="2.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1057.9" y="638.0"></text>
</g>
<g>
<title>__fget (23 samples, 0.22%)</title><rect x="1054.9" y="611.0" width="2.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1057.9" y="622.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.03%)</title><rect x="1057.4" y="643.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1060.4" y="654.0"></text>
</g>
<g>
<title>import_single_range (6 samples, 0.06%)</title><rect x="1057.9" y="675.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1060.9" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (6 samples, 0.06%)</title><rect x="1058.5" y="691.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1061.5" y="702.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.04%)</title><rect x="1058.8" y="675.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1061.8" y="686.0"></text>
</g>
<g>
<title>__sched_text_start (4 samples, 0.04%)</title><rect x="1058.8" y="659.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1061.8" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.03%)</title><rect x="1058.9" y="643.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1061.9" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (29 samples, 0.27%)</title><rect x="1059.4" y="819.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1062.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (20 samples, 0.19%)</title><rect x="1060.3" y="803.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1063.3" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (20 samples, 0.19%)</title><rect x="1060.3" y="787.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1063.3" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (12 samples, 0.11%)</title><rect x="1061.2" y="771.0" width="1.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1064.2" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.multiPut (6 samples, 0.06%)</title><rect x="1062.7" y="883.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1065.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.03%)</title><rect x="1063.1" y="867.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1066.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.03%)</title><rect x="1063.1" y="851.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1066.1" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.multiGet (3 samples, 0.03%)</title><rect x="1063.1" y="835.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1066.1" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Topology.getReplicas (69 samples, 0.65%)</title><rect x="1063.4" y="899.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1066.4" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (41 samples, 0.39%)</title><rect x="1063.4" y="883.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1066.4" y="894.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (30 samples, 0.28%)</title><rect x="1064.2" y="867.0" width="3.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1067.2" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/Replicas.replicaFactor (4 samples, 0.04%)</title><rect x="1067.5" y="867.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1070.5" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.add (24 samples, 0.23%)</title><rect x="1068.1" y="883.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1071.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.put (24 samples, 0.23%)</title><rect x="1068.1" y="867.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1071.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (21 samples, 0.20%)</title><rect x="1068.4" y="851.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1071.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 0.06%)</title><rect x="1069.1" y="835.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1072.1" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (6 samples, 0.06%)</title><rect x="1069.7" y="835.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1072.7" y="846.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.03%)</title><rect x="1070.4" y="835.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1073.4" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/manikhin/ReplicasRequests.handleMultiRequest (3 samples, 0.03%)</title><rect x="1070.7" y="883.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1073.7" y="894.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (82 samples, 0.77%)</title><rect x="1071.1" y="931.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1074.1" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (82 samples, 0.77%)</title><rect x="1071.1" y="915.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1074.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (63 samples, 0.59%)</title><rect x="1071.1" y="899.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1074.1" y="910.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (21 samples, 0.20%)</title><rect x="1075.7" y="883.0" width="2.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1078.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (19 samples, 0.18%)</title><rect x="1078.0" y="899.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1081.0" y="910.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (19 samples, 0.18%)</title><rect x="1078.0" y="883.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1081.0" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (19 samples, 0.18%)</title><rect x="1078.0" y="867.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1081.0" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (90 samples, 0.85%)</title><rect x="1080.3" y="963.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1083.3" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (13 samples, 0.12%)</title><rect x="1081.5" y="947.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1084.5" y="958.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (11 samples, 0.10%)</title><rect x="1081.7" y="931.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1084.7" y="942.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (11 samples, 0.10%)</title><rect x="1081.7" y="915.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1084.7" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (11 samples, 0.10%)</title><rect x="1081.7" y="899.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1084.7" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (51 samples, 0.48%)</title><rect x="1082.9" y="947.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1085.9" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (45 samples, 0.42%)</title><rect x="1083.6" y="931.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1086.6" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (15 samples, 0.14%)</title><rect x="1088.6" y="947.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1091.6" y="958.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (41 samples, 0.39%)</title><rect x="1090.2" y="963.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1093.2" y="974.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (14 samples, 0.13%)</title><rect x="1093.2" y="947.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1096.2" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (14 samples, 0.13%)</title><rect x="1093.2" y="931.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1096.2" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (115 samples, 1.08%)</title><rect x="1094.8" y="963.0" width="12.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1097.8" y="974.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (8 samples, 0.08%)</title><rect x="1096.2" y="947.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1099.2" y="958.0"></text>
</g>
<g>
<title>itable stub (28 samples, 0.26%)</title><rect x="1097.1" y="947.0" width="3.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1100.1" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (66 samples, 0.62%)</title><rect x="1100.2" y="947.0" width="7.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1103.2" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (673 samples, 6.32%)</title><rect x="1107.6" y="979.0" width="74.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1110.6" y="990.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (660 samples, 6.20%)</title><rect x="1109.1" y="963.0" width="73.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1112.1" y="974.0">one/nio/..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (21 samples, 0.20%)</title><rect x="1112.2" y="947.0" width="2.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1115.2" y="958.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (83 samples, 0.78%)</title><rect x="1114.5" y="947.0" width="9.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1117.5" y="958.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (10 samples, 0.09%)</title><rect x="1115.1" y="931.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1118.1" y="942.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (14 samples, 0.13%)</title><rect x="1116.2" y="931.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.2" y="942.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (53 samples, 0.50%)</title><rect x="1117.8" y="931.0" width="5.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1120.8" y="942.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (6 samples, 0.06%)</title><rect x="1120.2" y="915.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.2" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (16 samples, 0.15%)</title><rect x="1120.8" y="915.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.8" y="926.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (10 samples, 0.09%)</title><rect x="1122.6" y="915.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1125.6" y="926.0"></text>
</g>
<g>
<title>__recv (528 samples, 4.96%)</title><rect x="1123.7" y="947.0" width="58.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1126.7" y="958.0">__recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (471 samples, 4.42%)</title><rect x="1130.0" y="931.0" width="52.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1133.0" y="942.0">entry..</text>
</g>
<g>
<title>__x64_sys_recvfrom (3 samples, 0.03%)</title><rect x="1130.0" y="915.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1133.0" y="926.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (6 samples, 0.06%)</title><rect x="1130.4" y="915.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1133.4" y="926.0"></text>
</g>
<g>
<title>do_syscall_64 (462 samples, 4.34%)</title><rect x="1131.0" y="915.0" width="51.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1134.0" y="926.0">do_sy..</text>
</g>
<g>
<title>__sys_recvfrom (3 samples, 0.03%)</title><rect x="1134.1" y="899.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1137.1" y="910.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (431 samples, 4.05%)</title><rect x="1134.5" y="899.0" width="47.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1137.5" y="910.0">__x6..</text>
</g>
<g>
<title>__sys_recvfrom (426 samples, 4.00%)</title><rect x="1134.6" y="883.0" width="47.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1137.6" y="894.0">__sy..</text>
</g>
<g>
<title>fput_many (3 samples, 0.03%)</title><rect x="1135.7" y="867.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1138.7" y="878.0"></text>
</g>
<g>
<title>sock_recvmsg (383 samples, 3.60%)</title><rect x="1136.0" y="867.0" width="42.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1139.0" y="878.0">sock..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (7 samples, 0.07%)</title><rect x="1136.5" y="851.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1139.5" y="862.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (5 samples, 0.05%)</title><rect x="1137.2" y="851.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1140.2" y="862.0"></text>
</g>
<g>
<title>inet6_recvmsg (327 samples, 3.07%)</title><rect x="1137.8" y="851.0" width="36.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1140.8" y="862.0">ine..</text>
</g>
<g>
<title>tcp_recvmsg (324 samples, 3.04%)</title><rect x="1138.1" y="835.0" width="35.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1141.1" y="846.0">tcp..</text>
</g>
<g>
<title>__kfree_skb (64 samples, 0.60%)</title><rect x="1141.4" y="819.0" width="7.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1144.4" y="830.0"></text>
</g>
<g>
<title>kfree_skbmem (7 samples, 0.07%)</title><rect x="1141.4" y="803.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1144.4" y="814.0"></text>
</g>
<g>
<title>skb_release_all (56 samples, 0.53%)</title><rect x="1142.2" y="803.0" width="6.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1145.2" y="814.0"></text>
</g>
<g>
<title>skb_release_data (18 samples, 0.17%)</title><rect x="1142.4" y="787.0" width="2.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1145.4" y="798.0"></text>
</g>
<g>
<title>skb_free_head (3 samples, 0.03%)</title><rect x="1144.1" y="771.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1147.1" y="782.0"></text>
</g>
<g>
<title>kfree (3 samples, 0.03%)</title><rect x="1144.1" y="755.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1147.1" y="766.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.03%)</title><rect x="1144.1" y="739.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1147.1" y="750.0"></text>
</g>
<g>
<title>skb_release_head_state (26 samples, 0.24%)</title><rect x="1144.4" y="787.0" width="2.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1147.4" y="798.0"></text>
</g>
<g>
<title>dst_release (25 samples, 0.23%)</title><rect x="1144.6" y="771.0" width="2.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1147.6" y="782.0"></text>
</g>
<g>
<title>sock_rfree (10 samples, 0.09%)</title><rect x="1147.3" y="787.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1150.3" y="798.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (33 samples, 0.31%)</title><rect x="1148.8" y="819.0" width="3.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1151.8" y="830.0"></text>
</g>
<g>
<title>lock_sock_nested (6 samples, 0.06%)</title><rect x="1152.5" y="819.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1155.5" y="830.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (4 samples, 0.04%)</title><rect x="1152.8" y="803.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1155.8" y="814.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (4 samples, 0.04%)</title><rect x="1152.8" y="787.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1155.8" y="798.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.03%)</title><rect x="1153.2" y="819.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1156.2" y="830.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (63 samples, 0.59%)</title><rect x="1153.5" y="819.0" width="7.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1156.5" y="830.0"></text>
</g>
<g>
<title>__skb_datagram_iter (60 samples, 0.56%)</title><rect x="1153.8" y="803.0" width="6.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1156.8" y="814.0"></text>
</g>
<g>
<title>simple_copy_to_iter (43 samples, 0.40%)</title><rect x="1155.6" y="787.0" width="4.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1158.6" y="798.0"></text>
</g>
<g>
<title>__check_object_size (11 samples, 0.10%)</title><rect x="1155.6" y="771.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1158.6" y="782.0"></text>
</g>
<g>
<title>__virt_addr_valid (9 samples, 0.08%)</title><rect x="1155.9" y="755.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1158.9" y="766.0"></text>
</g>
<g>
<title>_copy_to_iter (27 samples, 0.25%)</title><rect x="1156.9" y="771.0" width="2.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1159.9" y="782.0"></text>
</g>
<g>
<title>copy_user_generic_string (27 samples, 0.25%)</title><rect x="1156.9" y="755.0" width="2.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1159.9" y="766.0"></text>
</g>
<g>
<title>copyout (3 samples, 0.03%)</title><rect x="1160.1" y="771.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1163.1" y="782.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (89 samples, 0.84%)</title><rect x="1160.5" y="819.0" width="9.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1163.5" y="830.0"></text>
</g>
<g>
<title>tcp_send_ack (83 samples, 0.78%)</title><rect x="1161.2" y="803.0" width="9.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1164.2" y="814.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (83 samples, 0.78%)</title><rect x="1161.2" y="787.0" width="9.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1164.2" y="798.0"></text>
</g>
<g>
<title>__alloc_skb (14 samples, 0.13%)</title><rect x="1161.2" y="771.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1164.2" y="782.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (8 samples, 0.08%)</title><rect x="1161.4" y="755.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1164.4" y="766.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (6 samples, 0.06%)</title><rect x="1161.4" y="739.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1164.4" y="750.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (3 samples, 0.03%)</title><rect x="1162.3" y="755.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1165.3" y="766.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (66 samples, 0.62%)</title><rect x="1162.7" y="771.0" width="7.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1165.7" y="782.0"></text>
</g>
<g>
<title>ip_queue_xmit (64 samples, 0.60%)</title><rect x="1163.0" y="755.0" width="7.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1166.0" y="766.0"></text>
</g>
<g>
<title>__ip_queue_xmit (64 samples, 0.60%)</title><rect x="1163.0" y="739.0" width="7.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1166.0" y="750.0"></text>
</g>
<g>
<title>ip_local_out (60 samples, 0.56%)</title><rect x="1163.3" y="723.0" width="6.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1166.3" y="734.0"></text>
</g>
<g>
<title>ip_output (59 samples, 0.55%)</title><rect x="1163.4" y="707.0" width="6.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1166.4" y="718.0"></text>
</g>
<g>
<title>ip_finish_output (59 samples, 0.55%)</title><rect x="1163.4" y="691.0" width="6.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1166.4" y="702.0"></text>
</g>
<g>
<title>__ip_finish_output (56 samples, 0.53%)</title><rect x="1163.5" y="675.0" width="6.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1166.5" y="686.0"></text>
</g>
<g>
<title>ip_finish_output2 (55 samples, 0.52%)</title><rect x="1163.6" y="659.0" width="6.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1166.6" y="670.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (41 samples, 0.39%)</title><rect x="1163.8" y="643.0" width="4.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1166.8" y="654.0"></text>
</g>
<g>
<title>do_softirq.part.0 (41 samples, 0.39%)</title><rect x="1163.8" y="627.0" width="4.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1166.8" y="638.0"></text>
</g>
<g>
<title>do_softirq_own_stack (36 samples, 0.34%)</title><rect x="1164.4" y="611.0" width="4.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1167.4" y="622.0"></text>
</g>
<g>
<title>__softirqentry_text_start (36 samples, 0.34%)</title><rect x="1164.4" y="595.0" width="4.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1167.4" y="606.0"></text>
</g>
<g>
<title>net_rx_action (36 samples, 0.34%)</title><rect x="1164.4" y="579.0" width="4.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1167.4" y="590.0"></text>
</g>
<g>
<title>process_backlog (36 samples, 0.34%)</title><rect x="1164.4" y="563.0" width="4.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1167.4" y="574.0"></text>
</g>
<g>
<title>__netif_receive_skb (35 samples, 0.33%)</title><rect x="1164.5" y="547.0" width="3.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1167.5" y="558.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (35 samples, 0.33%)</title><rect x="1164.5" y="531.0" width="3.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1167.5" y="542.0"></text>
</g>
<g>
<title>ip_rcv (34 samples, 0.32%)</title><rect x="1164.6" y="515.0" width="3.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1167.6" y="526.0"></text>
</g>
<g>
<title>ip_rcv_finish (33 samples, 0.31%)</title><rect x="1164.7" y="499.0" width="3.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1167.7" y="510.0"></text>
</g>
<g>
<title>ip_local_deliver (32 samples, 0.30%)</title><rect x="1164.8" y="483.0" width="3.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1167.8" y="494.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (32 samples, 0.30%)</title><rect x="1164.8" y="467.0" width="3.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1167.8" y="478.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (32 samples, 0.30%)</title><rect x="1164.8" y="451.0" width="3.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1167.8" y="462.0"></text>
</g>
<g>
<title>tcp_v4_rcv (31 samples, 0.29%)</title><rect x="1164.9" y="435.0" width="3.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1167.9" y="446.0"></text>
</g>
<g>
<title>__inet_lookup_established (3 samples, 0.03%)</title><rect x="1165.1" y="419.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1168.1" y="430.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (26 samples, 0.24%)</title><rect x="1165.5" y="419.0" width="2.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1168.5" y="430.0"></text>
</g>
<g>
<title>tcp_rcv_established (24 samples, 0.23%)</title><rect x="1165.7" y="403.0" width="2.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1168.7" y="414.0"></text>
</g>
<g>
<title>tcp_ack (20 samples, 0.19%)</title><rect x="1166.2" y="387.0" width="2.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1169.2" y="398.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (15 samples, 0.14%)</title><rect x="1166.6" y="371.0" width="1.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1169.6" y="382.0"></text>
</g>
<g>
<title>__kfree_skb (9 samples, 0.08%)</title><rect x="1167.2" y="355.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1170.2" y="366.0"></text>
</g>
<g>
<title>skb_release_all (7 samples, 0.07%)</title><rect x="1167.4" y="339.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1170.4" y="350.0"></text>
</g>
<g>
<title>skb_release_data (7 samples, 0.07%)</title><rect x="1167.4" y="323.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1170.4" y="334.0"></text>
</g>
<g>
<title>skb_free_head (4 samples, 0.04%)</title><rect x="1167.7" y="307.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1170.7" y="318.0"></text>
</g>
<g>
<title>kfree (4 samples, 0.04%)</title><rect x="1167.7" y="291.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1170.7" y="302.0"></text>
</g>
<g>
<title>__slab_free (4 samples, 0.04%)</title><rect x="1167.7" y="275.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1170.7" y="286.0"></text>
</g>
<g>
<title>dev_queue_xmit (10 samples, 0.09%)</title><rect x="1168.4" y="643.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1171.4" y="654.0"></text>
</g>
<g>
<title>__dev_queue_xmit (10 samples, 0.09%)</title><rect x="1168.4" y="627.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1171.4" y="638.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (7 samples, 0.07%)</title><rect x="1168.6" y="611.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1171.6" y="622.0"></text>
</g>
<g>
<title>loopback_xmit (5 samples, 0.05%)</title><rect x="1168.8" y="595.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1171.8" y="606.0"></text>
</g>
<g>
<title>netif_rx (4 samples, 0.04%)</title><rect x="1168.8" y="579.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1171.8" y="590.0"></text>
</g>
<g>
<title>netif_rx_internal (4 samples, 0.04%)</title><rect x="1168.8" y="563.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1171.8" y="574.0"></text>
</g>
<g>
<title>enqueue_to_backlog (4 samples, 0.04%)</title><rect x="1168.8" y="547.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1171.8" y="558.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (30 samples, 0.28%)</title><rect x="1170.5" y="819.0" width="3.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1173.5" y="830.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (25 samples, 0.23%)</title><rect x="1171.0" y="803.0" width="2.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1174.0" y="814.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (12 samples, 0.11%)</title><rect x="1171.0" y="787.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1174.0" y="798.0"></text>
</g>
<g>
<title>ktime_get (6 samples, 0.06%)</title><rect x="1172.4" y="787.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1175.4" y="798.0"></text>
</g>
<g>
<title>read_tsc (7 samples, 0.07%)</title><rect x="1173.0" y="787.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1176.0" y="798.0"></text>
</g>
<g>
<title>security_socket_recvmsg (39 samples, 0.37%)</title><rect x="1174.0" y="851.0" width="4.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1177.0" y="862.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (37 samples, 0.35%)</title><rect x="1174.3" y="835.0" width="4.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1177.3" y="846.0"></text>
</g>
<g>
<title>aa_sk_perm (37 samples, 0.35%)</title><rect x="1174.3" y="819.0" width="4.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1177.3" y="830.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (31 samples, 0.29%)</title><rect x="1174.9" y="803.0" width="3.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1177.9" y="814.0"></text>
</g>
<g>
<title>aa_profile_af_perm (15 samples, 0.14%)</title><rect x="1176.6" y="787.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1179.6" y="798.0"></text>
</g>
<g>
<title>sockfd_lookup_light (30 samples, 0.28%)</title><rect x="1178.5" y="867.0" width="3.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1181.5" y="878.0"></text>
</g>
<g>
<title>__fdget (19 samples, 0.18%)</title><rect x="1178.6" y="851.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1181.6" y="862.0"></text>
</g>
<g>
<title>__fget_light (19 samples, 0.18%)</title><rect x="1178.6" y="835.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1181.6" y="846.0"></text>
</g>
<g>
<title>__fget (19 samples, 0.18%)</title><rect x="1178.6" y="819.0" width="2.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1181.6" y="830.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.09%)</title><rect x="1180.7" y="851.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1183.7" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (15 samples, 0.14%)</title><rect x="1182.5" y="1011.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="1022.0"></text>
</g>
<g>
<title>gettimeofday (13 samples, 0.12%)</title><rect x="1182.7" y="995.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1185.7" y="1006.0"></text>
</g>
<g>
<title>[vdso] (12 samples, 0.11%)</title><rect x="1182.8" y="979.0" width="1.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1185.8" y="990.0"></text>
</g>
<g>
<title>start_thread (53 samples, 0.50%)</title><rect x="1184.1" y="1027.0" width="5.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1187.1" y="1038.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (53 samples, 0.50%)</title><rect x="1184.1" y="1011.0" width="5.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1187.1" y="1022.0"></text>
</g>
<g>
<title>Thread::call_run() (53 samples, 0.50%)</title><rect x="1184.1" y="995.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="1006.0"></text>
</g>
<g>
<title>GangWorker::loop() (40 samples, 0.38%)</title><rect x="1184.1" y="979.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="990.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (3 samples, 0.03%)</title><rect x="1184.1" y="963.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="974.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (36 samples, 0.34%)</title><rect x="1184.5" y="963.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (27 samples, 0.25%)</title><rect x="1184.5" y="947.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="958.0"></text>
</g>
<g>
<title>SpinPause (25 samples, 0.23%)</title><rect x="1184.7" y="931.0" width="2.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1187.7" y="942.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (9 samples, 0.08%)</title><rect x="1187.5" y="947.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.5" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (8 samples, 0.08%)</title><rect x="1187.6" y="931.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.6" y="942.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (7 samples, 0.07%)</title><rect x="1187.7" y="915.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.7" y="926.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (7 samples, 0.07%)</title><rect x="1187.7" y="899.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.7" y="910.0"></text>
</g>
<g>
<title>VMThread::run() (11 samples, 0.10%)</title><rect x="1188.6" y="979.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.6" y="990.0"></text>
</g>
<g>
<title>VMThread::loop() (11 samples, 0.10%)</title><rect x="1188.6" y="963.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.6" y="974.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.0] (6 samples, 0.06%)</title><rect x="1188.8" y="947.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.8" y="958.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (6 samples, 0.06%)</title><rect x="1188.8" y="931.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.8" y="942.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (6 samples, 0.06%)</title><rect x="1188.8" y="915.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.8" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (6 samples, 0.06%)</title><rect x="1188.8" y="899.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.8" y="910.0"></text>
</g>
<g>
<title>__sched_yield (3 samples, 0.03%)</title><rect x="1189.4" y="947.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1192.4" y="958.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.03%)</title><rect x="1189.4" y="931.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1192.4" y="942.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.03%)</title><rect x="1189.4" y="915.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1192.4" y="926.0"></text>
</g>
</g>
</svg>
